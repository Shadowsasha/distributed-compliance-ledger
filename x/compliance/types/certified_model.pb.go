// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/compliance/certified_model.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CertifiedModel struct {
	Vid               int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Pid               int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	SoftwareVersion   uint32 `protobuf:"varint,3,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	CertificationType string `protobuf:"bytes,4,opt,name=certificationType,proto3" json:"certificationType,omitempty"`
	Value             bool   `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CertifiedModel) Reset()         { *m = CertifiedModel{} }
func (m *CertifiedModel) String() string { return proto.CompactTextString(m) }
func (*CertifiedModel) ProtoMessage()    {}
func (*CertifiedModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7be90d472c8a2fef, []int{0}
}
func (m *CertifiedModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertifiedModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertifiedModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertifiedModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertifiedModel.Merge(m, src)
}
func (m *CertifiedModel) XXX_Size() int {
	return m.Size()
}
func (m *CertifiedModel) XXX_DiscardUnknown() {
	xxx_messageInfo_CertifiedModel.DiscardUnknown(m)
}

var xxx_messageInfo_CertifiedModel proto.InternalMessageInfo

func (m *CertifiedModel) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *CertifiedModel) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CertifiedModel) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *CertifiedModel) GetCertificationType() string {
	if m != nil {
		return m.CertificationType
	}
	return ""
}

func (m *CertifiedModel) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*CertifiedModel)(nil), "zigbeealliance.distributedcomplianceledger.compliance.CertifiedModel")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/compliance/certified_model.proto", fileDescriptor_7be90d472c8a2fef)
}

var fileDescriptor_7be90d472c8a2fef = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xbf, 0x4a, 0xc4, 0x30,
	0x1c, 0xc7, 0x1b, 0xcf, 0x8a, 0x06, 0xfc, 0x57, 0x1c, 0x3a, 0x85, 0xe2, 0x94, 0xc1, 0xb6, 0x83,
	0xf8, 0x02, 0x3a, 0x1e, 0x2e, 0x45, 0x1c, 0x5c, 0x24, 0x6d, 0x7e, 0x57, 0x7f, 0x90, 0x6b, 0x42,
	0x9a, 0x9e, 0x9e, 0x4f, 0xe1, 0x33, 0xf8, 0x34, 0x8e, 0x37, 0x3a, 0x4a, 0xfb, 0x22, 0x52, 0x7b,
	0x52, 0xff, 0xe1, 0x96, 0x7c, 0x02, 0x1f, 0xf2, 0xfd, 0xd0, 0xe9, 0x23, 0x96, 0x39, 0x80, 0x50,
	0x0a, 0x45, 0x55, 0x40, 0x2a, 0xb1, 0x76, 0x16, 0xf3, 0xc6, 0x81, 0x2c, 0xf4, 0xdc, 0x0c, 0x54,
	0x81, 0x2c, 0xc1, 0xa6, 0x23, 0x48, 0x0b, 0xb0, 0x0e, 0x67, 0x08, 0xf2, 0x76, 0xae, 0x25, 0xa8,
	0xc4, 0x58, 0xed, 0x74, 0x70, 0xf6, 0x5d, 0x96, 0xfc, 0x23, 0x4b, 0x46, 0x70, 0xfc, 0x4c, 0xe8,
	0xde, 0xc5, 0xa7, 0xf0, 0xb2, 0xf7, 0x05, 0x07, 0x74, 0xb2, 0x40, 0x19, 0x92, 0x88, 0x70, 0x3f,
	0xeb, 0x8f, 0x3d, 0x31, 0x28, 0xc3, 0x8d, 0x81, 0x18, 0x94, 0x01, 0xa7, 0xfb, 0xb5, 0x9e, 0xb9,
	0x7b, 0x61, 0xe1, 0x1a, 0x6c, 0x8d, 0xba, 0x0a, 0x27, 0x11, 0xe1, 0xbb, 0xd9, 0x4f, 0x1c, 0x9c,
	0xd0, 0xc3, 0xf5, 0x87, 0x0b, 0xe1, 0x50, 0x57, 0x57, 0x4b, 0x03, 0xe1, 0x66, 0x44, 0xf8, 0x4e,
	0xf6, 0xfb, 0x21, 0x38, 0xa2, 0xfe, 0x42, 0xa8, 0x06, 0x42, 0x3f, 0x22, 0x7c, 0x3b, 0x1b, 0x2e,
	0xe7, 0xf0, 0xd2, 0x32, 0xb2, 0x6a, 0x19, 0x79, 0x6b, 0x19, 0x79, 0xea, 0x98, 0xb7, 0xea, 0x98,
	0xf7, 0xda, 0x31, 0xef, 0x66, 0x5a, 0xa2, 0xbb, 0x6b, 0xf2, 0x7e, 0x51, 0x3a, 0x04, 0x88, 0xff,
	0xca, 0x19, 0x8f, 0x8b, 0xe3, 0x75, 0xd0, 0x87, 0xaf, 0x49, 0xdd, 0xd2, 0x40, 0x9d, 0x6f, 0x7d,
	0x94, 0x3c, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x49, 0x94, 0xb3, 0x98, 0x01, 0x00, 0x00,
}

func (m *CertifiedModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertifiedModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertifiedModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CertificationType) > 0 {
		i -= len(m.CertificationType)
		copy(dAtA[i:], m.CertificationType)
		i = encodeVarintCertifiedModel(dAtA, i, uint64(len(m.CertificationType)))
		i--
		dAtA[i] = 0x22
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintCertifiedModel(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintCertifiedModel(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Vid != 0 {
		i = encodeVarintCertifiedModel(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCertifiedModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovCertifiedModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertifiedModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovCertifiedModel(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovCertifiedModel(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovCertifiedModel(uint64(m.SoftwareVersion))
	}
	l = len(m.CertificationType)
	if l > 0 {
		n += 1 + l + sovCertifiedModel(uint64(l))
	}
	if m.Value {
		n += 2
	}
	return n
}

func sovCertifiedModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCertifiedModel(x uint64) (n int) {
	return sovCertifiedModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertifiedModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCertifiedModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertifiedModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertifiedModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCertifiedModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCertifiedModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCertifiedModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCertifiedModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCertifiedModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCertifiedModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCertifiedModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCertifiedModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCertifiedModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCertifiedModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCertifiedModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCertifiedModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCertifiedModel = fmt.Errorf("proto: unexpected end of group")
)
