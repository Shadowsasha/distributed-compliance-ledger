// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/dclupgrade/rejected_upgrade.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/x/upgrade/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RejectedUpgrade struct {
	Plan      types.Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan"`
	Creator   string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Approvals []*Grant   `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
	Rejects   []*Grant   `protobuf:"bytes,4,rep,name=rejects,proto3" json:"rejects,omitempty"`
}

func (m *RejectedUpgrade) Reset()         { *m = RejectedUpgrade{} }
func (m *RejectedUpgrade) String() string { return proto.CompactTextString(m) }
func (*RejectedUpgrade) ProtoMessage()    {}
func (*RejectedUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_9591340410a3709a, []int{0}
}
func (m *RejectedUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RejectedUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RejectedUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RejectedUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectedUpgrade.Merge(m, src)
}
func (m *RejectedUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *RejectedUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectedUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_RejectedUpgrade proto.InternalMessageInfo

func (m *RejectedUpgrade) GetPlan() types.Plan {
	if m != nil {
		return m.Plan
	}
	return types.Plan{}
}

func (m *RejectedUpgrade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *RejectedUpgrade) GetApprovals() []*Grant {
	if m != nil {
		return m.Approvals
	}
	return nil
}

func (m *RejectedUpgrade) GetRejects() []*Grant {
	if m != nil {
		return m.Rejects
	}
	return nil
}

func init() {
	proto.RegisterType((*RejectedUpgrade)(nil), "zigbeealliance.distributedcomplianceledger.dclupgrade.RejectedUpgrade")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/dclupgrade/rejected_upgrade.proto", fileDescriptor_9591340410a3709a)
}

var fileDescriptor_9591340410a3709a = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xbf, 0x4a, 0x2b, 0x41,
	0x14, 0xc6, 0x77, 0x93, 0x70, 0x43, 0x36, 0xc5, 0x85, 0x25, 0xc5, 0xde, 0x70, 0xd9, 0x1b, 0x2e,
	0x16, 0x69, 0x76, 0x96, 0x44, 0xb4, 0xb2, 0x49, 0x1a, 0x0b, 0x2d, 0x64, 0x45, 0x8b, 0x34, 0x61,
	0x76, 0xe7, 0x30, 0xae, 0x4c, 0x76, 0x86, 0x99, 0x49, 0x50, 0x9f, 0xc2, 0x57, 0x11, 0x7c, 0x88,
	0x94, 0xc1, 0xca, 0x4a, 0x24, 0x79, 0x11, 0x49, 0x66, 0x96, 0x18, 0x10, 0x8b, 0x60, 0xb7, 0xe7,
	0xcf, 0xfe, 0xce, 0xf7, 0xcd, 0xe7, 0x9d, 0x3f, 0xe4, 0x34, 0x05, 0xc0, 0x8c, 0xe5, 0xb8, 0xc8,
	0x20, 0x26, 0xb9, 0xd2, 0x32, 0x4f, 0xa7, 0x1a, 0x48, 0xc6, 0x27, 0xc2, 0x74, 0x19, 0x10, 0x0a,
	0x32, 0x26, 0x19, 0x9b, 0x0a, 0x2a, 0x31, 0x81, 0x58, 0xc2, 0x2d, 0x64, 0x1a, 0xc8, 0xd8, 0x36,
	0x90, 0x90, 0x5c, 0x73, 0xff, 0x68, 0x97, 0x86, 0xbe, 0xa1, 0xa1, 0x2d, 0xad, 0xdd, 0xa2, 0x9c,
	0xf2, 0x0d, 0x21, 0x5e, 0x7f, 0x19, 0x58, 0xfb, 0x4f, 0xc6, 0xd5, 0x84, 0xab, 0xb1, 0x19, 0x98,
	0xc2, 0x8e, 0x0e, 0x4c, 0x15, 0x97, 0x72, 0x66, 0xbd, 0x14, 0x34, 0xee, 0xc5, 0x3b, 0x6a, 0xda,
	0x83, 0xfd, 0xbc, 0x51, 0x89, 0x0b, 0x6d, 0x10, 0xff, 0x9f, 0x2a, 0xde, 0xef, 0xc4, 0x7a, 0xbd,
	0x32, 0x73, 0xff, 0xd8, 0xab, 0x09, 0x86, 0x8b, 0xc0, 0xed, 0xb8, 0xdd, 0x66, 0xff, 0x2f, 0xb2,
	0xca, 0xca, 0xdb, 0x56, 0x0b, 0xba, 0x60, 0xb8, 0x18, 0xd6, 0xe6, 0x6f, 0xff, 0x9c, 0x64, 0xb3,
	0xef, 0xf7, 0xbd, 0x7a, 0x26, 0x01, 0x6b, 0x2e, 0x83, 0x4a, 0xc7, 0xed, 0x36, 0x86, 0xc1, 0xcb,
	0x73, 0xd4, 0xb2, 0x7f, 0x0f, 0x08, 0x91, 0xa0, 0xd4, 0xa5, 0x96, 0x79, 0x41, 0x93, 0x72, 0xd1,
	0x1f, 0x79, 0x0d, 0x2c, 0x84, 0xe4, 0x33, 0xcc, 0x54, 0x50, 0xed, 0x54, 0xbb, 0xcd, 0xfe, 0x09,
	0xda, 0xeb, 0x91, 0xd1, 0xe9, 0xda, 0x56, 0xb2, 0xc5, 0xf9, 0xd7, 0x5e, 0xdd, 0xc4, 0xa8, 0x82,
	0xda, 0x0f, 0x90, 0x4b, 0xd8, 0x10, 0xe6, 0xcb, 0xd0, 0x5d, 0x2c, 0x43, 0xf7, 0x7d, 0x19, 0xba,
	0x8f, 0xab, 0xd0, 0x59, 0xac, 0x42, 0xe7, 0x75, 0x15, 0x3a, 0xa3, 0x33, 0x9a, 0xeb, 0x9b, 0x69,
	0x8a, 0x32, 0x3e, 0x89, 0xcd, 0xa9, 0xe8, 0xab, 0x70, 0xa2, 0xed, 0xb1, 0xc8, 0xc6, 0x73, 0xf7,
	0x39, 0x20, 0x7d, 0x2f, 0x40, 0xa5, 0xbf, 0x36, 0x09, 0x1d, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x94, 0x47, 0x47, 0xfc, 0xc2, 0x02, 0x00, 0x00,
}

func (m *RejectedUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectedUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RejectedUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rejects) > 0 {
		for iNdEx := len(m.Rejects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rejects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRejectedUpgrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRejectedUpgrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRejectedUpgrade(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRejectedUpgrade(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRejectedUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovRejectedUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RejectedUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Plan.Size()
	n += 1 + l + sovRejectedUpgrade(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRejectedUpgrade(uint64(l))
	}
	if len(m.Approvals) > 0 {
		for _, e := range m.Approvals {
			l = e.Size()
			n += 1 + l + sovRejectedUpgrade(uint64(l))
		}
	}
	if len(m.Rejects) > 0 {
		for _, e := range m.Rejects {
			l = e.Size()
			n += 1 + l + sovRejectedUpgrade(uint64(l))
		}
	}
	return n
}

func sovRejectedUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRejectedUpgrade(x uint64) (n int) {
	return sovRejectedUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RejectedUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRejectedUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RejectedUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RejectedUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, &Grant{})
			if err := m.Approvals[len(m.Approvals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rejects = append(m.Rejects, &Grant{})
			if err := m.Rejects[len(m.Rejects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRejectedUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRejectedUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRejectedUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRejectedUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRejectedUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRejectedUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRejectedUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRejectedUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRejectedUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRejectedUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRejectedUpgrade = fmt.Errorf("proto: unexpected end of group")
)
