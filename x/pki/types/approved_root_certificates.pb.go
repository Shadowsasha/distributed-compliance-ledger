// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/approved_root_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApprovedRootCertificates struct {
	Certs []*CertificateIdentifier `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (m *ApprovedRootCertificates) Reset()         { *m = ApprovedRootCertificates{} }
func (m *ApprovedRootCertificates) String() string { return proto.CompactTextString(m) }
func (*ApprovedRootCertificates) ProtoMessage()    {}
func (*ApprovedRootCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba0e460850872043, []int{0}
}
func (m *ApprovedRootCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovedRootCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovedRootCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovedRootCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovedRootCertificates.Merge(m, src)
}
func (m *ApprovedRootCertificates) XXX_Size() int {
	return m.Size()
}
func (m *ApprovedRootCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovedRootCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovedRootCertificates proto.InternalMessageInfo

func (m *ApprovedRootCertificates) GetCerts() []*CertificateIdentifier {
	if m != nil {
		return m.Certs
	}
	return nil
}

func init() {
	proto.RegisterType((*ApprovedRootCertificates)(nil), "zigbeealliance.distributedcomplianceledger.pki.ApprovedRootCertificates")
}

func init() {
	proto.RegisterFile("pki/approved_root_certificates.proto", fileDescriptor_ba0e460850872043)
}

var fileDescriptor_ba0e460850872043 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xcf, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xf1, 0x44, 0x08, 0x86, 0xb0, 0x75, 0xaa, 0x18, 0xac, 0x0a, 0x31, 0xb0, 0xc4, 0x96,
	0xe0, 0x09, 0xb8, 0x0d, 0xac, 0x1d, 0x41, 0x22, 0x8a, 0xed, 0x43, 0x38, 0x6a, 0xda, 0x63, 0xd9,
	0xa7, 0xdc, 0x9e, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0xc6, 0x5c, 0xbc, 0x76,
	0xb4, 0x2d, 0xff, 0x7f, 0xfa, 0xaa, 0x23, 0xb7, 0x40, 0xd5, 0x3a, 0xe7, 0xe9, 0x11, 0x6c, 0xe3,
	0x89, 0xb8, 0x31, 0xe0, 0x19, 0xef, 0xd1, 0xb4, 0x0c, 0x41, 0x3a, 0x4f, 0x4c, 0x13, 0xf9, 0x8a,
	0x9d, 0x06, 0x68, 0xfb, 0x1e, 0xdb, 0x95, 0x01, 0x69, 0x31, 0xb0, 0x47, 0xbd, 0x66, 0xb0, 0x86,
	0x96, 0x2e, 0xdd, 0xf6, 0x60, 0x3b, 0xf0, 0xd2, 0x2d, 0xf0, 0x60, 0x16, 0xab, 0x59, 0xa7, 0x41,
	0x0b, 0xab, 0x78, 0x88, 0xef, 0xb1, 0x78, 0xf8, 0x54, 0x4d, 0xcf, 0x7e, 0xd4, 0x39, 0x11, 0x5f,
	0x64, 0xe6, 0xe4, 0xb6, 0xda, 0x8d, 0x7f, 0xc3, 0xb4, 0x9c, 0xed, 0x1c, 0xef, 0x9f, 0x5c, 0x6d,
	0xa9, 0xcb, 0x2c, 0x76, 0xfd, 0xe7, 0xce, 0x53, 0xf3, 0xfc, 0xee, 0x7d, 0x10, 0xe5, 0x66, 0x10,
	0xe5, 0xe7, 0x20, 0xca, 0xb7, 0x51, 0x14, 0x9b, 0x51, 0x14, 0x1f, 0xa3, 0x28, 0x6e, 0x2e, 0x3b,
	0xe4, 0x87, 0xb5, 0x96, 0x86, 0x96, 0x2a, 0x89, 0xf5, 0x2f, 0xa9, 0x32, 0xb2, 0xfe, 0x37, 0xeb,
	0x84, 0xaa, 0x67, 0x15, 0xf7, 0xf2, 0x8b, 0x83, 0xa0, 0xf7, 0xbe, 0xf7, 0x9d, 0x7e, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x24, 0xbc, 0x4b, 0x25, 0x59, 0x01, 0x00, 0x00,
}

func (m *ApprovedRootCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovedRootCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovedRootCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApprovedRootCertificates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApprovedRootCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovApprovedRootCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApprovedRootCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovApprovedRootCertificates(uint64(l))
		}
	}
	return n
}

func sovApprovedRootCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApprovedRootCertificates(x uint64) (n int) {
	return sovApprovedRootCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApprovedRootCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApprovedRootCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovedRootCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovedRootCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovedRootCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApprovedRootCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApprovedRootCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &CertificateIdentifier{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApprovedRootCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApprovedRootCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApprovedRootCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApprovedRootCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovedRootCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovedRootCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApprovedRootCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApprovedRootCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApprovedRootCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApprovedRootCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApprovedRootCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApprovedRootCertificates = fmt.Errorf("proto: unexpected end of group")
)
