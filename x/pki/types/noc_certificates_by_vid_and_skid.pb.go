// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/noc_certificates_by_vid_and_skid.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NocCertificatesByVidAndSkid struct {
	Vid           int32          `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty" validate:"gte=1,lte=65535"`
	SubjectKeyId  string         `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
	Certs         []*Certificate `protobuf:"bytes,3,rep,name=certs,proto3" json:"certs,omitempty"`
	Tq            float32        `protobuf:"fixed32,4,opt,name=tq,proto3" json:"tq,omitempty"`
	SchemaVersion uint32         `protobuf:"varint,5,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *NocCertificatesByVidAndSkid) Reset()         { *m = NocCertificatesByVidAndSkid{} }
func (m *NocCertificatesByVidAndSkid) String() string { return proto.CompactTextString(m) }
func (*NocCertificatesByVidAndSkid) ProtoMessage()    {}
func (*NocCertificatesByVidAndSkid) Descriptor() ([]byte, []int) {
	return fileDescriptor_464c9454e8b60e07, []int{0}
}
func (m *NocCertificatesByVidAndSkid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NocCertificatesByVidAndSkid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NocCertificatesByVidAndSkid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NocCertificatesByVidAndSkid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NocCertificatesByVidAndSkid.Merge(m, src)
}
func (m *NocCertificatesByVidAndSkid) XXX_Size() int {
	return m.Size()
}
func (m *NocCertificatesByVidAndSkid) XXX_DiscardUnknown() {
	xxx_messageInfo_NocCertificatesByVidAndSkid.DiscardUnknown(m)
}

var xxx_messageInfo_NocCertificatesByVidAndSkid proto.InternalMessageInfo

func (m *NocCertificatesByVidAndSkid) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *NocCertificatesByVidAndSkid) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *NocCertificatesByVidAndSkid) GetCerts() []*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *NocCertificatesByVidAndSkid) GetTq() float32 {
	if m != nil {
		return m.Tq
	}
	return 0
}

func (m *NocCertificatesByVidAndSkid) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*NocCertificatesByVidAndSkid)(nil), "zigbeealliance.distributedcomplianceledger.pki.NocCertificatesByVidAndSkid")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/noc_certificates_by_vid_and_skid.proto", fileDescriptor_464c9454e8b60e07)
}

var fileDescriptor_464c9454e8b60e07 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x41, 0x4b, 0xe3, 0x40,
	0x18, 0x86, 0x3b, 0xe9, 0x76, 0x61, 0xb3, 0xdb, 0x3d, 0x84, 0x3d, 0x84, 0x2e, 0x64, 0x43, 0xd8,
	0x43, 0x0e, 0x36, 0x51, 0x4b, 0x3d, 0x28, 0x05, 0xad, 0x5e, 0x44, 0x10, 0x8c, 0xd8, 0x83, 0x07,
	0x43, 0x32, 0xf3, 0x99, 0x7e, 0x26, 0xcd, 0xa4, 0x99, 0x69, 0x31, 0xfe, 0x0a, 0x7f, 0x96, 0xc7,
	0x1e, 0x3d, 0x89, 0xb4, 0xff, 0xc0, 0xb3, 0x07, 0x69, 0x23, 0xd8, 0x82, 0x08, 0xbd, 0x0d, 0x2f,
	0xf3, 0x3d, 0x3c, 0x3c, 0xea, 0xc5, 0x1d, 0x46, 0x21, 0x40, 0x90, 0x24, 0x18, 0xa4, 0x14, 0x5c,
	0x86, 0x42, 0xe6, 0x18, 0x8e, 0x24, 0x30, 0xca, 0x07, 0x59, 0xb9, 0x26, 0xc0, 0x22, 0xc8, 0xdd,
	0x2c, 0x46, 0x37, 0xe5, 0xd4, 0xa7, 0x90, 0x4b, 0xbc, 0x46, 0x1a, 0x48, 0x10, 0x7e, 0x58, 0xf8,
	0x63, 0x64, 0x7e, 0x90, 0x32, 0x5f, 0xc4, 0xc8, 0x9c, 0x2c, 0xe7, 0x92, 0x6b, 0xce, 0x2a, 0xd6,
	0xf9, 0x02, 0xeb, 0x64, 0x31, 0x36, 0xfe, 0x44, 0x3c, 0xe2, 0x8b, 0x53, 0x77, 0xfe, 0x2a, 0x29,
	0x8d, 0xfd, 0x35, 0xe5, 0x96, 0xc4, 0x4a, 0x82, 0xf5, 0x4a, 0xd4, 0xbf, 0xa7, 0x9c, 0x1e, 0x2e,
	0x19, 0x77, 0x8b, 0x1e, 0xb2, 0x83, 0x94, 0x9d, 0xc7, 0xc8, 0xb4, 0x4d, 0xb5, 0x3a, 0x46, 0xa6,
	0x13, 0x93, 0xd8, 0xb5, 0xae, 0xf1, 0xf2, 0xf4, 0xaf, 0x31, 0x0e, 0x12, 0x64, 0x81, 0x84, 0x5d,
	0x2b, 0x92, 0xd0, 0xd9, 0xda, 0x48, 0x24, 0x74, 0x76, 0xda, 0xed, 0x56, 0xdb, 0xf2, 0xe6, 0x5f,
	0x35, 0x4b, 0xfd, 0x25, 0x46, 0xe1, 0x0d, 0x50, 0x79, 0x02, 0xc5, 0x31, 0xd3, 0x15, 0x93, 0xd8,
	0x3f, 0xbc, 0x95, 0x4d, 0x3b, 0x53, 0x6b, 0x73, 0x15, 0xa1, 0x57, 0xcd, 0xaa, 0xfd, 0x73, 0x7b,
	0x6f, 0xcd, 0x1a, 0xce, 0x92, 0xae, 0x57, 0x92, 0xb4, 0xdf, 0xaa, 0x22, 0x87, 0xfa, 0x37, 0x93,
	0xd8, 0x8a, 0xa7, 0xc8, 0xa1, 0xf6, 0x5f, 0xad, 0x0b, 0xda, 0x87, 0x41, 0xd0, 0x83, 0x5c, 0x20,
	0x4f, 0xf5, 0x9a, 0x49, 0xec, 0xba, 0xb7, 0x3a, 0x76, 0xaf, 0x1e, 0xa6, 0x06, 0x99, 0x4c, 0x0d,
	0xf2, 0x3c, 0x35, 0xc8, 0xfd, 0xcc, 0xa8, 0x4c, 0x66, 0x46, 0xe5, 0x71, 0x66, 0x54, 0x2e, 0x8f,
	0x22, 0x94, 0xfd, 0x51, 0xe8, 0x50, 0x3e, 0x70, 0x4b, 0xbb, 0xe6, 0x67, 0x99, 0x9b, 0x1f, 0x7e,
	0xcd, 0xf7, 0xd0, 0xb7, 0x8b, 0xd4, 0xb2, 0xc8, 0x40, 0x84, 0xdf, 0x17, 0x95, 0x5b, 0x6f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd8, 0xe2, 0x85, 0x0e, 0x46, 0x02, 0x00, 0x00,
}

func (m *NocCertificatesByVidAndSkid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NocCertificatesByVidAndSkid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NocCertificatesByVidAndSkid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintNocCertificatesByVidAndSkid(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.Tq != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tq))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNocCertificatesByVidAndSkid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintNocCertificatesByVidAndSkid(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Vid != 0 {
		i = encodeVarintNocCertificatesByVidAndSkid(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNocCertificatesByVidAndSkid(dAtA []byte, offset int, v uint64) int {
	offset -= sovNocCertificatesByVidAndSkid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NocCertificatesByVidAndSkid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovNocCertificatesByVidAndSkid(uint64(m.Vid))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovNocCertificatesByVidAndSkid(uint64(l))
	}
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovNocCertificatesByVidAndSkid(uint64(l))
		}
	}
	if m.Tq != 0 {
		n += 5
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovNocCertificatesByVidAndSkid(uint64(m.SchemaVersion))
	}
	return n
}

func sovNocCertificatesByVidAndSkid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNocCertificatesByVidAndSkid(x uint64) (n int) {
	return sovNocCertificatesByVidAndSkid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NocCertificatesByVidAndSkid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNocCertificatesByVidAndSkid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NocCertificatesByVidAndSkid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NocCertificatesByVidAndSkid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &Certificate{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tq", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tq = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNocCertificatesByVidAndSkid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNocCertificatesByVidAndSkid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNocCertificatesByVidAndSkid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNocCertificatesByVidAndSkid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNocCertificatesByVidAndSkid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNocCertificatesByVidAndSkid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNocCertificatesByVidAndSkid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNocCertificatesByVidAndSkid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNocCertificatesByVidAndSkid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNocCertificatesByVidAndSkid = fmt.Errorf("proto: unexpected end of group")
)
