// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/revoked_noc_ica_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RevokedNocIcaCertificates struct {
	Subject       string         `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId  string         `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
	Certs         []*Certificate `protobuf:"bytes,3,rep,name=certs,proto3" json:"certs,omitempty"`
	SchemaVersion uint32         `protobuf:"varint,4,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *RevokedNocIcaCertificates) Reset()         { *m = RevokedNocIcaCertificates{} }
func (m *RevokedNocIcaCertificates) String() string { return proto.CompactTextString(m) }
func (*RevokedNocIcaCertificates) ProtoMessage()    {}
func (*RevokedNocIcaCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d8baf15dcea807e, []int{0}
}
func (m *RevokedNocIcaCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokedNocIcaCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokedNocIcaCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokedNocIcaCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokedNocIcaCertificates.Merge(m, src)
}
func (m *RevokedNocIcaCertificates) XXX_Size() int {
	return m.Size()
}
func (m *RevokedNocIcaCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokedNocIcaCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_RevokedNocIcaCertificates proto.InternalMessageInfo

func (m *RevokedNocIcaCertificates) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *RevokedNocIcaCertificates) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *RevokedNocIcaCertificates) GetCerts() []*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *RevokedNocIcaCertificates) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*RevokedNocIcaCertificates)(nil), "zigbeealliance.distributedcomplianceledger.pki.RevokedNocIcaCertificates")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/revoked_noc_ica_certificates.proto", fileDescriptor_3d8baf15dcea807e)
}

var fileDescriptor_3d8baf15dcea807e = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x3f, 0x4b, 0xfc, 0x30,
	0x1c, 0xc6, 0x2f, 0xbf, 0xfb, 0xa9, 0x18, 0xbd, 0xa5, 0x53, 0x75, 0x08, 0xe5, 0x70, 0xe8, 0xd2,
	0x14, 0x74, 0x74, 0x11, 0x75, 0x39, 0x04, 0xe1, 0x3a, 0x38, 0x38, 0x58, 0xd2, 0xf4, 0x6b, 0x2f,
	0xf6, 0x4f, 0x4a, 0x92, 0x8a, 0xe7, 0xab, 0xf0, 0x65, 0x39, 0x1e, 0x4e, 0x8e, 0xd2, 0xbe, 0x11,
	0xb1, 0x3d, 0xb1, 0x05, 0x11, 0x6e, 0x4b, 0x9e, 0xc0, 0xf3, 0x7c, 0xf2, 0xc1, 0xf3, 0x67, 0x91,
	0x44, 0x00, 0x2c, 0xcb, 0x04, 0x2b, 0x38, 0xf8, 0xb1, 0xd0, 0x46, 0x89, 0xa8, 0x32, 0x10, 0x73,
	0x99, 0x97, 0x5d, 0x9a, 0x41, 0x9c, 0x80, 0xf2, 0xcb, 0x54, 0xf8, 0x0a, 0x1e, 0x65, 0x0a, 0x71,
	0x58, 0x48, 0x1e, 0x0a, 0xce, 0x42, 0x0e, 0xca, 0x88, 0x7b, 0xc1, 0x99, 0x01, 0x4d, 0x4b, 0x25,
	0x8d, 0xb4, 0xe8, 0xb0, 0x92, 0xfe, 0x51, 0x49, 0xcb, 0x54, 0x1c, 0x9e, 0x6d, 0x88, 0xd0, 0x9b,
	0xec, 0x16, 0xa7, 0x6f, 0x08, 0x1f, 0x04, 0x1d, 0xd8, 0xb5, 0xe4, 0x33, 0xce, 0x2e, 0x7a, 0x54,
	0x96, 0x8d, 0x77, 0x74, 0x15, 0x3d, 0x00, 0x37, 0x36, 0x72, 0x90, 0xbb, 0x1b, 0x7c, 0x5f, 0xad,
	0x29, 0xde, 0x5f, 0x1f, 0xaf, 0x60, 0x39, 0x8b, 0xed, 0x7f, 0xed, 0xf3, 0x20, 0xb3, 0xe6, 0x78,
	0xeb, 0x6b, 0x50, 0xdb, 0x63, 0x67, 0xec, 0xee, 0x1d, 0x9f, 0x6e, 0xf8, 0x3b, 0xda, 0x43, 0x09,
	0xba, 0x26, 0xeb, 0x08, 0x4f, 0x34, 0x5f, 0x40, 0xce, 0x6e, 0x40, 0x69, 0x21, 0x0b, 0xfb, 0xbf,
	0x83, 0xdc, 0x49, 0x30, 0x0c, 0xcf, 0xef, 0x5e, 0x6b, 0x82, 0x56, 0x35, 0x41, 0x1f, 0x35, 0x41,
	0x2f, 0x0d, 0x19, 0xad, 0x1a, 0x32, 0x7a, 0x6f, 0xc8, 0xe8, 0xf6, 0x32, 0x11, 0x66, 0x51, 0x45,
	0x94, 0xcb, 0xdc, 0xef, 0x68, 0xbc, 0xdf, 0xe4, 0x79, 0x3f, 0x3c, 0xde, 0x5a, 0xdf, 0x53, 0x2b,
	0xd0, 0x2c, 0x4b, 0xd0, 0xd1, 0x76, 0xeb, 0xee, 0xe4, 0x33, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x5c,
	0x64, 0x75, 0x02, 0x02, 0x00, 0x00,
}

func (m *RevokedNocIcaCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokedNocIcaCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokedNocIcaCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintRevokedNocIcaCertificates(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRevokedNocIcaCertificates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintRevokedNocIcaCertificates(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintRevokedNocIcaCertificates(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRevokedNocIcaCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovRevokedNocIcaCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RevokedNocIcaCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovRevokedNocIcaCertificates(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovRevokedNocIcaCertificates(uint64(l))
	}
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovRevokedNocIcaCertificates(uint64(l))
		}
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovRevokedNocIcaCertificates(uint64(m.SchemaVersion))
	}
	return n
}

func sovRevokedNocIcaCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRevokedNocIcaCertificates(x uint64) (n int) {
	return sovRevokedNocIcaCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RevokedNocIcaCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRevokedNocIcaCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokedNocIcaCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokedNocIcaCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &Certificate{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRevokedNocIcaCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRevokedNocIcaCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRevokedNocIcaCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRevokedNocIcaCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedNocIcaCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRevokedNocIcaCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRevokedNocIcaCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRevokedNocIcaCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRevokedNocIcaCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRevokedNocIcaCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRevokedNocIcaCertificates = fmt.Errorf("proto: unexpected end of group")
)
