// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/pki_revocation_distribution_point.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PKIRevocationDistributionPoint struct {
	Vid                  uint64 `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Label                string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	IssuerSubjectKeyID   string `protobuf:"bytes,3,opt,name=issuerSubjectKeyID,proto3" json:"issuerSubjectKeyID,omitempty"`
	Pid                  uint64 `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	IsPAA                bool   `protobuf:"varint,5,opt,name=isPAA,proto3" json:"isPAA,omitempty"`
	CrlSignerCertificate string `protobuf:"bytes,6,opt,name=crlSignerCertificate,proto3" json:"crlSignerCertificate,omitempty"`
	DataUrl              string `protobuf:"bytes,7,opt,name=dataUrl,proto3" json:"dataUrl,omitempty"`
	DataFileSize         uint64 `protobuf:"varint,8,opt,name=dataFileSize,proto3" json:"dataFileSize,omitempty"`
	DataDigest           string `protobuf:"bytes,9,opt,name=dataDigest,proto3" json:"dataDigest,omitempty"`
	DataDigestType       uint64 `protobuf:"varint,10,opt,name=dataDigestType,proto3" json:"dataDigestType,omitempty"`
	RevocationType       uint64 `protobuf:"varint,11,opt,name=revocationType,proto3" json:"revocationType,omitempty"`
}

func (m *PKIRevocationDistributionPoint) Reset()         { *m = PKIRevocationDistributionPoint{} }
func (m *PKIRevocationDistributionPoint) String() string { return proto.CompactTextString(m) }
func (*PKIRevocationDistributionPoint) ProtoMessage()    {}
func (*PKIRevocationDistributionPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_35504fa19b856908, []int{0}
}
func (m *PKIRevocationDistributionPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PKIRevocationDistributionPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PKIRevocationDistributionPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PKIRevocationDistributionPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PKIRevocationDistributionPoint.Merge(m, src)
}
func (m *PKIRevocationDistributionPoint) XXX_Size() int {
	return m.Size()
}
func (m *PKIRevocationDistributionPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_PKIRevocationDistributionPoint.DiscardUnknown(m)
}

var xxx_messageInfo_PKIRevocationDistributionPoint proto.InternalMessageInfo

func (m *PKIRevocationDistributionPoint) GetVid() uint64 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *PKIRevocationDistributionPoint) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PKIRevocationDistributionPoint) GetIssuerSubjectKeyID() string {
	if m != nil {
		return m.IssuerSubjectKeyID
	}
	return ""
}

func (m *PKIRevocationDistributionPoint) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *PKIRevocationDistributionPoint) GetIsPAA() bool {
	if m != nil {
		return m.IsPAA
	}
	return false
}

func (m *PKIRevocationDistributionPoint) GetCrlSignerCertificate() string {
	if m != nil {
		return m.CrlSignerCertificate
	}
	return ""
}

func (m *PKIRevocationDistributionPoint) GetDataUrl() string {
	if m != nil {
		return m.DataUrl
	}
	return ""
}

func (m *PKIRevocationDistributionPoint) GetDataFileSize() uint64 {
	if m != nil {
		return m.DataFileSize
	}
	return 0
}

func (m *PKIRevocationDistributionPoint) GetDataDigest() string {
	if m != nil {
		return m.DataDigest
	}
	return ""
}

func (m *PKIRevocationDistributionPoint) GetDataDigestType() uint64 {
	if m != nil {
		return m.DataDigestType
	}
	return 0
}

func (m *PKIRevocationDistributionPoint) GetRevocationType() uint64 {
	if m != nil {
		return m.RevocationType
	}
	return 0
}

func init() {
	proto.RegisterType((*PKIRevocationDistributionPoint)(nil), "zigbeealliance.distributedcomplianceledger.pki.PKIRevocationDistributionPoint")
}

func init() {
	proto.RegisterFile("pki/pki_revocation_distribution_point.proto", fileDescriptor_35504fa19b856908)
}

var fileDescriptor_35504fa19b856908 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x8a, 0xdb, 0x40,
	0x14, 0x85, 0xad, 0xf8, 0x7f, 0x12, 0x42, 0x18, 0x5c, 0x4c, 0x35, 0x18, 0x17, 0xc1, 0x10, 0x2c,
	0x41, 0xf2, 0x04, 0x4e, 0x44, 0xc0, 0xb8, 0x31, 0x72, 0xd2, 0xa4, 0x88, 0xd1, 0xcf, 0x8d, 0x72,
	0xd7, 0x63, 0x69, 0x18, 0x8d, 0xcc, 0xda, 0xe5, 0x3e, 0xc1, 0x3e, 0xd6, 0x96, 0x2e, 0xb7, 0x5c,
	0xec, 0x17, 0x59, 0x34, 0x83, 0xff, 0x16, 0x77, 0xf7, 0x9c, 0x7b, 0xf8, 0x6e, 0x71, 0x2e, 0xf9,
	0x22, 0x97, 0xe8, 0xc9, 0x25, 0x2e, 0x14, 0xac, 0xf3, 0x38, 0xd4, 0x98, 0x67, 0x8b, 0x04, 0x0b,
	0xad, 0x30, 0x2a, 0x8d, 0x90, 0x39, 0x66, 0xda, 0x95, 0x2a, 0xd7, 0x39, 0x75, 0xb7, 0x98, 0x46,
	0x00, 0xa1, 0x10, 0x18, 0x66, 0x31, 0xb8, 0xa7, 0x20, 0x24, 0x71, 0xbe, 0x92, 0xd6, 0x15, 0x90,
	0xa4, 0xa0, 0x5c, 0xb9, 0xc4, 0xc1, 0x43, 0x9d, 0xf0, 0xd9, 0x74, 0x12, 0x9c, 0xd0, 0xfe, 0x05,
	0x79, 0x56, 0x81, 0xe9, 0x27, 0x52, 0x5f, 0x63, 0xc2, 0x9c, 0xbe, 0x33, 0x6c, 0x04, 0xd5, 0x48,
	0x7b, 0xa4, 0x29, 0xc2, 0x08, 0x04, 0x7b, 0xd7, 0x77, 0x86, 0xdd, 0xc0, 0x0a, 0xea, 0x12, 0x8a,
	0x45, 0x51, 0x82, 0x9a, 0x97, 0xd1, 0x1d, 0xc4, 0x7a, 0x0a, 0x9b, 0x89, 0xcf, 0xea, 0x26, 0x72,
	0x63, 0x53, 0x71, 0x25, 0x26, 0xac, 0x61, 0xb9, 0xd2, 0x72, 0xb1, 0x98, 0x8d, 0xc7, 0xac, 0xd9,
	0x77, 0x86, 0x9d, 0xc0, 0x0a, 0xfa, 0x95, 0xf4, 0x62, 0x25, 0xe6, 0x98, 0x66, 0xa0, 0x7e, 0x80,
	0xd2, 0xf8, 0x0f, 0xe3, 0x50, 0x03, 0x6b, 0x19, 0xf2, 0xcd, 0x1d, 0x65, 0xa4, 0x9d, 0x84, 0x3a,
	0xfc, 0xad, 0x04, 0x6b, 0x9b, 0xd8, 0x51, 0xd2, 0x01, 0xf9, 0x50, 0x8d, 0x3f, 0x51, 0xc0, 0x1c,
	0xb7, 0xc0, 0x3a, 0xe6, 0xfc, 0x95, 0x47, 0x39, 0x21, 0x95, 0xf6, 0x31, 0x85, 0x42, 0xb3, 0xae,
	0x01, 0x5c, 0x38, 0xf4, 0x33, 0xf9, 0x78, 0x56, 0xbf, 0x36, 0x12, 0x18, 0x31, 0x94, 0x37, 0x6e,
	0x95, 0x3b, 0x77, 0x66, 0x72, 0xef, 0x6d, 0xee, 0xda, 0xfd, 0xfe, 0xf7, 0x69, 0xcf, 0x9d, 0xdd,
	0x9e, 0x3b, 0x2f, 0x7b, 0xee, 0x3c, 0x1e, 0x78, 0x6d, 0x77, 0xe0, 0xb5, 0xe7, 0x03, 0xaf, 0xfd,
	0xf1, 0x53, 0xd4, 0xff, 0xcb, 0xc8, 0x8d, 0xf3, 0x95, 0x67, 0x9b, 0x1d, 0x1d, 0xab, 0xf5, 0x2e,
	0xaa, 0x1d, 0x9d, 0xbb, 0x1d, 0xd9, 0x72, 0xbd, 0xfb, 0xea, 0x65, 0x3c, 0xbd, 0x91, 0x50, 0x44,
	0x2d, 0xf3, 0x1b, 0xdf, 0x5e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x27, 0x70, 0xa2, 0xe1, 0x4a, 0x02,
	0x00, 0x00,
}

func (m *PKIRevocationDistributionPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PKIRevocationDistributionPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PKIRevocationDistributionPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevocationType != 0 {
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(m.RevocationType))
		i--
		dAtA[i] = 0x58
	}
	if m.DataDigestType != 0 {
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(m.DataDigestType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DataDigest) > 0 {
		i -= len(m.DataDigest)
		copy(dAtA[i:], m.DataDigest)
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(len(m.DataDigest)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DataFileSize != 0 {
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(m.DataFileSize))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DataUrl) > 0 {
		i -= len(m.DataUrl)
		copy(dAtA[i:], m.DataUrl)
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(len(m.DataUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CrlSignerCertificate) > 0 {
		i -= len(m.CrlSignerCertificate)
		copy(dAtA[i:], m.CrlSignerCertificate)
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(len(m.CrlSignerCertificate)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsPAA {
		i--
		if m.IsPAA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Pid != 0 {
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.IssuerSubjectKeyID) > 0 {
		i -= len(m.IssuerSubjectKeyID)
		copy(dAtA[i:], m.IssuerSubjectKeyID)
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(len(m.IssuerSubjectKeyID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if m.Vid != 0 {
		i = encodeVarintPkiRevocationDistributionPoint(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPkiRevocationDistributionPoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovPkiRevocationDistributionPoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PKIRevocationDistributionPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovPkiRevocationDistributionPoint(uint64(m.Vid))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPkiRevocationDistributionPoint(uint64(l))
	}
	l = len(m.IssuerSubjectKeyID)
	if l > 0 {
		n += 1 + l + sovPkiRevocationDistributionPoint(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovPkiRevocationDistributionPoint(uint64(m.Pid))
	}
	if m.IsPAA {
		n += 2
	}
	l = len(m.CrlSignerCertificate)
	if l > 0 {
		n += 1 + l + sovPkiRevocationDistributionPoint(uint64(l))
	}
	l = len(m.DataUrl)
	if l > 0 {
		n += 1 + l + sovPkiRevocationDistributionPoint(uint64(l))
	}
	if m.DataFileSize != 0 {
		n += 1 + sovPkiRevocationDistributionPoint(uint64(m.DataFileSize))
	}
	l = len(m.DataDigest)
	if l > 0 {
		n += 1 + l + sovPkiRevocationDistributionPoint(uint64(l))
	}
	if m.DataDigestType != 0 {
		n += 1 + sovPkiRevocationDistributionPoint(uint64(m.DataDigestType))
	}
	if m.RevocationType != 0 {
		n += 1 + sovPkiRevocationDistributionPoint(uint64(m.RevocationType))
	}
	return n
}

func sovPkiRevocationDistributionPoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPkiRevocationDistributionPoint(x uint64) (n int) {
	return sovPkiRevocationDistributionPoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PKIRevocationDistributionPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPkiRevocationDistributionPoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PKIRevocationDistributionPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PKIRevocationDistributionPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerSubjectKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerSubjectKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPAA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPAA = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrlSignerCertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrlSignerCertificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFileSize", wireType)
			}
			m.DataFileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataFileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDigestType", wireType)
			}
			m.DataDigestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataDigestType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationType", wireType)
			}
			m.RevocationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevocationType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPkiRevocationDistributionPoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPkiRevocationDistributionPoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPkiRevocationDistributionPoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPkiRevocationDistributionPoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPkiRevocationDistributionPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPkiRevocationDistributionPoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPkiRevocationDistributionPoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPkiRevocationDistributionPoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPkiRevocationDistributionPoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPkiRevocationDistributionPoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPkiRevocationDistributionPoint = fmt.Errorf("proto: unexpected end of group")
)
