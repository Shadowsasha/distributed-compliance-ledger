// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/revoked_root_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RevokedRootCertificates struct {
	Certs []*CertificateIdentifier `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (m *RevokedRootCertificates) Reset()         { *m = RevokedRootCertificates{} }
func (m *RevokedRootCertificates) String() string { return proto.CompactTextString(m) }
func (*RevokedRootCertificates) ProtoMessage()    {}
func (*RevokedRootCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_e94861023281b0eb, []int{0}
}
func (m *RevokedRootCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokedRootCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokedRootCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokedRootCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokedRootCertificates.Merge(m, src)
}
func (m *RevokedRootCertificates) XXX_Size() int {
	return m.Size()
}
func (m *RevokedRootCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokedRootCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_RevokedRootCertificates proto.InternalMessageInfo

func (m *RevokedRootCertificates) GetCerts() []*CertificateIdentifier {
	if m != nil {
		return m.Certs
	}
	return nil
}

func init() {
	proto.RegisterType((*RevokedRootCertificates)(nil), "zigbeealliance.distributedcomplianceledger.pki.RevokedRootCertificates")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/revoked_root_certificates.proto", fileDescriptor_e94861023281b0eb)
}

var fileDescriptor_e94861023281b0eb = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xf2, 0xab, 0xca, 0x4c, 0x4f,
	0x4a, 0x4d, 0x4d, 0xcc, 0xc9, 0xc9, 0x4c, 0xcc, 0x4b, 0x4e, 0xd5, 0x4f, 0xc9, 0x2c, 0x2e, 0x29,
	0xca, 0x4c, 0x2a, 0x2d, 0x49, 0x4d, 0x49, 0xce, 0xcf, 0x2d, 0x80, 0x88, 0xe6, 0xa4, 0xa6, 0xa4,
	0xa7, 0x16, 0xe9, 0x17, 0x64, 0x67, 0xea, 0x17, 0xa5, 0x96, 0xe5, 0x67, 0xa7, 0xa6, 0xc4, 0x17,
	0xe5, 0xe7, 0x97, 0xc4, 0x27, 0xa7, 0x16, 0x95, 0x64, 0xa6, 0x65, 0x26, 0x27, 0x96, 0xa4, 0x16,
	0xeb, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xe9, 0xa1, 0x9a, 0xa7, 0x87, 0xc7, 0x3c, 0xbd, 0x82,
	0xec, 0x4c, 0x29, 0x6f, 0x12, 0xed, 0x47, 0xb2, 0x32, 0x3e, 0x33, 0x25, 0x35, 0x0f, 0xc4, 0x01,
	0x19, 0x05, 0xb2, 0x5c, 0xa9, 0x8c, 0x4b, 0x3c, 0x08, 0xe2, 0xbe, 0xa0, 0xfc, 0xfc, 0x12, 0x67,
	0x24, 0xd7, 0x09, 0x45, 0x73, 0xb1, 0x82, 0xb4, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b,
	0xb9, 0x92, 0xe8, 0x4e, 0x3d, 0x24, 0xc3, 0x3c, 0xe1, 0xd6, 0x06, 0x41, 0xcc, 0x74, 0x8a, 0x3b,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x97, 0xf4, 0xcc, 0x92, 0x8c, 0xd2,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0x8d, 0xba, 0xd8, 0xbc, 0xaa, 0x8b, 0xb0, 0x53, 0x17,
	0xea, 0xd9, 0x0a, 0xb0, 0x77, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xde, 0x33, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x13, 0xab, 0x09, 0x2e, 0xad, 0x01, 0x00, 0x00,
}

func (m *RevokedRootCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokedRootCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokedRootCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRevokedRootCertificates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRevokedRootCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovRevokedRootCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RevokedRootCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovRevokedRootCertificates(uint64(l))
		}
	}
	return n
}

func sovRevokedRootCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRevokedRootCertificates(x uint64) (n int) {
	return sovRevokedRootCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RevokedRootCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRevokedRootCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokedRootCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokedRootCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRevokedRootCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRevokedRootCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRevokedRootCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &CertificateIdentifier{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRevokedRootCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRevokedRootCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRevokedRootCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRevokedRootCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedRootCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRevokedRootCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRevokedRootCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRevokedRootCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRevokedRootCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRevokedRootCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRevokedRootCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRevokedRootCertificates = fmt.Errorf("proto: unexpected end of group")
)
