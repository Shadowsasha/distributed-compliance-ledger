// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/child_certificates.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChildCertificates struct {
	Issuer         string                   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorityKeyId string                   `protobuf:"bytes,2,opt,name=authorityKeyId,proto3" json:"authorityKeyId,omitempty"`
	CertIds        []*CertificateIdentifier `protobuf:"bytes,3,rep,name=certIds,proto3" json:"certIds,omitempty"`
	SchemaVersion  uint32                   `protobuf:"varint,4,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *ChildCertificates) Reset()         { *m = ChildCertificates{} }
func (m *ChildCertificates) String() string { return proto.CompactTextString(m) }
func (*ChildCertificates) ProtoMessage()    {}
func (*ChildCertificates) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda1dafd82862476, []int{0}
}
func (m *ChildCertificates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildCertificates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildCertificates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildCertificates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildCertificates.Merge(m, src)
}
func (m *ChildCertificates) XXX_Size() int {
	return m.Size()
}
func (m *ChildCertificates) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildCertificates.DiscardUnknown(m)
}

var xxx_messageInfo_ChildCertificates proto.InternalMessageInfo

func (m *ChildCertificates) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *ChildCertificates) GetAuthorityKeyId() string {
	if m != nil {
		return m.AuthorityKeyId
	}
	return ""
}

func (m *ChildCertificates) GetCertIds() []*CertificateIdentifier {
	if m != nil {
		return m.CertIds
	}
	return nil
}

func (m *ChildCertificates) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*ChildCertificates)(nil), "zigbeealliance.distributedcomplianceledger.pki.ChildCertificates")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/child_certificates.proto", fileDescriptor_cda1dafd82862476)
}

var fileDescriptor_cda1dafd82862476 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x7f, 0x7f, 0x2a, 0x8e, 0x54, 0x30, 0x0b, 0x09, 0x2e, 0x86, 0x22, 0x22, 0xdd,
	0x74, 0x02, 0xfa, 0x06, 0x56, 0x91, 0xd2, 0x5d, 0x17, 0x2e, 0x5c, 0x18, 0x92, 0x99, 0x6b, 0x72,
	0x69, 0x92, 0x09, 0x33, 0x13, 0x30, 0x3e, 0x85, 0x8f, 0xe5, 0xb2, 0x4b, 0x71, 0x25, 0xc9, 0x8b,
	0x48, 0xd2, 0x6a, 0x5b, 0x11, 0xa1, 0xcb, 0x7b, 0x06, 0xce, 0xf9, 0xe6, 0xa3, 0xb7, 0xcf, 0x18,
	0x85, 0x00, 0x41, 0x92, 0x60, 0x90, 0x09, 0xf0, 0x24, 0x1a, 0xab, 0x31, 0x2c, 0x2c, 0x48, 0xa1,
	0xd2, 0x7c, 0x99, 0x26, 0x20, 0x23, 0xd0, 0x5e, 0x3e, 0x47, 0x4f, 0xc4, 0x98, 0x48, 0x5f, 0x80,
	0xb6, 0xf8, 0x88, 0x22, 0xb0, 0x60, 0x78, 0xae, 0x95, 0x55, 0x0e, 0xdf, 0x2e, 0xe2, 0x7f, 0x14,
	0xf1, 0x7c, 0x8e, 0x27, 0xd3, 0x5d, 0x87, 0xd7, 0x93, 0x3e, 0x4a, 0xc8, 0x9a, 0xa3, 0xa9, 0x6a,
	0xc6, 0x4f, 0xdf, 0x09, 0x3d, 0x1a, 0x37, 0x64, 0xe3, 0x0d, 0x30, 0xe7, 0x98, 0xf6, 0xd0, 0x98,
	0x02, 0xb4, 0x4b, 0x06, 0x64, 0xb8, 0x3f, 0x5b, 0x5d, 0xce, 0x39, 0x3d, 0x0c, 0x0a, 0x1b, 0x2b,
	0x8d, 0xb6, 0x9c, 0x42, 0x39, 0x91, 0xee, 0xbf, 0xf6, 0xfd, 0x47, 0xea, 0xf8, 0x74, 0xaf, 0x59,
	0x9d, 0x48, 0xe3, 0x76, 0x07, 0xdd, 0xe1, 0xc1, 0xc5, 0xcd, 0x8e, 0x9f, 0xe4, 0x1b, 0x38, 0x93,
	0x6f, 0xe6, 0xd9, 0x57, 0xab, 0x73, 0x46, 0xfb, 0x46, 0xc4, 0x90, 0x06, 0x77, 0xa0, 0x0d, 0xaa,
	0xcc, 0xfd, 0x3f, 0x20, 0xc3, 0xfe, 0x6c, 0x3b, 0xbc, 0x7a, 0x78, 0xad, 0x18, 0x59, 0x54, 0x8c,
	0x7c, 0x54, 0x8c, 0xbc, 0xd4, 0xac, 0xb3, 0xa8, 0x59, 0xe7, 0xad, 0x66, 0x9d, 0xfb, 0xeb, 0x08,
	0x6d, 0x5c, 0x84, 0x5c, 0xa8, 0xd4, 0x5b, 0x92, 0x8d, 0x7e, 0xf3, 0x39, 0x5a, 0xb3, 0x8d, 0x56,
	0x46, 0x9f, 0x5a, 0xa7, 0xb6, 0xcc, 0xc1, 0x84, 0xbd, 0xd6, 0xe1, 0xe5, 0x67, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0xff, 0x10, 0x22, 0x0b, 0x02, 0x00, 0x00,
}

func (m *ChildCertificates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildCertificates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildCertificates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintChildCertificates(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CertIds) > 0 {
		for iNdEx := len(m.CertIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChildCertificates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuthorityKeyId) > 0 {
		i -= len(m.AuthorityKeyId)
		copy(dAtA[i:], m.AuthorityKeyId)
		i = encodeVarintChildCertificates(dAtA, i, uint64(len(m.AuthorityKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintChildCertificates(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChildCertificates(dAtA []byte, offset int, v uint64) int {
	offset -= sovChildCertificates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChildCertificates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovChildCertificates(uint64(l))
	}
	l = len(m.AuthorityKeyId)
	if l > 0 {
		n += 1 + l + sovChildCertificates(uint64(l))
	}
	if len(m.CertIds) > 0 {
		for _, e := range m.CertIds {
			l = e.Size()
			n += 1 + l + sovChildCertificates(uint64(l))
		}
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovChildCertificates(uint64(m.SchemaVersion))
	}
	return n
}

func sovChildCertificates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChildCertificates(x uint64) (n int) {
	return sovChildCertificates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChildCertificates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChildCertificates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildCertificates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildCertificates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChildCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChildCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChildCertificates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChildCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChildCertificates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChildCertificates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertIds = append(m.CertIds, &CertificateIdentifier{})
			if err := m.CertIds[len(m.CertIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChildCertificates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChildCertificates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChildCertificates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChildCertificates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChildCertificates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChildCertificates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChildCertificates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChildCertificates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChildCertificates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChildCertificates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChildCertificates = fmt.Errorf("proto: unexpected end of group")
)
