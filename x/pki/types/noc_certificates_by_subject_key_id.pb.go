// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/noc_certificates_by_subject_key_id.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NocCertificatesBySubjectKeyId struct {
	SubjectKeyId  string         `protobuf:"bytes,1,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
	Certs         []*Certificate `protobuf:"bytes,2,rep,name=certs,proto3" json:"certs,omitempty"`
	Tq            float32        `protobuf:"fixed32,3,opt,name=tq,proto3" json:"tq,omitempty"`
	SchemaVersion uint32         `protobuf:"varint,4,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *NocCertificatesBySubjectKeyId) Reset()         { *m = NocCertificatesBySubjectKeyId{} }
func (m *NocCertificatesBySubjectKeyId) String() string { return proto.CompactTextString(m) }
func (*NocCertificatesBySubjectKeyId) ProtoMessage()    {}
func (*NocCertificatesBySubjectKeyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddfbe52eed1184ea, []int{0}
}
func (m *NocCertificatesBySubjectKeyId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NocCertificatesBySubjectKeyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NocCertificatesBySubjectKeyId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NocCertificatesBySubjectKeyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NocCertificatesBySubjectKeyId.Merge(m, src)
}
func (m *NocCertificatesBySubjectKeyId) XXX_Size() int {
	return m.Size()
}
func (m *NocCertificatesBySubjectKeyId) XXX_DiscardUnknown() {
	xxx_messageInfo_NocCertificatesBySubjectKeyId.DiscardUnknown(m)
}

var xxx_messageInfo_NocCertificatesBySubjectKeyId proto.InternalMessageInfo

func (m *NocCertificatesBySubjectKeyId) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *NocCertificatesBySubjectKeyId) GetCerts() []*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *NocCertificatesBySubjectKeyId) GetTq() float32 {
	if m != nil {
		return m.Tq
	}
	return 0
}

func (m *NocCertificatesBySubjectKeyId) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*NocCertificatesBySubjectKeyId)(nil), "zigbeealliance.distributedcomplianceledger.pki.NocCertificatesBySubjectKeyId")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/noc_certificates_by_subject_key_id.proto", fileDescriptor_ddfbe52eed1184ea)
}

var fileDescriptor_ddfbe52eed1184ea = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0x87, 0x2f, 0x3d, 0x15, 0x8c, 0x9e, 0x43, 0xa7, 0x22, 0x18, 0xca, 0xe1, 0xd0, 0xa5, 0x29,
	0xe8, 0xe8, 0x22, 0xa7, 0x8b, 0x08, 0x82, 0x15, 0x14, 0x1c, 0x2c, 0x4d, 0xfa, 0xda, 0x8b, 0xfd,
	0x93, 0x5e, 0x93, 0x82, 0xf5, 0x53, 0xf8, 0xb1, 0x1c, 0x1c, 0x6e, 0x74, 0x94, 0xf6, 0x8b, 0x88,
	0x57, 0xc1, 0x16, 0x44, 0xb8, 0x31, 0xbf, 0xe1, 0x79, 0x9f, 0x3c, 0xf8, 0xee, 0x45, 0xc4, 0x0c,
	0x20, 0x4c, 0x53, 0x11, 0xe6, 0x1c, 0xbc, 0x48, 0x28, 0x5d, 0x0a, 0x56, 0x69, 0x88, 0xb8, 0xcc,
	0x8a, 0x6e, 0x4d, 0x21, 0x8a, 0xa1, 0xf4, 0x8a, 0x44, 0x78, 0xb9, 0xe4, 0x01, 0x87, 0x52, 0x8b,
	0x47, 0xc1, 0x43, 0x0d, 0x2a, 0x60, 0x75, 0xa0, 0x2a, 0xf6, 0x04, 0x5c, 0x07, 0x09, 0xd4, 0x81,
	0x88, 0x68, 0x51, 0x4a, 0x2d, 0x4d, 0x3a, 0x04, 0xd3, 0x7f, 0xc0, 0xb4, 0x48, 0xc4, 0xfe, 0xe9,
	0x9a, 0x22, 0x3d, 0x89, 0xee, 0xe2, 0xf4, 0x1d, 0xe1, 0x83, 0x2b, 0xc9, 0xcf, 0x7a, 0x76, 0xb3,
	0xfa, 0xa6, 0x73, 0xbb, 0x84, 0xfa, 0x22, 0x32, 0xa7, 0x78, 0x57, 0xf5, 0xde, 0x16, 0xb2, 0x91,
	0xb3, 0xed, 0x0f, 0x36, 0xf3, 0x1a, 0x6f, 0x7e, 0xa3, 0x95, 0x65, 0xd8, 0x63, 0x67, 0xe7, 0xe8,
	0x64, 0xcd, 0x7f, 0xd0, 0xde, 0x79, 0xbf, 0x23, 0x99, 0x7b, 0xd8, 0xd0, 0x0b, 0x6b, 0x6c, 0x23,
	0xc7, 0xf0, 0x0d, 0xbd, 0x30, 0x0f, 0xf1, 0x44, 0xf1, 0x39, 0x64, 0xe1, 0x2d, 0x94, 0x4a, 0xc8,
	0xdc, 0xda, 0xb0, 0x91, 0x33, 0xf1, 0x87, 0xe3, 0xec, 0xe1, 0xad, 0x21, 0x68, 0xd9, 0x10, 0xf4,
	0xd9, 0x10, 0xf4, 0xda, 0x92, 0xd1, 0xb2, 0x25, 0xa3, 0x8f, 0x96, 0x8c, 0xee, 0xcf, 0x63, 0xa1,
	0xe7, 0x15, 0xa3, 0x5c, 0x66, 0x5e, 0x67, 0xe7, 0xfe, 0x95, 0xcd, 0xfd, 0xf5, 0x73, 0x7f, 0xc2,
	0x3d, 0xaf, 0xd2, 0xe9, 0xba, 0x00, 0xc5, 0xb6, 0x56, 0xd5, 0x8e, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x72, 0xed, 0x5c, 0x02, 0x02, 0x00, 0x00,
}

func (m *NocCertificatesBySubjectKeyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NocCertificatesBySubjectKeyId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NocCertificatesBySubjectKeyId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintNocCertificatesBySubjectKeyId(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Tq != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tq))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNocCertificatesBySubjectKeyId(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintNocCertificatesBySubjectKeyId(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNocCertificatesBySubjectKeyId(dAtA []byte, offset int, v uint64) int {
	offset -= sovNocCertificatesBySubjectKeyId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NocCertificatesBySubjectKeyId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovNocCertificatesBySubjectKeyId(uint64(l))
	}
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovNocCertificatesBySubjectKeyId(uint64(l))
		}
	}
	if m.Tq != 0 {
		n += 5
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovNocCertificatesBySubjectKeyId(uint64(m.SchemaVersion))
	}
	return n
}

func sovNocCertificatesBySubjectKeyId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNocCertificatesBySubjectKeyId(x uint64) (n int) {
	return sovNocCertificatesBySubjectKeyId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NocCertificatesBySubjectKeyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNocCertificatesBySubjectKeyId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NocCertificatesBySubjectKeyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NocCertificatesBySubjectKeyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &Certificate{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tq", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tq = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNocCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNocCertificatesBySubjectKeyId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNocCertificatesBySubjectKeyId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNocCertificatesBySubjectKeyId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNocCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNocCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNocCertificatesBySubjectKeyId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNocCertificatesBySubjectKeyId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNocCertificatesBySubjectKeyId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNocCertificatesBySubjectKeyId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNocCertificatesBySubjectKeyId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNocCertificatesBySubjectKeyId = fmt.Errorf("proto: unexpected end of group")
)
