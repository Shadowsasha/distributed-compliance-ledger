// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/pki/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificatesRequest) Reset()         { *m = QueryAllCertificatesRequest{} }
func (m *QueryAllCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificatesRequest) ProtoMessage()    {}
func (*QueryAllCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{0}
}
func (m *QueryAllCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificatesRequest.Merge(m, src)
}
func (m *QueryAllCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCertificatesResponse struct {
	Certificates []AllCertificates   `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCertificatesResponse) Reset()         { *m = QueryAllCertificatesResponse{} }
func (m *QueryAllCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCertificatesResponse) ProtoMessage()    {}
func (*QueryAllCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{1}
}
func (m *QueryAllCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCertificatesResponse.Merge(m, src)
}
func (m *QueryAllCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllCertificatesResponse) GetCertificates() []AllCertificates {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *QueryAllCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetCertificatesRequest) Reset()         { *m = QueryGetCertificatesRequest{} }
func (m *QueryGetCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificatesRequest) ProtoMessage()    {}
func (*QueryGetCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{2}
}
func (m *QueryGetCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificatesRequest.Merge(m, src)
}
func (m *QueryGetCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetCertificatesResponse struct {
	Certificates AllCertificates `protobuf:"bytes,1,opt,name=certificates,proto3" json:"certificates"`
}

func (m *QueryGetCertificatesResponse) Reset()         { *m = QueryGetCertificatesResponse{} }
func (m *QueryGetCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCertificatesResponse) ProtoMessage()    {}
func (*QueryGetCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{3}
}
func (m *QueryGetCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCertificatesResponse.Merge(m, src)
}
func (m *QueryGetCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetCertificatesResponse) GetCertificates() AllCertificates {
	if m != nil {
		return m.Certificates
	}
	return AllCertificates{}
}

type QueryGetApprovedCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetApprovedCertificatesRequest) Reset()         { *m = QueryGetApprovedCertificatesRequest{} }
func (m *QueryGetApprovedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCertificatesRequest) ProtoMessage()    {}
func (*QueryGetApprovedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{4}
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesRequest.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetApprovedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetApprovedCertificatesResponse struct {
	ApprovedCertificates ApprovedCertificates `protobuf:"bytes,1,opt,name=approvedCertificates,proto3" json:"approvedCertificates"`
}

func (m *QueryGetApprovedCertificatesResponse) Reset()         { *m = QueryGetApprovedCertificatesResponse{} }
func (m *QueryGetApprovedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedCertificatesResponse) ProtoMessage()    {}
func (*QueryGetApprovedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{5}
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesResponse.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesResponse) GetApprovedCertificates() ApprovedCertificates {
	if m != nil {
		return m.ApprovedCertificates
	}
	return ApprovedCertificates{}
}

type QueryAllApprovedCertificatesRequest struct {
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SubjectKeyId string             `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryAllApprovedCertificatesRequest) Reset()         { *m = QueryAllApprovedCertificatesRequest{} }
func (m *QueryAllApprovedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCertificatesRequest) ProtoMessage()    {}
func (*QueryAllApprovedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{6}
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCertificatesRequest.Merge(m, src)
}
func (m *QueryAllApprovedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllApprovedCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllApprovedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryAllApprovedCertificatesResponse struct {
	ApprovedCertificates []ApprovedCertificates `protobuf:"bytes,1,rep,name=approvedCertificates,proto3" json:"approvedCertificates"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovedCertificatesResponse) Reset()         { *m = QueryAllApprovedCertificatesResponse{} }
func (m *QueryAllApprovedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovedCertificatesResponse) ProtoMessage()    {}
func (*QueryAllApprovedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{7}
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovedCertificatesResponse.Merge(m, src)
}
func (m *QueryAllApprovedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovedCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllApprovedCertificatesResponse) GetApprovedCertificates() []ApprovedCertificates {
	if m != nil {
		return m.ApprovedCertificates
	}
	return nil
}

func (m *QueryAllApprovedCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProposedCertificateRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetProposedCertificateRequest) Reset()         { *m = QueryGetProposedCertificateRequest{} }
func (m *QueryGetProposedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedCertificateRequest) ProtoMessage()    {}
func (*QueryGetProposedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{8}
}
func (m *QueryGetProposedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRequest.Merge(m, src)
}
func (m *QueryGetProposedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRequest proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetProposedCertificateRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetProposedCertificateResponse struct {
	ProposedCertificate ProposedCertificate `protobuf:"bytes,1,opt,name=proposedCertificate,proto3" json:"proposedCertificate"`
}

func (m *QueryGetProposedCertificateResponse) Reset()         { *m = QueryGetProposedCertificateResponse{} }
func (m *QueryGetProposedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedCertificateResponse) ProtoMessage()    {}
func (*QueryGetProposedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{9}
}
func (m *QueryGetProposedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateResponse.Merge(m, src)
}
func (m *QueryGetProposedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateResponse proto.InternalMessageInfo

func (m *QueryGetProposedCertificateResponse) GetProposedCertificate() ProposedCertificate {
	if m != nil {
		return m.ProposedCertificate
	}
	return ProposedCertificate{}
}

type QueryAllProposedCertificateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRequest) Reset()         { *m = QueryAllProposedCertificateRequest{} }
func (m *QueryAllProposedCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedCertificateRequest) ProtoMessage()    {}
func (*QueryAllProposedCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{10}
}
func (m *QueryAllProposedCertificateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRequest.Merge(m, src)
}
func (m *QueryAllProposedCertificateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRequest proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposedCertificateResponse struct {
	ProposedCertificate []ProposedCertificate `protobuf:"bytes,1,rep,name=proposedCertificate,proto3" json:"proposedCertificate"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateResponse) Reset()         { *m = QueryAllProposedCertificateResponse{} }
func (m *QueryAllProposedCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedCertificateResponse) ProtoMessage()    {}
func (*QueryAllProposedCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{11}
}
func (m *QueryAllProposedCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateResponse.Merge(m, src)
}
func (m *QueryAllProposedCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateResponse proto.InternalMessageInfo

func (m *QueryAllProposedCertificateResponse) GetProposedCertificate() []ProposedCertificate {
	if m != nil {
		return m.ProposedCertificate
	}
	return nil
}

func (m *QueryAllProposedCertificateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChildCertificatesRequest struct {
	Issuer         string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	AuthorityKeyId string `protobuf:"bytes,2,opt,name=authorityKeyId,proto3" json:"authorityKeyId,omitempty"`
}

func (m *QueryGetChildCertificatesRequest) Reset()         { *m = QueryGetChildCertificatesRequest{} }
func (m *QueryGetChildCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChildCertificatesRequest) ProtoMessage()    {}
func (*QueryGetChildCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{12}
}
func (m *QueryGetChildCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChildCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChildCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChildCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChildCertificatesRequest.Merge(m, src)
}
func (m *QueryGetChildCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChildCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChildCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChildCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetChildCertificatesRequest) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *QueryGetChildCertificatesRequest) GetAuthorityKeyId() string {
	if m != nil {
		return m.AuthorityKeyId
	}
	return ""
}

type QueryGetChildCertificatesResponse struct {
	ChildCertificates ChildCertificates `protobuf:"bytes,1,opt,name=childCertificates,proto3" json:"childCertificates"`
}

func (m *QueryGetChildCertificatesResponse) Reset()         { *m = QueryGetChildCertificatesResponse{} }
func (m *QueryGetChildCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChildCertificatesResponse) ProtoMessage()    {}
func (*QueryGetChildCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{13}
}
func (m *QueryGetChildCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChildCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChildCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChildCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChildCertificatesResponse.Merge(m, src)
}
func (m *QueryGetChildCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChildCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChildCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChildCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetChildCertificatesResponse) GetChildCertificates() ChildCertificates {
	if m != nil {
		return m.ChildCertificates
	}
	return ChildCertificates{}
}

type QueryGetProposedCertificateRevocationRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
	SerialNumber string `protobuf:"bytes,3,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
}

func (m *QueryGetProposedCertificateRevocationRequest) Reset() {
	*m = QueryGetProposedCertificateRevocationRequest{}
}
func (m *QueryGetProposedCertificateRevocationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProposedCertificateRevocationRequest) ProtoMessage() {}
func (*QueryGetProposedCertificateRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{14}
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.Merge(m, src)
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRevocationRequest proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRevocationRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetProposedCertificateRevocationRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *QueryGetProposedCertificateRevocationRequest) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

type QueryGetProposedCertificateRevocationResponse struct {
	ProposedCertificateRevocation ProposedCertificateRevocation `protobuf:"bytes,1,opt,name=proposedCertificateRevocation,proto3" json:"proposedCertificateRevocation"`
}

func (m *QueryGetProposedCertificateRevocationResponse) Reset() {
	*m = QueryGetProposedCertificateRevocationResponse{}
}
func (m *QueryGetProposedCertificateRevocationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProposedCertificateRevocationResponse) ProtoMessage() {}
func (*QueryGetProposedCertificateRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{15}
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.Merge(m, src)
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedCertificateRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedCertificateRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedCertificateRevocationResponse proto.InternalMessageInfo

func (m *QueryGetProposedCertificateRevocationResponse) GetProposedCertificateRevocation() ProposedCertificateRevocation {
	if m != nil {
		return m.ProposedCertificateRevocation
	}
	return ProposedCertificateRevocation{}
}

type QueryAllProposedCertificateRevocationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRevocationRequest) Reset() {
	*m = QueryAllProposedCertificateRevocationRequest{}
}
func (m *QueryAllProposedCertificateRevocationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllProposedCertificateRevocationRequest) ProtoMessage() {}
func (*QueryAllProposedCertificateRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{16}
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.Merge(m, src)
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRevocationRequest proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRevocationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposedCertificateRevocationResponse struct {
	ProposedCertificateRevocation []ProposedCertificateRevocation `protobuf:"bytes,1,rep,name=proposedCertificateRevocation,proto3" json:"proposedCertificateRevocation"`
	Pagination                    *query.PageResponse             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedCertificateRevocationResponse) Reset() {
	*m = QueryAllProposedCertificateRevocationResponse{}
}
func (m *QueryAllProposedCertificateRevocationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllProposedCertificateRevocationResponse) ProtoMessage() {}
func (*QueryAllProposedCertificateRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{17}
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.Merge(m, src)
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedCertificateRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedCertificateRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedCertificateRevocationResponse proto.InternalMessageInfo

func (m *QueryAllProposedCertificateRevocationResponse) GetProposedCertificateRevocation() []ProposedCertificateRevocation {
	if m != nil {
		return m.ProposedCertificateRevocation
	}
	return nil
}

func (m *QueryAllProposedCertificateRevocationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRevokedCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRevokedCertificatesRequest) Reset()         { *m = QueryGetRevokedCertificatesRequest{} }
func (m *QueryGetRevokedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{18}
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRevokedCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRevokedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRevokedCertificatesResponse struct {
	RevokedCertificates RevokedCertificates `protobuf:"bytes,1,opt,name=revokedCertificates,proto3" json:"revokedCertificates"`
}

func (m *QueryGetRevokedCertificatesResponse) Reset()         { *m = QueryGetRevokedCertificatesResponse{} }
func (m *QueryGetRevokedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRevokedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{19}
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedCertificatesResponse) GetRevokedCertificates() RevokedCertificates {
	if m != nil {
		return m.RevokedCertificates
	}
	return RevokedCertificates{}
}

type QueryAllRevokedCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedCertificatesRequest) Reset()         { *m = QueryAllRevokedCertificatesRequest{} }
func (m *QueryAllRevokedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedCertificatesRequest) ProtoMessage()    {}
func (*QueryAllRevokedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{20}
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRevokedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRevokedCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokedCertificatesResponse struct {
	RevokedCertificates []RevokedCertificates `protobuf:"bytes,1,rep,name=revokedCertificates,proto3" json:"revokedCertificates"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedCertificatesResponse) Reset()         { *m = QueryAllRevokedCertificatesResponse{} }
func (m *QueryAllRevokedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedCertificatesResponse) ProtoMessage()    {}
func (*QueryAllRevokedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{21}
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRevokedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRevokedCertificatesResponse) GetRevokedCertificates() []RevokedCertificates {
	if m != nil {
		return m.RevokedCertificates
	}
	return nil
}

func (m *QueryAllRevokedCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetApprovedRootCertificatesRequest struct {
}

func (m *QueryGetApprovedRootCertificatesRequest) Reset() {
	*m = QueryGetApprovedRootCertificatesRequest{}
}
func (m *QueryGetApprovedRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedRootCertificatesRequest) ProtoMessage()    {}
func (*QueryGetApprovedRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{22}
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedRootCertificatesRequest proto.InternalMessageInfo

type QueryGetApprovedRootCertificatesResponse struct {
	ApprovedRootCertificates ApprovedRootCertificates `protobuf:"bytes,1,opt,name=approvedRootCertificates,proto3" json:"approvedRootCertificates"`
}

func (m *QueryGetApprovedRootCertificatesResponse) Reset() {
	*m = QueryGetApprovedRootCertificatesResponse{}
}
func (m *QueryGetApprovedRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedRootCertificatesResponse) ProtoMessage()    {}
func (*QueryGetApprovedRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{23}
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetApprovedRootCertificatesResponse) GetApprovedRootCertificates() ApprovedRootCertificates {
	if m != nil {
		return m.ApprovedRootCertificates
	}
	return ApprovedRootCertificates{}
}

type QueryGetRevokedRootCertificatesRequest struct {
}

func (m *QueryGetRevokedRootCertificatesRequest) Reset() {
	*m = QueryGetRevokedRootCertificatesRequest{}
}
func (m *QueryGetRevokedRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedRootCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokedRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{24}
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedRootCertificatesRequest proto.InternalMessageInfo

type QueryGetRevokedRootCertificatesResponse struct {
	RevokedRootCertificates RevokedRootCertificates `protobuf:"bytes,1,opt,name=revokedRootCertificates,proto3" json:"revokedRootCertificates"`
}

func (m *QueryGetRevokedRootCertificatesResponse) Reset() {
	*m = QueryGetRevokedRootCertificatesResponse{}
}
func (m *QueryGetRevokedRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedRootCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRevokedRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{25}
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedRootCertificatesResponse) GetRevokedRootCertificates() RevokedRootCertificates {
	if m != nil {
		return m.RevokedRootCertificates
	}
	return RevokedRootCertificates{}
}

type QueryGetApprovedCertificatesBySubjectRequest struct {
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Reset() {
	*m = QueryGetApprovedCertificatesBySubjectRequest{}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetApprovedCertificatesBySubjectRequest) ProtoMessage() {}
func (*QueryGetApprovedCertificatesBySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{26}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesBySubjectRequest proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesBySubjectRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type QueryGetApprovedCertificatesBySubjectResponse struct {
	ApprovedCertificatesBySubject ApprovedCertificatesBySubject `protobuf:"bytes,1,opt,name=approvedCertificatesBySubject,proto3" json:"approvedCertificatesBySubject"`
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Reset() {
	*m = QueryGetApprovedCertificatesBySubjectResponse{}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetApprovedCertificatesBySubjectResponse) ProtoMessage() {}
func (*QueryGetApprovedCertificatesBySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{27}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.Merge(m, src)
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedCertificatesBySubjectResponse proto.InternalMessageInfo

func (m *QueryGetApprovedCertificatesBySubjectResponse) GetApprovedCertificatesBySubject() ApprovedCertificatesBySubject {
	if m != nil {
		return m.ApprovedCertificatesBySubject
	}
	return ApprovedCertificatesBySubject{}
}

type QueryGetRejectedCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRejectedCertificatesRequest) Reset()         { *m = QueryGetRejectedCertificatesRequest{} }
func (m *QueryGetRejectedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRejectedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{28}
}
func (m *QueryGetRejectedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRejectedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRejectedCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRejectedCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRejectedCertificatesResponse struct {
	RejectedCertificate RejectedCertificate `protobuf:"bytes,1,opt,name=rejectedCertificate,proto3" json:"rejectedCertificate"`
}

func (m *QueryGetRejectedCertificatesResponse) Reset()         { *m = QueryGetRejectedCertificatesResponse{} }
func (m *QueryGetRejectedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedCertificatesResponse) ProtoMessage()    {}
func (*QueryGetRejectedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{29}
}
func (m *QueryGetRejectedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRejectedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRejectedCertificatesResponse) GetRejectedCertificate() RejectedCertificate {
	if m != nil {
		return m.RejectedCertificate
	}
	return RejectedCertificate{}
}

type QueryAllRejectedCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedCertificatesRequest) Reset()         { *m = QueryAllRejectedCertificatesRequest{} }
func (m *QueryAllRejectedCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedCertificatesRequest) ProtoMessage()    {}
func (*QueryAllRejectedCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{30}
}
func (m *QueryAllRejectedCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRejectedCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRejectedCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRejectedCertificatesResponse struct {
	RejectedCertificate []RejectedCertificate `protobuf:"bytes,1,rep,name=rejectedCertificate,proto3" json:"rejectedCertificate"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedCertificatesResponse) Reset()         { *m = QueryAllRejectedCertificatesResponse{} }
func (m *QueryAllRejectedCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedCertificatesResponse) ProtoMessage()    {}
func (*QueryAllRejectedCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{31}
}
func (m *QueryAllRejectedCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRejectedCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRejectedCertificatesResponse) GetRejectedCertificate() []RejectedCertificate {
	if m != nil {
		return m.RejectedCertificate
	}
	return nil
}

func (m *QueryAllRejectedCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPkiRevocationDistributionPointRequest struct {
	Vid                int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Label              string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	IssuerSubjectKeyID string `protobuf:"bytes,3,opt,name=issuerSubjectKeyID,proto3" json:"issuerSubjectKeyID,omitempty"`
}

func (m *QueryGetPkiRevocationDistributionPointRequest) Reset() {
	*m = QueryGetPkiRevocationDistributionPointRequest{}
}
func (m *QueryGetPkiRevocationDistributionPointRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetPkiRevocationDistributionPointRequest) ProtoMessage() {}
func (*QueryGetPkiRevocationDistributionPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{32}
}
func (m *QueryGetPkiRevocationDistributionPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPkiRevocationDistributionPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPkiRevocationDistributionPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPkiRevocationDistributionPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointRequest.Merge(m, src)
}
func (m *QueryGetPkiRevocationDistributionPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPkiRevocationDistributionPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPkiRevocationDistributionPointRequest proto.InternalMessageInfo

func (m *QueryGetPkiRevocationDistributionPointRequest) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *QueryGetPkiRevocationDistributionPointRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *QueryGetPkiRevocationDistributionPointRequest) GetIssuerSubjectKeyID() string {
	if m != nil {
		return m.IssuerSubjectKeyID
	}
	return ""
}

type QueryGetPkiRevocationDistributionPointResponse struct {
	PkiRevocationDistributionPoint PkiRevocationDistributionPoint `protobuf:"bytes,1,opt,name=PkiRevocationDistributionPoint,proto3" json:"PkiRevocationDistributionPoint"`
}

func (m *QueryGetPkiRevocationDistributionPointResponse) Reset() {
	*m = QueryGetPkiRevocationDistributionPointResponse{}
}
func (m *QueryGetPkiRevocationDistributionPointResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetPkiRevocationDistributionPointResponse) ProtoMessage() {}
func (*QueryGetPkiRevocationDistributionPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{33}
}
func (m *QueryGetPkiRevocationDistributionPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPkiRevocationDistributionPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPkiRevocationDistributionPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPkiRevocationDistributionPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointResponse.Merge(m, src)
}
func (m *QueryGetPkiRevocationDistributionPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPkiRevocationDistributionPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPkiRevocationDistributionPointResponse proto.InternalMessageInfo

func (m *QueryGetPkiRevocationDistributionPointResponse) GetPkiRevocationDistributionPoint() PkiRevocationDistributionPoint {
	if m != nil {
		return m.PkiRevocationDistributionPoint
	}
	return PkiRevocationDistributionPoint{}
}

type QueryAllPkiRevocationDistributionPointRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPkiRevocationDistributionPointRequest) Reset() {
	*m = QueryAllPkiRevocationDistributionPointRequest{}
}
func (m *QueryAllPkiRevocationDistributionPointRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllPkiRevocationDistributionPointRequest) ProtoMessage() {}
func (*QueryAllPkiRevocationDistributionPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{34}
}
func (m *QueryAllPkiRevocationDistributionPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPkiRevocationDistributionPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPkiRevocationDistributionPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPkiRevocationDistributionPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPkiRevocationDistributionPointRequest.Merge(m, src)
}
func (m *QueryAllPkiRevocationDistributionPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPkiRevocationDistributionPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPkiRevocationDistributionPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPkiRevocationDistributionPointRequest proto.InternalMessageInfo

func (m *QueryAllPkiRevocationDistributionPointRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPkiRevocationDistributionPointResponse struct {
	PkiRevocationDistributionPoint []PkiRevocationDistributionPoint `protobuf:"bytes,1,rep,name=PkiRevocationDistributionPoint,proto3" json:"PkiRevocationDistributionPoint"`
	Pagination                     *query.PageResponse              `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPkiRevocationDistributionPointResponse) Reset() {
	*m = QueryAllPkiRevocationDistributionPointResponse{}
}
func (m *QueryAllPkiRevocationDistributionPointResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllPkiRevocationDistributionPointResponse) ProtoMessage() {}
func (*QueryAllPkiRevocationDistributionPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{35}
}
func (m *QueryAllPkiRevocationDistributionPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPkiRevocationDistributionPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPkiRevocationDistributionPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPkiRevocationDistributionPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPkiRevocationDistributionPointResponse.Merge(m, src)
}
func (m *QueryAllPkiRevocationDistributionPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPkiRevocationDistributionPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPkiRevocationDistributionPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPkiRevocationDistributionPointResponse proto.InternalMessageInfo

func (m *QueryAllPkiRevocationDistributionPointResponse) GetPkiRevocationDistributionPoint() []PkiRevocationDistributionPoint {
	if m != nil {
		return m.PkiRevocationDistributionPoint
	}
	return nil
}

func (m *QueryAllPkiRevocationDistributionPointResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest struct {
	IssuerSubjectKeyID string `protobuf:"bytes,1,opt,name=issuerSubjectKeyID,proto3" json:"issuerSubjectKeyID,omitempty"`
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) Reset() {
	*m = QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest{}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) ProtoMessage() {}
func (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{36}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest.Merge(m, src)
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest proto.InternalMessageInfo

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) GetIssuerSubjectKeyID() string {
	if m != nil {
		return m.IssuerSubjectKeyID
	}
	return ""
}

type QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse struct {
	PkiRevocationDistributionPointsByIssuerSubjectKeyID PkiRevocationDistributionPointsByIssuerSubjectKeyID `protobuf:"bytes,1,opt,name=pkiRevocationDistributionPointsByIssuerSubjectKeyID,proto3" json:"pkiRevocationDistributionPointsByIssuerSubjectKeyID"`
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) Reset() {
	*m = QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse{}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) ProtoMessage() {}
func (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{37}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse.Merge(m, src)
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse proto.InternalMessageInfo

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) GetPkiRevocationDistributionPointsByIssuerSubjectKeyID() PkiRevocationDistributionPointsByIssuerSubjectKeyID {
	if m != nil {
		return m.PkiRevocationDistributionPointsByIssuerSubjectKeyID
	}
	return PkiRevocationDistributionPointsByIssuerSubjectKeyID{}
}

type QueryGetNocRootCertificatesRequest struct {
	Vid int32 `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
}

func (m *QueryGetNocRootCertificatesRequest) Reset()         { *m = QueryGetNocRootCertificatesRequest{} }
func (m *QueryGetNocRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocRootCertificatesRequest) ProtoMessage()    {}
func (*QueryGetNocRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{38}
}
func (m *QueryGetNocRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetNocRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocRootCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetNocRootCertificatesRequest) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

type QueryGetNocRootCertificatesResponse struct {
	NocRootCertificates NocRootCertificates `protobuf:"bytes,1,opt,name=nocRootCertificates,proto3" json:"nocRootCertificates"`
}

func (m *QueryGetNocRootCertificatesResponse) Reset()         { *m = QueryGetNocRootCertificatesResponse{} }
func (m *QueryGetNocRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocRootCertificatesResponse) ProtoMessage()    {}
func (*QueryGetNocRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{39}
}
func (m *QueryGetNocRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetNocRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetNocRootCertificatesResponse) GetNocRootCertificates() NocRootCertificates {
	if m != nil {
		return m.NocRootCertificates
	}
	return NocRootCertificates{}
}

type QueryAllNocRootCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNocRootCertificatesRequest) Reset()         { *m = QueryAllNocRootCertificatesRequest{} }
func (m *QueryAllNocRootCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNocRootCertificatesRequest) ProtoMessage()    {}
func (*QueryAllNocRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{40}
}
func (m *QueryAllNocRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNocRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNocRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNocRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNocRootCertificatesRequest.Merge(m, src)
}
func (m *QueryAllNocRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNocRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNocRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNocRootCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllNocRootCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNocRootCertificatesResponse struct {
	NocRootCertificates []NocRootCertificates `protobuf:"bytes,1,rep,name=nocRootCertificates,proto3" json:"nocRootCertificates"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNocRootCertificatesResponse) Reset()         { *m = QueryAllNocRootCertificatesResponse{} }
func (m *QueryAllNocRootCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNocRootCertificatesResponse) ProtoMessage()    {}
func (*QueryAllNocRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{41}
}
func (m *QueryAllNocRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNocRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNocRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNocRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNocRootCertificatesResponse.Merge(m, src)
}
func (m *QueryAllNocRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNocRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNocRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNocRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllNocRootCertificatesResponse) GetNocRootCertificates() []NocRootCertificates {
	if m != nil {
		return m.NocRootCertificates
	}
	return nil
}

func (m *QueryAllNocRootCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNocIcaCertificatesRequest struct {
	Vid int32 `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
}

func (m *QueryGetNocIcaCertificatesRequest) Reset()         { *m = QueryGetNocIcaCertificatesRequest{} }
func (m *QueryGetNocIcaCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocIcaCertificatesRequest) ProtoMessage()    {}
func (*QueryGetNocIcaCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{42}
}
func (m *QueryGetNocIcaCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocIcaCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocIcaCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocIcaCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocIcaCertificatesRequest.Merge(m, src)
}
func (m *QueryGetNocIcaCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocIcaCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocIcaCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocIcaCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetNocIcaCertificatesRequest) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

type QueryGetNocIcaCertificatesResponse struct {
	NocIcaCertificates NocIcaCertificates `protobuf:"bytes,1,opt,name=nocIcaCertificates,proto3" json:"nocIcaCertificates"`
}

func (m *QueryGetNocIcaCertificatesResponse) Reset()         { *m = QueryGetNocIcaCertificatesResponse{} }
func (m *QueryGetNocIcaCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocIcaCertificatesResponse) ProtoMessage()    {}
func (*QueryGetNocIcaCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{43}
}
func (m *QueryGetNocIcaCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocIcaCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocIcaCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocIcaCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocIcaCertificatesResponse.Merge(m, src)
}
func (m *QueryGetNocIcaCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocIcaCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocIcaCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocIcaCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetNocIcaCertificatesResponse) GetNocIcaCertificates() NocIcaCertificates {
	if m != nil {
		return m.NocIcaCertificates
	}
	return NocIcaCertificates{}
}

type QueryAllNocIcaCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNocIcaCertificatesRequest) Reset()         { *m = QueryAllNocIcaCertificatesRequest{} }
func (m *QueryAllNocIcaCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNocIcaCertificatesRequest) ProtoMessage()    {}
func (*QueryAllNocIcaCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{44}
}
func (m *QueryAllNocIcaCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNocIcaCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNocIcaCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNocIcaCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNocIcaCertificatesRequest.Merge(m, src)
}
func (m *QueryAllNocIcaCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNocIcaCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNocIcaCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNocIcaCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllNocIcaCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNocIcaCertificatesResponse struct {
	NocIcaCertificates []NocIcaCertificates `protobuf:"bytes,1,rep,name=nocIcaCertificates,proto3" json:"nocIcaCertificates"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNocIcaCertificatesResponse) Reset()         { *m = QueryAllNocIcaCertificatesResponse{} }
func (m *QueryAllNocIcaCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNocIcaCertificatesResponse) ProtoMessage()    {}
func (*QueryAllNocIcaCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{45}
}
func (m *QueryAllNocIcaCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNocIcaCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNocIcaCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNocIcaCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNocIcaCertificatesResponse.Merge(m, src)
}
func (m *QueryAllNocIcaCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNocIcaCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNocIcaCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNocIcaCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllNocIcaCertificatesResponse) GetNocIcaCertificates() []NocIcaCertificates {
	if m != nil {
		return m.NocIcaCertificates
	}
	return nil
}

func (m *QueryAllNocIcaCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRevokedNocRootCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRevokedNocRootCertificatesRequest) Reset() {
	*m = QueryGetRevokedNocRootCertificatesRequest{}
}
func (m *QueryGetRevokedNocRootCertificatesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetRevokedNocRootCertificatesRequest) ProtoMessage() {}
func (*QueryGetRevokedNocRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{46}
}
func (m *QueryGetRevokedNocRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedNocRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedNocRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedNocRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedNocRootCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedNocRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedNocRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedNocRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedNocRootCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRevokedNocRootCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRevokedNocRootCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRevokedNocRootCertificatesResponse struct {
	RevokedNocRootCertificates RevokedNocRootCertificates `protobuf:"bytes,1,opt,name=revokedNocRootCertificates,proto3" json:"revokedNocRootCertificates"`
}

func (m *QueryGetRevokedNocRootCertificatesResponse) Reset() {
	*m = QueryGetRevokedNocRootCertificatesResponse{}
}
func (m *QueryGetRevokedNocRootCertificatesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetRevokedNocRootCertificatesResponse) ProtoMessage() {}
func (*QueryGetRevokedNocRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{47}
}
func (m *QueryGetRevokedNocRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedNocRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedNocRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedNocRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedNocRootCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedNocRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedNocRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedNocRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedNocRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedNocRootCertificatesResponse) GetRevokedNocRootCertificates() RevokedNocRootCertificates {
	if m != nil {
		return m.RevokedNocRootCertificates
	}
	return RevokedNocRootCertificates{}
}

type QueryAllRevokedNocRootCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedNocRootCertificatesRequest) Reset() {
	*m = QueryAllRevokedNocRootCertificatesRequest{}
}
func (m *QueryAllRevokedNocRootCertificatesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllRevokedNocRootCertificatesRequest) ProtoMessage() {}
func (*QueryAllRevokedNocRootCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{48}
}
func (m *QueryAllRevokedNocRootCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedNocRootCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedNocRootCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedNocRootCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedNocRootCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRevokedNocRootCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedNocRootCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedNocRootCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedNocRootCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRevokedNocRootCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokedNocRootCertificatesResponse struct {
	RevokedNocRootCertificates []RevokedNocRootCertificates `protobuf:"bytes,1,rep,name=revokedNocRootCertificates,proto3" json:"revokedNocRootCertificates"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedNocRootCertificatesResponse) Reset() {
	*m = QueryAllRevokedNocRootCertificatesResponse{}
}
func (m *QueryAllRevokedNocRootCertificatesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllRevokedNocRootCertificatesResponse) ProtoMessage() {}
func (*QueryAllRevokedNocRootCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{49}
}
func (m *QueryAllRevokedNocRootCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedNocRootCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedNocRootCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedNocRootCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedNocRootCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRevokedNocRootCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedNocRootCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedNocRootCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedNocRootCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRevokedNocRootCertificatesResponse) GetRevokedNocRootCertificates() []RevokedNocRootCertificates {
	if m != nil {
		return m.RevokedNocRootCertificates
	}
	return nil
}

func (m *QueryAllRevokedNocRootCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRevokedNocIcaCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) Reset() {
	*m = QueryGetRevokedNocIcaCertificatesRequest{}
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedNocIcaCertificatesRequest) ProtoMessage()    {}
func (*QueryGetRevokedNocIcaCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{50}
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedNocIcaCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedNocIcaCertificatesRequest.Merge(m, src)
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedNocIcaCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedNocIcaCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetRevokedNocIcaCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetRevokedNocIcaCertificatesResponse struct {
	RevokedNocIcaCertificates RevokedNocIcaCertificates `protobuf:"bytes,1,opt,name=revokedNocIcaCertificates,proto3" json:"revokedNocIcaCertificates"`
}

func (m *QueryGetRevokedNocIcaCertificatesResponse) Reset() {
	*m = QueryGetRevokedNocIcaCertificatesResponse{}
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetRevokedNocIcaCertificatesResponse) ProtoMessage() {}
func (*QueryGetRevokedNocIcaCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{51}
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedNocIcaCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedNocIcaCertificatesResponse.Merge(m, src)
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedNocIcaCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedNocIcaCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetRevokedNocIcaCertificatesResponse) GetRevokedNocIcaCertificates() RevokedNocIcaCertificates {
	if m != nil {
		return m.RevokedNocIcaCertificates
	}
	return RevokedNocIcaCertificates{}
}

type QueryAllRevokedNocIcaCertificatesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedNocIcaCertificatesRequest) Reset() {
	*m = QueryAllRevokedNocIcaCertificatesRequest{}
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedNocIcaCertificatesRequest) ProtoMessage()    {}
func (*QueryAllRevokedNocIcaCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{52}
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedNocIcaCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedNocIcaCertificatesRequest.Merge(m, src)
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedNocIcaCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedNocIcaCertificatesRequest proto.InternalMessageInfo

func (m *QueryAllRevokedNocIcaCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokedNocIcaCertificatesResponse struct {
	RevokedNocIcaCertificates []RevokedNocIcaCertificates `protobuf:"bytes,1,rep,name=revokedNocIcaCertificates,proto3" json:"revokedNocIcaCertificates"`
	Pagination                *query.PageResponse         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) Reset() {
	*m = QueryAllRevokedNocIcaCertificatesResponse{}
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllRevokedNocIcaCertificatesResponse) ProtoMessage() {}
func (*QueryAllRevokedNocIcaCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{53}
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedNocIcaCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedNocIcaCertificatesResponse.Merge(m, src)
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedNocIcaCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedNocIcaCertificatesResponse proto.InternalMessageInfo

func (m *QueryAllRevokedNocIcaCertificatesResponse) GetRevokedNocIcaCertificates() []RevokedNocIcaCertificates {
	if m != nil {
		return m.RevokedNocIcaCertificates
	}
	return nil
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNocCertificatesByVidAndSkidRequest struct {
	Vid          int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) Reset() {
	*m = QueryGetNocCertificatesByVidAndSkidRequest{}
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetNocCertificatesByVidAndSkidRequest) ProtoMessage() {}
func (*QueryGetNocCertificatesByVidAndSkidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{54}
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidRequest.Merge(m, src)
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidRequest proto.InternalMessageInfo

func (m *QueryGetNocCertificatesByVidAndSkidRequest) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetNocCertificatesByVidAndSkidResponse struct {
	NocCertificatesByVidAndSkid NocCertificatesByVidAndSkid `protobuf:"bytes,1,opt,name=nocCertificatesByVidAndSkid,proto3" json:"nocCertificatesByVidAndSkid"`
}

func (m *QueryGetNocCertificatesByVidAndSkidResponse) Reset() {
	*m = QueryGetNocCertificatesByVidAndSkidResponse{}
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetNocCertificatesByVidAndSkidResponse) ProtoMessage() {}
func (*QueryGetNocCertificatesByVidAndSkidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{55}
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidResponse.Merge(m, src)
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesByVidAndSkidResponse proto.InternalMessageInfo

func (m *QueryGetNocCertificatesByVidAndSkidResponse) GetNocCertificatesByVidAndSkid() NocCertificatesByVidAndSkid {
	if m != nil {
		return m.NocCertificatesByVidAndSkid
	}
	return NocCertificatesByVidAndSkid{}
}

type QueryNocCertificatesRequest struct {
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SubjectKeyId string             `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryNocCertificatesRequest) Reset()         { *m = QueryNocCertificatesRequest{} }
func (m *QueryNocCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNocCertificatesRequest) ProtoMessage()    {}
func (*QueryNocCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{56}
}
func (m *QueryNocCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNocCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNocCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNocCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNocCertificatesRequest.Merge(m, src)
}
func (m *QueryNocCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNocCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNocCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNocCertificatesRequest proto.InternalMessageInfo

func (m *QueryNocCertificatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryNocCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryNocCertificatesResponse struct {
	NocCertificates []NocCertificates   `protobuf:"bytes,1,rep,name=nocCertificates,proto3" json:"nocCertificates"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNocCertificatesResponse) Reset()         { *m = QueryNocCertificatesResponse{} }
func (m *QueryNocCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNocCertificatesResponse) ProtoMessage()    {}
func (*QueryNocCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{57}
}
func (m *QueryNocCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNocCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNocCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNocCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNocCertificatesResponse.Merge(m, src)
}
func (m *QueryNocCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNocCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNocCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNocCertificatesResponse proto.InternalMessageInfo

func (m *QueryNocCertificatesResponse) GetNocCertificates() []NocCertificates {
	if m != nil {
		return m.NocCertificates
	}
	return nil
}

func (m *QueryNocCertificatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNocCertificatesBySubjectRequest struct {
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *QueryGetNocCertificatesBySubjectRequest) Reset() {
	*m = QueryGetNocCertificatesBySubjectRequest{}
}
func (m *QueryGetNocCertificatesBySubjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocCertificatesBySubjectRequest) ProtoMessage()    {}
func (*QueryGetNocCertificatesBySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{58}
}
func (m *QueryGetNocCertificatesBySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesBySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesBySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesBySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesBySubjectRequest.Merge(m, src)
}
func (m *QueryGetNocCertificatesBySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesBySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesBySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesBySubjectRequest proto.InternalMessageInfo

func (m *QueryGetNocCertificatesBySubjectRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type QueryGetNocCertificatesBySubjectResponse struct {
	NocCertificatesBySubject NocCertificatesBySubject `protobuf:"bytes,1,opt,name=nocCertificatesBySubject,proto3" json:"nocCertificatesBySubject"`
}

func (m *QueryGetNocCertificatesBySubjectResponse) Reset() {
	*m = QueryGetNocCertificatesBySubjectResponse{}
}
func (m *QueryGetNocCertificatesBySubjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocCertificatesBySubjectResponse) ProtoMessage()    {}
func (*QueryGetNocCertificatesBySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{59}
}
func (m *QueryGetNocCertificatesBySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesBySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesBySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesBySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesBySubjectResponse.Merge(m, src)
}
func (m *QueryGetNocCertificatesBySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesBySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesBySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesBySubjectResponse proto.InternalMessageInfo

func (m *QueryGetNocCertificatesBySubjectResponse) GetNocCertificatesBySubject() NocCertificatesBySubject {
	if m != nil {
		return m.NocCertificatesBySubject
	}
	return NocCertificatesBySubject{}
}

type QueryGetNocCertificatesRequest struct {
	Subject      string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	SubjectKeyId string `protobuf:"bytes,2,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
}

func (m *QueryGetNocCertificatesRequest) Reset()         { *m = QueryGetNocCertificatesRequest{} }
func (m *QueryGetNocCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocCertificatesRequest) ProtoMessage()    {}
func (*QueryGetNocCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{60}
}
func (m *QueryGetNocCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesRequest.Merge(m, src)
}
func (m *QueryGetNocCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesRequest proto.InternalMessageInfo

func (m *QueryGetNocCertificatesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *QueryGetNocCertificatesRequest) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

type QueryGetNocCertificatesResponse struct {
	NocCertificates NocCertificates `protobuf:"bytes,1,opt,name=nocCertificates,proto3" json:"nocCertificates"`
}

func (m *QueryGetNocCertificatesResponse) Reset()         { *m = QueryGetNocCertificatesResponse{} }
func (m *QueryGetNocCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNocCertificatesResponse) ProtoMessage()    {}
func (*QueryGetNocCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6ffa8ae459ba1c, []int{61}
}
func (m *QueryGetNocCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNocCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNocCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNocCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNocCertificatesResponse.Merge(m, src)
}
func (m *QueryGetNocCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNocCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNocCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNocCertificatesResponse proto.InternalMessageInfo

func (m *QueryGetNocCertificatesResponse) GetNocCertificates() NocCertificates {
	if m != nil {
		return m.NocCertificates
	}
	return NocCertificates{}
}

func init() {
	proto.RegisterType((*QueryAllCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllCertificatesRequest")
	proto.RegisterType((*QueryAllCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllCertificatesResponse")
	proto.RegisterType((*QueryGetCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetCertificatesRequest")
	proto.RegisterType((*QueryGetCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetCertificatesResponse")
	proto.RegisterType((*QueryGetApprovedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesRequest")
	proto.RegisterType((*QueryGetApprovedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesResponse")
	proto.RegisterType((*QueryAllApprovedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllApprovedCertificatesRequest")
	proto.RegisterType((*QueryAllApprovedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllApprovedCertificatesResponse")
	proto.RegisterType((*QueryGetProposedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRequest")
	proto.RegisterType((*QueryGetProposedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateResponse")
	proto.RegisterType((*QueryAllProposedCertificateRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRequest")
	proto.RegisterType((*QueryAllProposedCertificateResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateResponse")
	proto.RegisterType((*QueryGetChildCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetChildCertificatesRequest")
	proto.RegisterType((*QueryGetChildCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetChildCertificatesResponse")
	proto.RegisterType((*QueryGetProposedCertificateRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRevocationRequest")
	proto.RegisterType((*QueryGetProposedCertificateRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetProposedCertificateRevocationResponse")
	proto.RegisterType((*QueryAllProposedCertificateRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRevocationRequest")
	proto.RegisterType((*QueryAllProposedCertificateRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllProposedCertificateRevocationResponse")
	proto.RegisterType((*QueryGetRevokedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedCertificatesResponse")
	proto.RegisterType((*QueryAllRevokedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedCertificatesRequest")
	proto.RegisterType((*QueryAllRevokedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedCertificatesResponse")
	proto.RegisterType((*QueryGetApprovedRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedRootCertificatesRequest")
	proto.RegisterType((*QueryGetApprovedRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedRootCertificatesResponse")
	proto.RegisterType((*QueryGetRevokedRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedRootCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedRootCertificatesResponse")
	proto.RegisterType((*QueryGetApprovedCertificatesBySubjectRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesBySubjectRequest")
	proto.RegisterType((*QueryGetApprovedCertificatesBySubjectResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetApprovedCertificatesBySubjectResponse")
	proto.RegisterType((*QueryGetRejectedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRejectedCertificatesRequest")
	proto.RegisterType((*QueryGetRejectedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRejectedCertificatesResponse")
	proto.RegisterType((*QueryAllRejectedCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRejectedCertificatesRequest")
	proto.RegisterType((*QueryAllRejectedCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRejectedCertificatesResponse")
	proto.RegisterType((*QueryGetPkiRevocationDistributionPointRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetPkiRevocationDistributionPointRequest")
	proto.RegisterType((*QueryGetPkiRevocationDistributionPointResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetPkiRevocationDistributionPointResponse")
	proto.RegisterType((*QueryAllPkiRevocationDistributionPointRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllPkiRevocationDistributionPointRequest")
	proto.RegisterType((*QueryAllPkiRevocationDistributionPointResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllPkiRevocationDistributionPointResponse")
	proto.RegisterType((*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest")
	proto.RegisterType((*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse")
	proto.RegisterType((*QueryGetNocRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocRootCertificatesRequest")
	proto.RegisterType((*QueryGetNocRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocRootCertificatesResponse")
	proto.RegisterType((*QueryAllNocRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllNocRootCertificatesRequest")
	proto.RegisterType((*QueryAllNocRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllNocRootCertificatesResponse")
	proto.RegisterType((*QueryGetNocIcaCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocIcaCertificatesRequest")
	proto.RegisterType((*QueryGetNocIcaCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocIcaCertificatesResponse")
	proto.RegisterType((*QueryAllNocIcaCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllNocIcaCertificatesRequest")
	proto.RegisterType((*QueryAllNocIcaCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllNocIcaCertificatesResponse")
	proto.RegisterType((*QueryGetRevokedNocRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedNocRootCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedNocRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedNocRootCertificatesResponse")
	proto.RegisterType((*QueryAllRevokedNocRootCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedNocRootCertificatesRequest")
	proto.RegisterType((*QueryAllRevokedNocRootCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedNocRootCertificatesResponse")
	proto.RegisterType((*QueryGetRevokedNocIcaCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedNocIcaCertificatesRequest")
	proto.RegisterType((*QueryGetRevokedNocIcaCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetRevokedNocIcaCertificatesResponse")
	proto.RegisterType((*QueryAllRevokedNocIcaCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedNocIcaCertificatesRequest")
	proto.RegisterType((*QueryAllRevokedNocIcaCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryAllRevokedNocIcaCertificatesResponse")
	proto.RegisterType((*QueryGetNocCertificatesByVidAndSkidRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesByVidAndSkidRequest")
	proto.RegisterType((*QueryGetNocCertificatesByVidAndSkidResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesByVidAndSkidResponse")
	proto.RegisterType((*QueryNocCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryNocCertificatesRequest")
	proto.RegisterType((*QueryNocCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryNocCertificatesResponse")
	proto.RegisterType((*QueryGetNocCertificatesBySubjectRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesBySubjectRequest")
	proto.RegisterType((*QueryGetNocCertificatesBySubjectResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesBySubjectResponse")
	proto.RegisterType((*QueryGetNocCertificatesRequest)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesRequest")
	proto.RegisterType((*QueryGetNocCertificatesResponse)(nil), "zigbeealliance.distributedcomplianceledger.pki.QueryGetNocCertificatesResponse")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/pki/query.proto", fileDescriptor_db6ffa8ae459ba1c)
}

var fileDescriptor_db6ffa8ae459ba1c = []byte{
	// 2563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5c, 0x5f, 0x6c, 0x1c, 0x47,
	0x19, 0xcf, 0xdc, 0x91, 0xa2, 0x4e, 0x23, 0x42, 0x27, 0x69, 0xe2, 0x5c, 0x62, 0x27, 0x99, 0x26,
	0xb6, 0x93, 0xd4, 0x77, 0x24, 0xa1, 0x09, 0x54, 0x6a, 0x82, 0x1d, 0xb7, 0xae, 0x53, 0x70, 0xed,
	0x73, 0x9b, 0x26, 0x69, 0xc9, 0x69, 0x6f, 0x6f, 0x71, 0x16, 0xaf, 0x6f, 0xaf, 0x7b, 0x67, 0x53,
	0x63, 0x19, 0x41, 0x05, 0x2d, 0x45, 0x02, 0x85, 0x96, 0x87, 0x82, 0x2a, 0x1e, 0xa8, 0x54, 0xf1,
	0xce, 0x03, 0x0f, 0x3c, 0xf0, 0xc0, 0x4b, 0x25, 0x1e, 0x5a, 0x81, 0x04, 0x95, 0x90, 0x10, 0x4a,
	0xa8, 0x00, 0xb5, 0x12, 0x82, 0x07, 0x10, 0x2f, 0x80, 0x76, 0xf6, 0x5b, 0xef, 0xbf, 0x99, 0xb9,
	0xbd, 0xb9, 0x39, 0xe7, 0xed, 0xee, 0x66, 0xf6, 0xfb, 0xe6, 0xf7, 0xfb, 0xfe, 0xcc, 0xcc, 0xb7,
	0x9f, 0x8d, 0x1f, 0xf9, 0xaa, 0xbd, 0x54, 0xb7, 0x2c, 0xc3, 0x71, 0x6c, 0xa3, 0x69, 0x5a, 0x95,
	0x86, 0xdd, 0xee, 0x78, 0x76, 0x7d, 0xb5, 0x63, 0x35, 0x4c, 0x77, 0xa5, 0x15, 0xfc, 0xea, 0x58,
	0x8d, 0x25, 0xcb, 0xab, 0xb4, 0x96, 0xed, 0xca, 0x0b, 0xab, 0x96, 0xb7, 0x5e, 0x6e, 0x79, 0x6e,
	0xc7, 0x25, 0xe5, 0xe4, 0xb3, 0x65, 0xc9, 0xb3, 0xe5, 0xd6, 0xb2, 0x5d, 0x3a, 0xb4, 0xe4, 0xba,
	0x4b, 0x8e, 0x55, 0x31, 0x5a, 0x76, 0xc5, 0x68, 0x36, 0xdd, 0x8e, 0xd1, 0xb1, 0xdd, 0x66, 0x3b,
	0x90, 0x56, 0x3a, 0x69, 0xba, 0xed, 0x15, 0xb7, 0x5d, 0xa9, 0x1b, 0x6d, 0x2b, 0x50, 0x53, 0x59,
	0x3b, 0x5d, 0xb7, 0x3a, 0xc6, 0xe9, 0x4a, 0xcb, 0x58, 0xb2, 0x9b, 0x6c, 0x32, 0xcc, 0xbd, 0xdc,
	0xe3, 0xaa, 0x8d, 0x56, 0xcb, 0x73, 0xd7, 0xac, 0x46, 0xcd, 0xb4, 0xbc, 0x8e, 0xfd, 0x25, 0xdb,
	0x34, 0x3a, 0x56, 0xa8, 0x77, 0xb6, 0x47, 0x59, 0x2d, 0xcf, 0x6d, 0xb9, 0xed, 0xa4, 0x2c, 0x10,
	0x35, 0xd3, 0xa3, 0x28, 0xf3, 0xa6, 0xed, 0x70, 0xd7, 0xf4, 0xb4, 0x86, 0x35, 0xd5, 0x3c, 0x6b,
	0xcd, 0x35, 0xe3, 0xac, 0xf5, 0x8a, 0xd4, 0x17, 0xb0, 0xcc, 0x27, 0xed, 0x29, 0x55, 0x03, 0x78,
	0xae, 0xdb, 0xe1, 0x09, 0x9c, 0x53, 0x5c, 0x9b, 0x48, 0xde, 0x33, 0x3a, 0x3c, 0xa4, 0x56, 0x5f,
	0xaf, 0xb5, 0x57, 0xeb, 0x5f, 0xb6, 0xcc, 0x8e, 0x32, 0x85, 0xfe, 0xc3, 0x5c, 0x67, 0xb9, 0xd2,
	0xab, 0x8d, 0x97, 0xed, 0x98, 0x49, 0x6b, 0x5b, 0xd3, 0xfd, 0x2f, 0x2d, 0xd7, 0x6e, 0x86, 0x4b,
	0x6c, 0xe9, 0x96, 0xcb, 0x68, 0xb0, 0xdb, 0xed, 0x55, 0xcb, 0x0b, 0xd9, 0xa8, 0x2d, 0x5b, 0xeb,
	0x35, 0xbb, 0x01, 0x1a, 0x1f, 0xeb, 0x95, 0x6b, 0xc7, 0xe1, 0x99, 0xac, 0x57, 0x31, 0x4d, 0xd7,
	0xe4, 0x89, 0xb9, 0xac, 0x20, 0x46, 0xe4, 0x45, 0xb3, 0x0a, 0xb2, 0x6c, 0xd3, 0xe0, 0x89, 0xaa,
	0x2a, 0x3a, 0xb8, 0x6c, 0x79, 0x0b, 0x7d, 0xc8, 0x14, 0x2c, 0xf3, 0x99, 0x3e, 0x8d, 0xe0, 0xfb,
	0xca, 0x9a, 0xdd, 0xa8, 0x19, 0xcd, 0x46, 0xad, 0xbd, 0xbc, 0xe5, 0x22, 0xf3, 0x1a, 0xc4, 0x26,
	0x23, 0x71, 0xef, 0x92, 0xbb, 0xe4, 0xb2, 0x8f, 0x15, 0xff, 0x13, 0xfc, 0x7a, 0x20, 0xd8, 0x44,
	0x6a, 0xc1, 0x40, 0xf0, 0x25, 0x18, 0xa2, 0x16, 0x3e, 0xb8, 0xe0, 0xef, 0x2a, 0x93, 0x8e, 0x73,
	0x29, 0x26, 0xb9, 0x6a, 0xbd, 0xb0, 0x6a, 0xb5, 0x3b, 0xe4, 0x71, 0x8c, 0xa3, 0x6d, 0x66, 0x08,
	0x1d, 0x41, 0xe3, 0xf7, 0x9d, 0x19, 0x2d, 0x83, 0x04, 0x7f, 0x4f, 0x2a, 0x07, 0x5b, 0x1f, 0xec,
	0x49, 0xe5, 0x79, 0x63, 0xc9, 0x82, 0x67, 0xab, 0xb1, 0x27, 0xe9, 0x6f, 0x10, 0x3e, 0xc4, 0xd7,
	0xd3, 0x6e, 0xb9, 0xcd, 0xb6, 0x45, 0x6c, 0xbc, 0x2b, 0x8e, 0x6c, 0x08, 0x1d, 0x29, 0x8e, 0xdf,
	0x77, 0xe6, 0x62, 0x8f, 0x9b, 0x69, 0x39, 0x25, 0x7e, 0xea, 0x63, 0xef, 0xfc, 0xf1, 0xf0, 0x8e,
	0x6a, 0x42, 0x34, 0x99, 0x49, 0x60, 0x2a, 0x30, 0x4c, 0x63, 0x5d, 0x31, 0x05, 0xeb, 0x4c, 0x80,
	0x7a, 0x0e, 0xb8, 0x9b, 0xb1, 0x3a, 0x3c, 0xee, 0x86, 0xf0, 0xc7, 0xc1, 0x38, 0x8c, 0xb8, 0x7b,
	0xab, 0xe1, 0x57, 0x42, 0xf1, 0x2e, 0xf8, 0xf8, 0xa4, 0xb5, 0x3e, 0xdb, 0x60, 0x6b, 0xb8, 0xb7,
	0x9a, 0xf8, 0x8d, 0xbe, 0x1a, 0x32, 0x96, 0x91, 0x2e, 0x64, 0x0c, 0x0d, 0x88, 0x31, 0x6a, 0xe2,
	0x07, 0xc3, 0xa5, 0x4c, 0xc2, 0x8e, 0xa0, 0x1f, 0xf0, 0xdb, 0x08, 0x1f, 0x93, 0x6b, 0x01, 0xe0,
	0x5f, 0xc3, 0x7b, 0x0d, 0xce, 0x38, 0x10, 0x30, 0xdd, 0x33, 0x01, 0x1c, 0x59, 0xc0, 0x02, 0x57,
	0x0f, 0xfd, 0x3e, 0x02, 0x3a, 0x26, 0x1d, 0x47, 0x46, 0x87, 0xa6, 0xd8, 0xc9, 0x45, 0xde, 0xdf,
	0x43, 0xf2, 0x84, 0x6b, 0xea, 0x4a, 0x5e, 0x71, 0x3b, 0xc8, 0xd3, 0x17, 0x7c, 0x75, 0x4c, 0x43,
	0x6f, 0x99, 0x87, 0x73, 0x5e, 0x4c, 0x91, 0x1e, 0x97, 0xfc, 0x09, 0x8a, 0x1c, 0x9f, 0xab, 0x04,
	0x48, 0xdd, 0xc0, 0x7b, 0x5a, 0xd9, 0x61, 0x30, 0xf9, 0xa5, 0x5e, 0x39, 0xe5, 0x68, 0x02, 0x4a,
	0x79, 0x5a, 0xa8, 0x03, 0x44, 0x4c, 0x3a, 0x8e, 0x84, 0x08, 0x5d, 0x89, 0xfc, 0xc3, 0x98, 0xf3,
	0x2b, 0x51, 0x52, 0x1c, 0x3c, 0x25, 0x3a, 0x9d, 0xec, 0xc8, 0x56, 0x0e, 0xf6, 0x6f, 0x25, 0xbc,
	0x30, 0xdf, 0x87, 0xef, 0x09, 0x8e, 0x81, 0xe0, 0x61, 0xf0, 0x8d, 0x8c, 0xe2, 0x4f, 0x18, 0xab,
	0x9d, 0x9b, 0xae, 0x67, 0x77, 0xd6, 0xe3, 0x2e, 0x96, 0xfa, 0x95, 0xfe, 0x08, 0xe1, 0xa3, 0x12,
	0x25, 0xc0, 0xe7, 0x2a, 0xbe, 0xdf, 0x4c, 0x0f, 0x82, 0x19, 0x27, 0x7b, 0x65, 0x33, 0xa3, 0x05,
	0xb8, 0xcc, 0x6a, 0xa0, 0xb7, 0x10, 0x7e, 0x48, 0x1a, 0x01, 0xe1, 0x09, 0x59, 0x4b, 0xc0, 0xb1,
	0x39, 0x96, 0x67, 0x1b, 0xce, 0xdc, 0xea, 0x4a, 0xdd, 0xf2, 0x86, 0x8a, 0x30, 0x27, 0xf6, 0x1b,
	0xfd, 0x35, 0xc2, 0x13, 0x39, 0x97, 0x04, 0xdc, 0xfd, 0x10, 0xe1, 0xe1, 0x96, 0x6c, 0x26, 0x10,
	0xf9, 0x05, 0x0d, 0x6e, 0x19, 0x09, 0x05, 0x52, 0xe5, 0x9a, 0xe9, 0x1a, 0xf0, 0x2b, 0x0a, 0xa7,
	0x34, 0xbf, 0xba, 0xe2, 0xf8, 0x07, 0x05, 0x60, 0xb1, 0xbb, 0xe2, 0x1e, 0x58, 0x2c, 0xde, 0x1d,
	0x16, 0x07, 0xb2, 0xab, 0x54, 0x83, 0x6b, 0x81, 0xfe, 0x83, 0x4e, 0x7c, 0x57, 0xe1, 0x2a, 0x89,
	0x52, 0xa8, 0x97, 0x1d, 0x56, 0xdd, 0x55, 0x38, 0x9a, 0xc2, 0x14, 0xca, 0xd1, 0x12, 0xdf, 0x55,
	0x24, 0x44, 0x0c, 0x62, 0x57, 0x51, 0xa2, 0xa4, 0x38, 0x78, 0x4a, 0xf4, 0x39, 0xd9, 0x09, 0x3c,
	0x96, 0x3e, 0xe8, 0x56, 0x5d, 0x97, 0x77, 0x87, 0xa0, 0x3f, 0x47, 0x78, 0xbc, 0xfb, 0x5c, 0x60,
	0xe7, 0x3b, 0x08, 0x0f, 0x19, 0x82, 0x49, 0x60, 0x9c, 0x27, 0x54, 0x0f, 0x78, 0x69, 0x79, 0x40,
	0x94, 0x50, 0x1f, 0x1d, 0xc7, 0xa3, 0x29, 0x27, 0x17, 0x61, 0xfc, 0x19, 0x8a, 0xf8, 0x10, 0x4e,
	0x05, 0x88, 0xaf, 0x20, 0xbc, 0xdf, 0xe3, 0xcf, 0x01, 0x84, 0x33, 0x8a, 0x5e, 0x20, 0x00, 0x28,
	0xd2, 0x46, 0x9f, 0x88, 0x36, 0x46, 0xee, 0x21, 0x78, 0x7d, 0x31, 0x88, 0xf9, 0xae, 0x39, 0x23,
	0xb1, 0xa1, 0x75, 0x11, 0x15, 0x4b, 0xc5, 0x86, 0x6c, 0xa6, 0xea, 0x86, 0x26, 0x55, 0x1f, 0xa6,
	0x62, 0xa9, 0xe6, 0xf8, 0x5d, 0xb1, 0x0a, 0x65, 0x3e, 0xfd, 0x29, 0xf4, 0xad, 0xd8, 0x5d, 0x91,
	0xaf, 0x25, 0x9e, 0x30, 0x32, 0xe3, 0xea, 0x39, 0x34, 0x23, 0x2a, 0x4a, 0x18, 0x99, 0x21, 0xba,
	0x12, 0x4f, 0x6a, 0x62, 0x2a, 0x74, 0x25, 0xd1, 0x8f, 0x62, 0x77, 0x40, 0x35, 0x52, 0x8a, 0x83,
	0x27, 0x45, 0x5f, 0x16, 0x7d, 0x25, 0x7e, 0x0e, 0x5c, 0xb6, 0xa3, 0xd3, 0xc0, 0x74, 0xac, 0x56,
	0x3b, 0xef, 0xda, 0xcd, 0xad, 0x10, 0xfc, 0x24, 0x2e, 0xae, 0xd9, 0x0d, 0xc6, 0xf0, 0xce, 0xaa,
	0xff, 0x91, 0xec, 0xc5, 0x3b, 0x1d, 0xa3, 0x6e, 0x39, 0xe0, 0x64, 0xc1, 0x17, 0x52, 0xc6, 0x24,
	0x38, 0xc3, 0x2f, 0x46, 0x3e, 0x37, 0x0d, 0x67, 0x51, 0xce, 0x08, 0x7d, 0x17, 0xe1, 0x72, 0xde,
	0x95, 0x80, 0x09, 0xde, 0x44, 0x78, 0x44, 0x3e, 0x15, 0x1c, 0x61, 0xae, 0xe7, 0xd3, 0x94, 0x54,
	0x2a, 0x58, 0xa6, 0x8b, 0x6e, 0xfa, 0x95, 0xd8, 0xe1, 0x30, 0x17, 0xb5, 0xba, 0x7c, 0xf8, 0x8d,
	0x02, 0x50, 0x99, 0x43, 0x73, 0x2f, 0x54, 0x16, 0xef, 0x16, 0x95, 0xfa, 0xfc, 0xbd, 0x83, 0xa7,
	0xf2, 0x39, 0x59, 0x7b, 0x6a, 0x7d, 0x36, 0xe3, 0xa4, 0xa1, 0xa1, 0xf8, 0xbe, 0x8d, 0x84, 0xbe,
	0xfd, 0x56, 0x01, 0x5f, 0xea, 0x4b, 0x2d, 0x58, 0xe9, 0x0f, 0x08, 0x9f, 0x6d, 0xf5, 0xfe, 0x3c,
	0xb8, 0x92, 0xa9, 0xd7, 0x74, 0x5c, 0x55, 0x60, 0x4f, 0x95, 0x55, 0xd2, 0x73, 0xd1, 0xb5, 0x61,
	0xce, 0x35, 0x05, 0x07, 0x9d, 0x6c, 0xfe, 0x49, 0x5c, 0x05, 0xb8, 0x0f, 0x46, 0x19, 0xbb, 0x99,
	0x1d, 0x56, 0xdd, 0xc6, 0x38, 0x9a, 0xc2, 0x8c, 0xcd, 0xd1, 0x12, 0xbf, 0x0a, 0x48, 0xc0, 0x0d,
	0xe2, 0x2a, 0xa0, 0x44, 0x49, 0x71, 0xf0, 0x94, 0xe8, 0x0b, 0xea, 0x87, 0xa3, 0xda, 0xcf, 0x9c,
	0x6b, 0xce, 0x9a, 0x46, 0x3e, 0xbf, 0xf9, 0x31, 0x4a, 0x38, 0x5c, 0xe6, 0x39, 0xe0, 0xe8, 0x45,
	0x4c, 0x9a, 0x99, 0x51, 0xb0, 0xcd, 0x94, 0x02, 0x45, 0x29, 0x49, 0xc0, 0x10, 0x47, 0x07, 0x5d,
	0x06, 0x5c, 0x81, 0x11, 0x05, 0xb8, 0x74, 0xb9, 0xcc, 0x5f, 0x50, 0xc2, 0x43, 0x7b, 0x65, 0xa3,
	0x38, 0x68, 0x36, 0xf4, 0xb9, 0x8b, 0x8d, 0x4f, 0xa4, 0x6e, 0x4a, 0x92, 0x88, 0xec, 0xef, 0x88,
	0xfd, 0x4b, 0x84, 0x4f, 0xe6, 0xd1, 0x05, 0xe4, 0xde, 0x42, 0xb8, 0xe4, 0x09, 0xa7, 0x81, 0x71,
	0x2f, 0x2b, 0xde, 0xcd, 0xc4, 0xd1, 0x29, 0xd1, 0x49, 0xdb, 0x40, 0x56, 0x54, 0x53, 0xd8, 0x86,
	0xf4, 0xf5, 0xed, 0x02, 0xd0, 0xd6, 0x45, 0x6b, 0x5e, 0xda, 0x8a, 0xdb, 0x4d, 0x9b, 0x3e, 0x67,
	0xbd, 0x19, 0x95, 0x2e, 0xa2, 0x05, 0x09, 0x52, 0x41, 0x7f, 0xbe, 0xfa, 0x0b, 0xc4, 0x8b, 0x0b,
	0x51, 0x1e, 0xf8, 0x2e, 0xc2, 0x07, 0x3c, 0xd1, 0x2c, 0x30, 0xfd, 0xac, 0x3a, 0xe5, 0xfc, 0xb4,
	0x20, 0xd6, 0x48, 0x3d, 0xe0, 0x29, 0xe1, 0x31, 0x03, 0x4e, 0x99, 0xdf, 0x2c, 0xf0, 0x82, 0x43,
	0x95, 0xb1, 0xe2, 0xf6, 0x32, 0xa6, 0xb3, 0xdc, 0x7b, 0x32, 0xb6, 0x8d, 0x26, 0x0b, 0x1a, 0x57,
	0xec, 0xc6, 0x64, 0xb3, 0xb1, 0xb8, 0x6c, 0x37, 0xc4, 0xf7, 0xc7, 0x3c, 0xce, 0xf9, 0x2b, 0x84,
	0x4f, 0xe5, 0x52, 0x02, 0x64, 0xbf, 0x8e, 0xf0, 0xc1, 0xa6, 0x78, 0x1e, 0x18, 0xfd, 0x49, 0x85,
	0x0d, 0x4b, 0x24, 0x12, 0x08, 0x97, 0x69, 0xa5, 0xaf, 0x22, 0x68, 0x76, 0x48, 0xc9, 0xb9, 0x1b,
	0x2f, 0xbb, 0xdf, 0x0f, 0x5b, 0x23, 0x32, 0x6b, 0x01, 0x0a, 0x5d, 0xbc, 0x3b, 0x85, 0x45, 0xb5,
	0x9f, 0x24, 0xcd, 0x5a, 0xc0, 0x54, 0x5a, 0xba, 0x3e, 0x87, 0xbc, 0x14, 0x95, 0x42, 0x33, 0x06,
	0xcb, 0x5d, 0x50, 0x8c, 0x17, 0x8d, 0xc5, 0x52, 0x62, 0x45, 0xe3, 0xa6, 0x60, 0x92, 0x6a, 0xd1,
	0x58, 0xa4, 0x34, 0x2c, 0x1a, 0x8b, 0xf4, 0xd1, 0x1b, 0x78, 0x44, 0xb0, 0x70, 0x3d, 0x1b, 0xc5,
	0x6b, 0x08, 0x1f, 0x16, 0x2a, 0x90, 0x39, 0x0f, 0x1a, 0x9c, 0xf3, 0x9c, 0xf9, 0xfa, 0x05, 0xbc,
	0x93, 0x2d, 0x8a, 0xbc, 0x8b, 0xf0, 0xee, 0xf8, 0xd0, 0xa4, 0xe3, 0x90, 0x9e, 0x03, 0x5d, 0xd2,
	0xce, 0x55, 0xfa, 0xbc, 0x1e, 0x61, 0x01, 0x53, 0xf4, 0xe8, 0x4b, 0xbf, 0xfd, 0xf3, 0xeb, 0x85,
	0x83, 0xe4, 0x40, 0xa5, 0x61, 0x3a, 0x61, 0x0f, 0xe3, 0x44, 0xa2, 0xd7, 0xea, 0x03, 0x84, 0x77,
	0x25, 0x22, 0x45, 0x0d, 0x0e, 0xbf, 0xc3, 0x4a, 0x11, 0x8e, 0xa0, 0xa1, 0x8a, 0x3e, 0xc2, 0xe0,
	0x7c, 0x9a, 0x9c, 0x11, 0xc2, 0xa9, 0x6c, 0x80, 0x37, 0x6d, 0x6e, 0x7d, 0x62, 0x7e, 0xb5, 0x49,
	0xee, 0x20, 0xbc, 0x9f, 0x57, 0x3c, 0xf7, 0x2d, 0xb8, 0xa8, 0x4a, 0xba, 0xa4, 0xb9, 0xa8, 0xf4,
	0xb4, 0x5e, 0xa1, 0x40, 0xc1, 0x30, 0xa3, 0x60, 0x3f, 0x79, 0x60, 0x8b, 0x82, 0x84, 0x35, 0xbf,
	0x55, 0xc0, 0xc3, 0xd2, 0x57, 0x04, 0xe4, 0x79, 0x55, 0x8b, 0xe4, 0x79, 0x87, 0x52, 0xfa, 0xe2,
	0x80, 0xa4, 0x03, 0xfa, 0x31, 0x86, 0xfe, 0x28, 0x39, 0xcc, 0x45, 0x1f, 0x19, 0x9f, 0xfc, 0x07,
	0xe1, 0xbd, 0x3c, 0x91, 0x8a, 0xa6, 0x96, 0xb7, 0xd5, 0x29, 0x9a, 0xba, 0x4b, 0x17, 0x1d, 0x3d,
	0xc7, 0xc0, 0x7e, 0x8a, 0x94, 0xbb, 0x80, 0x4d, 0x7b, 0xfa, 0xff, 0x10, 0xde, 0xc3, 0x79, 0x63,
	0x4f, 0xaa, 0xaa, 0xab, 0x14, 0x37, 0x2d, 0x95, 0x16, 0xb5, 0xca, 0x04, 0xe0, 0x17, 0x19, 0xf0,
	0xcf, 0x92, 0xf3, 0x5b, 0xc0, 0xc3, 0xde, 0x82, 0x9c, 0xb1, 0xfe, 0x37, 0x84, 0xf7, 0x71, 0x14,
	0xf8, 0xa1, 0x5e, 0x55, 0x8d, 0x4a, 0xed, 0x24, 0xc8, 0xdb, 0xb3, 0xe8, 0x28, 0x23, 0xe1, 0x08,
	0x19, 0x91, 0x93, 0x40, 0xfe, 0x8d, 0xf0, 0xfd, 0x99, 0x76, 0x21, 0x32, 0xaf, 0x9c, 0x77, 0x05,
	0x4d, 0x54, 0xa5, 0x05, 0x8d, 0x12, 0x01, 0xe2, 0xa3, 0x0c, 0xe2, 0x79, 0xf2, 0x70, 0xe4, 0xe0,
	0xfe, 0xdc, 0x94, 0x91, 0x83, 0x92, 0xf7, 0x66, 0x65, 0x23, 0xd9, 0x95, 0xb5, 0x49, 0x7e, 0x5a,
	0xc0, 0xc3, 0xd2, 0xce, 0x14, 0xf5, 0x5c, 0x97, 0xa7, 0xd1, 0x47, 0x3d, 0xd7, 0xe5, 0xea, 0xe6,
	0xa1, 0x97, 0x19, 0x3b, 0xd3, 0x64, 0x2a, 0xeb, 0x00, 0xd1, 0x9f, 0x3d, 0xe4, 0x0c, 0x88, 0xd7,
	0x0a, 0xf8, 0x88, 0x54, 0xab, 0x1f, 0x1a, 0xcf, 0x6b, 0x75, 0x63, 0x3d, 0x6c, 0xe5, 0xed, 0x7d,
	0xa2, 0xa7, 0x19, 0x5b, 0xa7, 0xc8, 0x89, 0xdc, 0x6c, 0x91, 0xff, 0x22, 0xbc, 0x87, 0xd3, 0x60,
	0xa2, 0x9e, 0x27, 0xc5, 0x6d, 0x38, 0xea, 0x79, 0x52, 0xd2, 0x6b, 0x43, 0x2f, 0x30, 0xcc, 0x9f,
	0x21, 0xe7, 0xb6, 0x30, 0xc3, 0x85, 0x3c, 0xa7, 0x57, 0xfc, 0x15, 0xe1, 0x7d, 0x1c, 0xf9, 0x7d,
	0xa5, 0x49, 0xed, 0x1c, 0xc8, 0xfb, 0x8d, 0xe8, 0x71, 0xc6, 0xc1, 0x61, 0x32, 0x2c, 0xe5, 0x80,
	0xfc, 0x03, 0xe1, 0x21, 0x51, 0xa3, 0x0c, 0x79, 0xb6, 0xdf, 0xed, 0x5b, 0x50, 0xb2, 0x2c, 0x5d,
	0xd5, 0x2f, 0x18, 0x60, 0x53, 0x06, 0xfb, 0x10, 0x29, 0x45, 0xb0, 0x5d, 0xb7, 0x93, 0xc4, 0xfc,
	0x2f, 0x84, 0xf7, 0x0b, 0x5a, 0x67, 0xc8, 0x95, 0x3e, 0xfd, 0x51, 0x84, 0xf8, 0x59, 0xed, 0x72,
	0x01, 0xf0, 0x49, 0x06, 0xf8, 0x18, 0xa1, 0x19, 0x3b, 0x67, 0x81, 0x7f, 0xa3, 0xe0, 0x07, 0x76,
	0xb6, 0xb1, 0xa1, 0x8f, 0x20, 0x14, 0xf6, 0x86, 0xa8, 0x9f, 0xfd, 0x64, 0x0d, 0x20, 0x9c, 0x23,
	0x50, 0xd8, 0xa9, 0x91, 0x33, 0xb6, 0x3f, 0x64, 0xb1, 0x9d, 0xd1, 0xd0, 0xd7, 0x6d, 0x47, 0x3f,
	0x0d, 0x5d, 0xfa, 0x60, 0x38, 0x87, 0x20, 0x2e, 0x0d, 0xe4, 0xed, 0x42, 0xb7, 0x0e, 0x03, 0xa2,
	0xbe, 0x5b, 0xe7, 0x69, 0xaf, 0x28, 0xdd, 0x18, 0x94, 0x78, 0x60, 0xe2, 0x31, 0xc6, 0xc4, 0x45,
	0xf2, 0x68, 0xc2, 0xff, 0x61, 0x5b, 0x0b, 0xfe, 0xdc, 0x31, 0x3c, 0x2a, 0xc5, 0xdf, 0x7b, 0x6f,
	0x56, 0x36, 0xd6, 0xec, 0xc6, 0x66, 0x65, 0x83, 0xf5, 0xcd, 0x6c, 0x92, 0x97, 0x0b, 0xf8, 0xa8,
	0x5c, 0xa3, 0xef, 0x21, 0xea, 0x7b, 0xf5, 0x00, 0xb9, 0xca, 0xdd, 0x6f, 0xc2, 0x4b, 0x8e, 0x69,
	0xae, 0xc8, 0xef, 0x0b, 0xf8, 0xac, 0x42, 0x0b, 0x02, 0xf1, 0x06, 0x63, 0x67, 0x59, 0x47, 0x48,
	0xa9, 0xbd, 0xad, 0x3a, 0x81, 0xc4, 0xf3, 0x8c, 0xc4, 0xd3, 0xa4, 0xd2, 0xa3, 0xc3, 0x91, 0xdf,
	0x21, 0x4c, 0x52, 0x75, 0x35, 0xf5, 0x2a, 0x19, 0xbf, 0xc6, 0xa8, 0x58, 0x56, 0x12, 0xd4, 0x13,
	0x39, 0x67, 0x08, 0xc3, 0x71, 0x26, 0x9a, 0xae, 0x99, 0x39, 0x2f, 0x0e, 0x89, 0xea, 0xa6, 0xea,
	0x67, 0x88, 0x2e, 0x45, 0x64, 0xf5, 0x33, 0x44, 0xb7, 0xba, 0x32, 0xad, 0x30, 0xd8, 0x27, 0xc8,
	0x98, 0x14, 0x76, 0xac, 0xa8, 0xf2, 0x4f, 0x84, 0x77, 0xa7, 0xa4, 0x92, 0x39, 0x4d, 0xcb, 0x0b,
	0xe1, 0x3e, 0xa5, 0x4d, 0x9e, 0xf0, 0x90, 0x2c, 0x47, 0x99, 0xde, 0x48, 0xbf, 0x57, 0xc0, 0x07,
	0x25, 0x6f, 0x66, 0xc8, 0x75, 0x6d, 0xf6, 0xc9, 0xbc, 0xce, 0x2a, 0x3d, 0x37, 0x10, 0xd9, 0xc2,
	0xf2, 0x52, 0x96, 0x94, 0x60, 0xef, 0x48, 0x12, 0xf2, 0x11, 0xc2, 0x7b, 0x78, 0x6f, 0xa5, 0xab,
	0x7d, 0x2c, 0x56, 0x74, 0x9c, 0x5c, 0xd4, 0x2a, 0x13, 0x80, 0x3f, 0xc4, 0x80, 0x8f, 0x92, 0x63,
	0x09, 0xe0, 0x99, 0x63, 0x64, 0x80, 0x9e, 0xd5, 0x92, 0x38, 0xd2, 0xfa, 0xba, 0x24, 0x69, 0x47,
	0x2c, 0xef, 0xc4, 0xe2, 0x1c, 0xa3, 0xb8, 0x88, 0xfd, 0x0b, 0x21, 0xe1, 0xbc, 0xcc, 0x5d, 0xe8,
	0xc3, 0x0a, 0xfc, 0xb7, 0xe4, 0xa5, 0xaa, 0x4e, 0x91, 0x80, 0xf2, 0x14, 0x43, 0x79, 0x9c, 0x3c,
	0x98, 0x40, 0x69, 0x9b, 0x06, 0xcf, 0xac, 0x1f, 0x20, 0xfc, 0x40, 0x56, 0x96, 0x6f, 0xd5, 0x85,
	0x3e, 0x2c, 0xa0, 0x15, 0xad, 0xb4, 0x57, 0x8a, 0xb3, 0x69, 0xf1, 0xd0, 0x92, 0x37, 0x0b, 0xb8,
	0x24, 0x6e, 0x36, 0x21, 0xd7, 0xfa, 0xbc, 0xaf, 0x49, 0x3c, 0xf9, 0xfa, 0x20, 0x44, 0x03, 0xf8,
	0x19, 0x06, 0x7e, 0x92, 0x5c, 0xcc, 0xdc, 0x06, 0x05, 0xa1, 0x2c, 0xca, 0xee, 0x2f, 0x17, 0xf0,
	0xb0, 0x58, 0x9f, 0xef, 0x0e, 0xd7, 0xfa, 0xac, 0x5a, 0x68, 0x67, 0x28, 0x57, 0xdb, 0x12, 0x2d,
	0x33, 0x86, 0xc6, 0xc9, 0x68, 0x3e, 0x86, 0xc8, 0x1b, 0x05, 0x7c, 0x40, 0xd8, 0xef, 0x41, 0xae,
	0xf6, 0x6f, 0x4b, 0x41, 0x68, 0x5c, 0x1b, 0x80, 0x64, 0xa0, 0xe0, 0x71, 0x46, 0xc1, 0xe7, 0xc8,
	0x05, 0x2e, 0x05, 0xd9, 0xbc, 0x20, 0xf2, 0x91, 0x97, 0x0a, 0xf8, 0x90, 0x50, 0x9b, 0xef, 0x22,
	0x57, 0xfb, 0xb7, 0xa3, 0x56, 0x76, 0xf2, 0x74, 0x0c, 0xd1, 0x09, 0xc6, 0xce, 0x18, 0x39, 0x9e,
	0x8b, 0x9d, 0xa9, 0x1b, 0xef, 0xdc, 0x1e, 0x41, 0xef, 0xdd, 0x1e, 0x41, 0x7f, 0xba, 0x3d, 0x82,
	0x6e, 0xdd, 0x19, 0xd9, 0xf1, 0xde, 0x9d, 0x91, 0x1d, 0xef, 0xdf, 0x19, 0xd9, 0x71, 0x7d, 0x7a,
	0xc9, 0xee, 0xdc, 0x5c, 0xad, 0x97, 0x4d, 0x77, 0xa5, 0x12, 0xac, 0x76, 0x82, 0xf7, 0xef, 0x52,
	0x26, 0xa2, 0xf5, 0x4e, 0xc0, 0x3f, 0x4c, 0x79, 0x91, 0xa9, 0xed, 0xac, 0xb7, 0xac, 0x76, 0xfd,
	0x1e, 0xf6, 0xcf, 0x4e, 0xce, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf2, 0x5e, 0xb7, 0xd8,
	0x4b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of Certificates items.
	CertificatesAll(ctx context.Context, in *QueryAllCertificatesRequest, opts ...grpc.CallOption) (*QueryAllCertificatesResponse, error)
	// Queries a Certificates by index.
	Certificates(ctx context.Context, in *QueryGetCertificatesRequest, opts ...grpc.CallOption) (*QueryGetCertificatesResponse, error)
	// Queries a list of ApprovedCertificates items.
	ApprovedCertificatesAll(ctx context.Context, in *QueryAllApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllApprovedCertificatesResponse, error)
	// Queries a ApprovedCertificatesBySubject by index.
	ApprovedCertificatesBySubject(ctx context.Context, in *QueryGetApprovedCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesBySubjectResponse, error)
	// Queries a ApprovedCertificates by index.
	ApprovedCertificates(ctx context.Context, in *QueryGetApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesResponse, error)
	// Queries a ProposedCertificate by index.
	ProposedCertificate(ctx context.Context, in *QueryGetProposedCertificateRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateResponse, error)
	// Queries a list of ProposedCertificate items.
	ProposedCertificateAll(ctx context.Context, in *QueryAllProposedCertificateRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateResponse, error)
	// Queries a ChildCertificates by index.
	ChildCertificates(ctx context.Context, in *QueryGetChildCertificatesRequest, opts ...grpc.CallOption) (*QueryGetChildCertificatesResponse, error)
	// Queries a ProposedCertificateRevocation by index.
	ProposedCertificateRevocation(ctx context.Context, in *QueryGetProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateRevocationResponse, error)
	// Queries a list of ProposedCertificateRevocation items.
	ProposedCertificateRevocationAll(ctx context.Context, in *QueryAllProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateRevocationResponse, error)
	// Queries a RevokedCertificates by index.
	RevokedCertificates(ctx context.Context, in *QueryGetRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedCertificatesResponse, error)
	// Queries a list of RevokedCertificates items.
	RevokedCertificatesAll(ctx context.Context, in *QueryAllRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedCertificatesResponse, error)
	// Queries a ApprovedRootCertificates by index.
	ApprovedRootCertificates(ctx context.Context, in *QueryGetApprovedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedRootCertificatesResponse, error)
	// Queries a RevokedRootCertificates by index.
	RevokedRootCertificates(ctx context.Context, in *QueryGetRevokedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedRootCertificatesResponse, error)
	// Queries a RejectedCertificate by index.
	RejectedCertificate(ctx context.Context, in *QueryGetRejectedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRejectedCertificatesResponse, error)
	// Queries a list of RejectedCertificate items.
	RejectedCertificateAll(ctx context.Context, in *QueryAllRejectedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRejectedCertificatesResponse, error)
	// Queries a PkiRevocationDistributionPoint by index.
	PkiRevocationDistributionPoint(ctx context.Context, in *QueryGetPkiRevocationDistributionPointRequest, opts ...grpc.CallOption) (*QueryGetPkiRevocationDistributionPointResponse, error)
	// Queries a list of PkiRevocationDistributionPoint items.
	PkiRevocationDistributionPointAll(ctx context.Context, in *QueryAllPkiRevocationDistributionPointRequest, opts ...grpc.CallOption) (*QueryAllPkiRevocationDistributionPointResponse, error)
	// Queries a PkiRevocationDistributionPointsByIssuerSubjectKeyID by index.
	PkiRevocationDistributionPointsByIssuerSubjectKeyID(ctx context.Context, in *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest, opts ...grpc.CallOption) (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse, error)
	// Queries a list of NocCertificates items.
	NocCertificatesAll(ctx context.Context, in *QueryNocCertificatesRequest, opts ...grpc.CallOption) (*QueryNocCertificatesResponse, error)
	// Queries a NocCertificatesBySubject by index.
	NocCertificatesBySubject(ctx context.Context, in *QueryGetNocCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesBySubjectResponse, error)
	// Queries a NocCertificates by index.
	NocCertificates(ctx context.Context, in *QueryGetNocCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesResponse, error)
	// Queries a NocCertificatesByVidAndSkid by index.
	NocCertificatesByVidAndSkid(ctx context.Context, in *QueryGetNocCertificatesByVidAndSkidRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesByVidAndSkidResponse, error)
	// Queries a NocRootCertificates by index.
	NocRootCertificates(ctx context.Context, in *QueryGetNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocRootCertificatesResponse, error)
	// Queries a list of NocRootCertificates items.
	NocRootCertificatesAll(ctx context.Context, in *QueryAllNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryAllNocRootCertificatesResponse, error)
	// Queries a NocIcaCertificates by index.
	NocIcaCertificates(ctx context.Context, in *QueryGetNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocIcaCertificatesResponse, error)
	// Queries a list of NocIcaCertificates items.
	NocIcaCertificatesAll(ctx context.Context, in *QueryAllNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryAllNocIcaCertificatesResponse, error)
	// Queries a RevokedNocRootCertificates by index.
	RevokedNocRootCertificates(ctx context.Context, in *QueryGetRevokedNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedNocRootCertificatesResponse, error)
	// Queries a list of RevokedNocRootCertificates items.
	RevokedNocRootCertificatesAll(ctx context.Context, in *QueryAllRevokedNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedNocRootCertificatesResponse, error)
	// Queries a RevokedNocIcaCertificates by index.
	RevokedNocIcaCertificates(ctx context.Context, in *QueryGetRevokedNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedNocIcaCertificatesResponse, error)
	// Queries a list of RevokedNocIcaCertificates items.
	RevokedNocIcaCertificatesAll(ctx context.Context, in *QueryAllRevokedNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedNocIcaCertificatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CertificatesAll(ctx context.Context, in *QueryAllCertificatesRequest, opts ...grpc.CallOption) (*QueryAllCertificatesResponse, error) {
	out := new(QueryAllCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/CertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Certificates(ctx context.Context, in *QueryGetCertificatesRequest, opts ...grpc.CallOption) (*QueryGetCertificatesResponse, error) {
	out := new(QueryGetCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/Certificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCertificatesAll(ctx context.Context, in *QueryAllApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllApprovedCertificatesResponse, error) {
	out := new(QueryAllApprovedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCertificatesBySubject(ctx context.Context, in *QueryGetApprovedCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesBySubjectResponse, error) {
	out := new(QueryGetApprovedCertificatesBySubjectResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedCertificates(ctx context.Context, in *QueryGetApprovedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedCertificatesResponse, error) {
	out := new(QueryGetApprovedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificate(ctx context.Context, in *QueryGetProposedCertificateRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateResponse, error) {
	out := new(QueryGetProposedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateAll(ctx context.Context, in *QueryAllProposedCertificateRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateResponse, error) {
	out := new(QueryAllProposedCertificateResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChildCertificates(ctx context.Context, in *QueryGetChildCertificatesRequest, opts ...grpc.CallOption) (*QueryGetChildCertificatesResponse, error) {
	out := new(QueryGetChildCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ChildCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateRevocation(ctx context.Context, in *QueryGetProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryGetProposedCertificateRevocationResponse, error) {
	out := new(QueryGetProposedCertificateRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedCertificateRevocationAll(ctx context.Context, in *QueryAllProposedCertificateRevocationRequest, opts ...grpc.CallOption) (*QueryAllProposedCertificateRevocationResponse, error) {
	out := new(QueryAllProposedCertificateRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedCertificates(ctx context.Context, in *QueryGetRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedCertificatesResponse, error) {
	out := new(QueryGetRevokedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedCertificatesAll(ctx context.Context, in *QueryAllRevokedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedCertificatesResponse, error) {
	out := new(QueryAllRevokedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovedRootCertificates(ctx context.Context, in *QueryGetApprovedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetApprovedRootCertificatesResponse, error) {
	out := new(QueryGetApprovedRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedRootCertificates(ctx context.Context, in *QueryGetRevokedRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedRootCertificatesResponse, error) {
	out := new(QueryGetRevokedRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedCertificate(ctx context.Context, in *QueryGetRejectedCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRejectedCertificatesResponse, error) {
	out := new(QueryGetRejectedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedCertificateAll(ctx context.Context, in *QueryAllRejectedCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRejectedCertificatesResponse, error) {
	out := new(QueryAllRejectedCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PkiRevocationDistributionPoint(ctx context.Context, in *QueryGetPkiRevocationDistributionPointRequest, opts ...grpc.CallOption) (*QueryGetPkiRevocationDistributionPointResponse, error) {
	out := new(QueryGetPkiRevocationDistributionPointResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PkiRevocationDistributionPointAll(ctx context.Context, in *QueryAllPkiRevocationDistributionPointRequest, opts ...grpc.CallOption) (*QueryAllPkiRevocationDistributionPointResponse, error) {
	out := new(QueryAllPkiRevocationDistributionPointResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPointAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PkiRevocationDistributionPointsByIssuerSubjectKeyID(ctx context.Context, in *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest, opts ...grpc.CallOption) (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse, error) {
	out := new(QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPointsByIssuerSubjectKeyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocCertificatesAll(ctx context.Context, in *QueryNocCertificatesRequest, opts ...grpc.CallOption) (*QueryNocCertificatesResponse, error) {
	out := new(QueryNocCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocCertificatesBySubject(ctx context.Context, in *QueryGetNocCertificatesBySubjectRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesBySubjectResponse, error) {
	out := new(QueryGetNocCertificatesBySubjectResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocCertificates(ctx context.Context, in *QueryGetNocCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesResponse, error) {
	out := new(QueryGetNocCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocCertificatesByVidAndSkid(ctx context.Context, in *QueryGetNocCertificatesByVidAndSkidRequest, opts ...grpc.CallOption) (*QueryGetNocCertificatesByVidAndSkidResponse, error) {
	out := new(QueryGetNocCertificatesByVidAndSkidResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesByVidAndSkid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocRootCertificates(ctx context.Context, in *QueryGetNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocRootCertificatesResponse, error) {
	out := new(QueryGetNocRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocRootCertificatesAll(ctx context.Context, in *QueryAllNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryAllNocRootCertificatesResponse, error) {
	out := new(QueryAllNocRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocRootCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocIcaCertificates(ctx context.Context, in *QueryGetNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryGetNocIcaCertificatesResponse, error) {
	out := new(QueryGetNocIcaCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocIcaCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NocIcaCertificatesAll(ctx context.Context, in *QueryAllNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryAllNocIcaCertificatesResponse, error) {
	out := new(QueryAllNocIcaCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/NocIcaCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedNocRootCertificates(ctx context.Context, in *QueryGetRevokedNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedNocRootCertificatesResponse, error) {
	out := new(QueryGetRevokedNocRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocRootCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedNocRootCertificatesAll(ctx context.Context, in *QueryAllRevokedNocRootCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedNocRootCertificatesResponse, error) {
	out := new(QueryAllRevokedNocRootCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocRootCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedNocIcaCertificates(ctx context.Context, in *QueryGetRevokedNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryGetRevokedNocIcaCertificatesResponse, error) {
	out := new(QueryGetRevokedNocIcaCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocIcaCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedNocIcaCertificatesAll(ctx context.Context, in *QueryAllRevokedNocIcaCertificatesRequest, opts ...grpc.CallOption) (*QueryAllRevokedNocIcaCertificatesResponse, error) {
	out := new(QueryAllRevokedNocIcaCertificatesResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocIcaCertificatesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of Certificates items.
	CertificatesAll(context.Context, *QueryAllCertificatesRequest) (*QueryAllCertificatesResponse, error)
	// Queries a Certificates by index.
	Certificates(context.Context, *QueryGetCertificatesRequest) (*QueryGetCertificatesResponse, error)
	// Queries a list of ApprovedCertificates items.
	ApprovedCertificatesAll(context.Context, *QueryAllApprovedCertificatesRequest) (*QueryAllApprovedCertificatesResponse, error)
	// Queries a ApprovedCertificatesBySubject by index.
	ApprovedCertificatesBySubject(context.Context, *QueryGetApprovedCertificatesBySubjectRequest) (*QueryGetApprovedCertificatesBySubjectResponse, error)
	// Queries a ApprovedCertificates by index.
	ApprovedCertificates(context.Context, *QueryGetApprovedCertificatesRequest) (*QueryGetApprovedCertificatesResponse, error)
	// Queries a ProposedCertificate by index.
	ProposedCertificate(context.Context, *QueryGetProposedCertificateRequest) (*QueryGetProposedCertificateResponse, error)
	// Queries a list of ProposedCertificate items.
	ProposedCertificateAll(context.Context, *QueryAllProposedCertificateRequest) (*QueryAllProposedCertificateResponse, error)
	// Queries a ChildCertificates by index.
	ChildCertificates(context.Context, *QueryGetChildCertificatesRequest) (*QueryGetChildCertificatesResponse, error)
	// Queries a ProposedCertificateRevocation by index.
	ProposedCertificateRevocation(context.Context, *QueryGetProposedCertificateRevocationRequest) (*QueryGetProposedCertificateRevocationResponse, error)
	// Queries a list of ProposedCertificateRevocation items.
	ProposedCertificateRevocationAll(context.Context, *QueryAllProposedCertificateRevocationRequest) (*QueryAllProposedCertificateRevocationResponse, error)
	// Queries a RevokedCertificates by index.
	RevokedCertificates(context.Context, *QueryGetRevokedCertificatesRequest) (*QueryGetRevokedCertificatesResponse, error)
	// Queries a list of RevokedCertificates items.
	RevokedCertificatesAll(context.Context, *QueryAllRevokedCertificatesRequest) (*QueryAllRevokedCertificatesResponse, error)
	// Queries a ApprovedRootCertificates by index.
	ApprovedRootCertificates(context.Context, *QueryGetApprovedRootCertificatesRequest) (*QueryGetApprovedRootCertificatesResponse, error)
	// Queries a RevokedRootCertificates by index.
	RevokedRootCertificates(context.Context, *QueryGetRevokedRootCertificatesRequest) (*QueryGetRevokedRootCertificatesResponse, error)
	// Queries a RejectedCertificate by index.
	RejectedCertificate(context.Context, *QueryGetRejectedCertificatesRequest) (*QueryGetRejectedCertificatesResponse, error)
	// Queries a list of RejectedCertificate items.
	RejectedCertificateAll(context.Context, *QueryAllRejectedCertificatesRequest) (*QueryAllRejectedCertificatesResponse, error)
	// Queries a PkiRevocationDistributionPoint by index.
	PkiRevocationDistributionPoint(context.Context, *QueryGetPkiRevocationDistributionPointRequest) (*QueryGetPkiRevocationDistributionPointResponse, error)
	// Queries a list of PkiRevocationDistributionPoint items.
	PkiRevocationDistributionPointAll(context.Context, *QueryAllPkiRevocationDistributionPointRequest) (*QueryAllPkiRevocationDistributionPointResponse, error)
	// Queries a PkiRevocationDistributionPointsByIssuerSubjectKeyID by index.
	PkiRevocationDistributionPointsByIssuerSubjectKeyID(context.Context, *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse, error)
	// Queries a list of NocCertificates items.
	NocCertificatesAll(context.Context, *QueryNocCertificatesRequest) (*QueryNocCertificatesResponse, error)
	// Queries a NocCertificatesBySubject by index.
	NocCertificatesBySubject(context.Context, *QueryGetNocCertificatesBySubjectRequest) (*QueryGetNocCertificatesBySubjectResponse, error)
	// Queries a NocCertificates by index.
	NocCertificates(context.Context, *QueryGetNocCertificatesRequest) (*QueryGetNocCertificatesResponse, error)
	// Queries a NocCertificatesByVidAndSkid by index.
	NocCertificatesByVidAndSkid(context.Context, *QueryGetNocCertificatesByVidAndSkidRequest) (*QueryGetNocCertificatesByVidAndSkidResponse, error)
	// Queries a NocRootCertificates by index.
	NocRootCertificates(context.Context, *QueryGetNocRootCertificatesRequest) (*QueryGetNocRootCertificatesResponse, error)
	// Queries a list of NocRootCertificates items.
	NocRootCertificatesAll(context.Context, *QueryAllNocRootCertificatesRequest) (*QueryAllNocRootCertificatesResponse, error)
	// Queries a NocIcaCertificates by index.
	NocIcaCertificates(context.Context, *QueryGetNocIcaCertificatesRequest) (*QueryGetNocIcaCertificatesResponse, error)
	// Queries a list of NocIcaCertificates items.
	NocIcaCertificatesAll(context.Context, *QueryAllNocIcaCertificatesRequest) (*QueryAllNocIcaCertificatesResponse, error)
	// Queries a RevokedNocRootCertificates by index.
	RevokedNocRootCertificates(context.Context, *QueryGetRevokedNocRootCertificatesRequest) (*QueryGetRevokedNocRootCertificatesResponse, error)
	// Queries a list of RevokedNocRootCertificates items.
	RevokedNocRootCertificatesAll(context.Context, *QueryAllRevokedNocRootCertificatesRequest) (*QueryAllRevokedNocRootCertificatesResponse, error)
	// Queries a RevokedNocIcaCertificates by index.
	RevokedNocIcaCertificates(context.Context, *QueryGetRevokedNocIcaCertificatesRequest) (*QueryGetRevokedNocIcaCertificatesResponse, error)
	// Queries a list of RevokedNocIcaCertificates items.
	RevokedNocIcaCertificatesAll(context.Context, *QueryAllRevokedNocIcaCertificatesRequest) (*QueryAllRevokedNocIcaCertificatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CertificatesAll(ctx context.Context, req *QueryAllCertificatesRequest) (*QueryAllCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificatesAll not implemented")
}
func (*UnimplementedQueryServer) Certificates(ctx context.Context, req *QueryGetCertificatesRequest) (*QueryGetCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificates not implemented")
}
func (*UnimplementedQueryServer) ApprovedCertificatesAll(ctx context.Context, req *QueryAllApprovedCertificatesRequest) (*QueryAllApprovedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) ApprovedCertificatesBySubject(ctx context.Context, req *QueryGetApprovedCertificatesBySubjectRequest) (*QueryGetApprovedCertificatesBySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificatesBySubject not implemented")
}
func (*UnimplementedQueryServer) ApprovedCertificates(ctx context.Context, req *QueryGetApprovedCertificatesRequest) (*QueryGetApprovedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedCertificates not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificate(ctx context.Context, req *QueryGetProposedCertificateRequest) (*QueryGetProposedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificate not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateAll(ctx context.Context, req *QueryAllProposedCertificateRequest) (*QueryAllProposedCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateAll not implemented")
}
func (*UnimplementedQueryServer) ChildCertificates(ctx context.Context, req *QueryGetChildCertificatesRequest) (*QueryGetChildCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildCertificates not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateRevocation(ctx context.Context, req *QueryGetProposedCertificateRevocationRequest) (*QueryGetProposedCertificateRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateRevocation not implemented")
}
func (*UnimplementedQueryServer) ProposedCertificateRevocationAll(ctx context.Context, req *QueryAllProposedCertificateRevocationRequest) (*QueryAllProposedCertificateRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedCertificateRevocationAll not implemented")
}
func (*UnimplementedQueryServer) RevokedCertificates(ctx context.Context, req *QueryGetRevokedCertificatesRequest) (*QueryGetRevokedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedCertificatesAll(ctx context.Context, req *QueryAllRevokedCertificatesRequest) (*QueryAllRevokedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) ApprovedRootCertificates(ctx context.Context, req *QueryGetApprovedRootCertificatesRequest) (*QueryGetApprovedRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovedRootCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedRootCertificates(ctx context.Context, req *QueryGetRevokedRootCertificatesRequest) (*QueryGetRevokedRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedRootCertificates not implemented")
}
func (*UnimplementedQueryServer) RejectedCertificate(ctx context.Context, req *QueryGetRejectedCertificatesRequest) (*QueryGetRejectedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedCertificate not implemented")
}
func (*UnimplementedQueryServer) RejectedCertificateAll(ctx context.Context, req *QueryAllRejectedCertificatesRequest) (*QueryAllRejectedCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedCertificateAll not implemented")
}
func (*UnimplementedQueryServer) PkiRevocationDistributionPoint(ctx context.Context, req *QueryGetPkiRevocationDistributionPointRequest) (*QueryGetPkiRevocationDistributionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PkiRevocationDistributionPoint not implemented")
}
func (*UnimplementedQueryServer) PkiRevocationDistributionPointAll(ctx context.Context, req *QueryAllPkiRevocationDistributionPointRequest) (*QueryAllPkiRevocationDistributionPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PkiRevocationDistributionPointAll not implemented")
}
func (*UnimplementedQueryServer) PkiRevocationDistributionPointsByIssuerSubjectKeyID(ctx context.Context, req *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) (*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PkiRevocationDistributionPointsByIssuerSubjectKeyID not implemented")
}
func (*UnimplementedQueryServer) NocCertificatesAll(ctx context.Context, req *QueryNocCertificatesRequest) (*QueryNocCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) NocCertificatesBySubject(ctx context.Context, req *QueryGetNocCertificatesBySubjectRequest) (*QueryGetNocCertificatesBySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocCertificatesBySubject not implemented")
}
func (*UnimplementedQueryServer) NocCertificates(ctx context.Context, req *QueryGetNocCertificatesRequest) (*QueryGetNocCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocCertificates not implemented")
}
func (*UnimplementedQueryServer) NocCertificatesByVidAndSkid(ctx context.Context, req *QueryGetNocCertificatesByVidAndSkidRequest) (*QueryGetNocCertificatesByVidAndSkidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocCertificatesByVidAndSkid not implemented")
}
func (*UnimplementedQueryServer) NocRootCertificates(ctx context.Context, req *QueryGetNocRootCertificatesRequest) (*QueryGetNocRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocRootCertificates not implemented")
}
func (*UnimplementedQueryServer) NocRootCertificatesAll(ctx context.Context, req *QueryAllNocRootCertificatesRequest) (*QueryAllNocRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocRootCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) NocIcaCertificates(ctx context.Context, req *QueryGetNocIcaCertificatesRequest) (*QueryGetNocIcaCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocIcaCertificates not implemented")
}
func (*UnimplementedQueryServer) NocIcaCertificatesAll(ctx context.Context, req *QueryAllNocIcaCertificatesRequest) (*QueryAllNocIcaCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NocIcaCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) RevokedNocRootCertificates(ctx context.Context, req *QueryGetRevokedNocRootCertificatesRequest) (*QueryGetRevokedNocRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedNocRootCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedNocRootCertificatesAll(ctx context.Context, req *QueryAllRevokedNocRootCertificatesRequest) (*QueryAllRevokedNocRootCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedNocRootCertificatesAll not implemented")
}
func (*UnimplementedQueryServer) RevokedNocIcaCertificates(ctx context.Context, req *QueryGetRevokedNocIcaCertificatesRequest) (*QueryGetRevokedNocIcaCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedNocIcaCertificates not implemented")
}
func (*UnimplementedQueryServer) RevokedNocIcaCertificatesAll(ctx context.Context, req *QueryAllRevokedNocIcaCertificatesRequest) (*QueryAllRevokedNocIcaCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedNocIcaCertificatesAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/CertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CertificatesAll(ctx, req.(*QueryAllCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Certificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Certificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/Certificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Certificates(ctx, req.(*QueryGetCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApprovedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificatesAll(ctx, req.(*QueryAllApprovedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCertificatesBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedCertificatesBySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificatesBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificatesBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificatesBySubject(ctx, req.(*QueryGetApprovedCertificatesBySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedCertificates(ctx, req.(*QueryGetApprovedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificate(ctx, req.(*QueryGetProposedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposedCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateAll(ctx, req.(*QueryAllProposedCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChildCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChildCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChildCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ChildCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChildCertificates(ctx, req.(*QueryGetChildCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateRevocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposedCertificateRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateRevocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateRevocation(ctx, req.(*QueryGetProposedCertificateRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedCertificateRevocationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposedCertificateRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedCertificateRevocationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ProposedCertificateRevocationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedCertificateRevocationAll(ctx, req.(*QueryAllProposedCertificateRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedCertificates(ctx, req.(*QueryGetRevokedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedCertificatesAll(ctx, req.(*QueryAllRevokedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovedRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovedRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/ApprovedRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovedRootCertificates(ctx, req.(*QueryGetApprovedRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedRootCertificates(ctx, req.(*QueryGetRevokedRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRejectedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedCertificate(ctx, req.(*QueryGetRejectedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedCertificateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRejectedCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedCertificateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RejectedCertificateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedCertificateAll(ctx, req.(*QueryAllRejectedCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PkiRevocationDistributionPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPkiRevocationDistributionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PkiRevocationDistributionPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PkiRevocationDistributionPoint(ctx, req.(*QueryGetPkiRevocationDistributionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PkiRevocationDistributionPointAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPkiRevocationDistributionPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PkiRevocationDistributionPointAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPointAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PkiRevocationDistributionPointAll(ctx, req.(*QueryAllPkiRevocationDistributionPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PkiRevocationDistributionPointsByIssuerSubjectKeyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PkiRevocationDistributionPointsByIssuerSubjectKeyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/PkiRevocationDistributionPointsByIssuerSubjectKeyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PkiRevocationDistributionPointsByIssuerSubjectKeyID(ctx, req.(*QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNocCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocCertificatesAll(ctx, req.(*QueryNocCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocCertificatesBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNocCertificatesBySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocCertificatesBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocCertificatesBySubject(ctx, req.(*QueryGetNocCertificatesBySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNocCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocCertificates(ctx, req.(*QueryGetNocCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocCertificatesByVidAndSkid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNocCertificatesByVidAndSkidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocCertificatesByVidAndSkid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocCertificatesByVidAndSkid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocCertificatesByVidAndSkid(ctx, req.(*QueryGetNocCertificatesByVidAndSkidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNocRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocRootCertificates(ctx, req.(*QueryGetNocRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocRootCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNocRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocRootCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocRootCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocRootCertificatesAll(ctx, req.(*QueryAllNocRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocIcaCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNocIcaCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocIcaCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocIcaCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocIcaCertificates(ctx, req.(*QueryGetNocIcaCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NocIcaCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNocIcaCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NocIcaCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/NocIcaCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NocIcaCertificatesAll(ctx, req.(*QueryAllNocIcaCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedNocRootCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedNocRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedNocRootCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocRootCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedNocRootCertificates(ctx, req.(*QueryGetRevokedNocRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedNocRootCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokedNocRootCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedNocRootCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocRootCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedNocRootCertificatesAll(ctx, req.(*QueryAllRevokedNocRootCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedNocIcaCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedNocIcaCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedNocIcaCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocIcaCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedNocIcaCertificates(ctx, req.(*QueryGetRevokedNocIcaCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedNocIcaCertificatesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokedNocIcaCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedNocIcaCertificatesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.pki.Query/RevokedNocIcaCertificatesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedNocIcaCertificatesAll(ctx, req.(*QueryAllRevokedNocIcaCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zigbeealliance.distributedcomplianceledger.pki.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CertificatesAll",
			Handler:    _Query_CertificatesAll_Handler,
		},
		{
			MethodName: "Certificates",
			Handler:    _Query_Certificates_Handler,
		},
		{
			MethodName: "ApprovedCertificatesAll",
			Handler:    _Query_ApprovedCertificatesAll_Handler,
		},
		{
			MethodName: "ApprovedCertificatesBySubject",
			Handler:    _Query_ApprovedCertificatesBySubject_Handler,
		},
		{
			MethodName: "ApprovedCertificates",
			Handler:    _Query_ApprovedCertificates_Handler,
		},
		{
			MethodName: "ProposedCertificate",
			Handler:    _Query_ProposedCertificate_Handler,
		},
		{
			MethodName: "ProposedCertificateAll",
			Handler:    _Query_ProposedCertificateAll_Handler,
		},
		{
			MethodName: "ChildCertificates",
			Handler:    _Query_ChildCertificates_Handler,
		},
		{
			MethodName: "ProposedCertificateRevocation",
			Handler:    _Query_ProposedCertificateRevocation_Handler,
		},
		{
			MethodName: "ProposedCertificateRevocationAll",
			Handler:    _Query_ProposedCertificateRevocationAll_Handler,
		},
		{
			MethodName: "RevokedCertificates",
			Handler:    _Query_RevokedCertificates_Handler,
		},
		{
			MethodName: "RevokedCertificatesAll",
			Handler:    _Query_RevokedCertificatesAll_Handler,
		},
		{
			MethodName: "ApprovedRootCertificates",
			Handler:    _Query_ApprovedRootCertificates_Handler,
		},
		{
			MethodName: "RevokedRootCertificates",
			Handler:    _Query_RevokedRootCertificates_Handler,
		},
		{
			MethodName: "RejectedCertificate",
			Handler:    _Query_RejectedCertificate_Handler,
		},
		{
			MethodName: "RejectedCertificateAll",
			Handler:    _Query_RejectedCertificateAll_Handler,
		},
		{
			MethodName: "PkiRevocationDistributionPoint",
			Handler:    _Query_PkiRevocationDistributionPoint_Handler,
		},
		{
			MethodName: "PkiRevocationDistributionPointAll",
			Handler:    _Query_PkiRevocationDistributionPointAll_Handler,
		},
		{
			MethodName: "PkiRevocationDistributionPointsByIssuerSubjectKeyID",
			Handler:    _Query_PkiRevocationDistributionPointsByIssuerSubjectKeyID_Handler,
		},
		{
			MethodName: "NocCertificatesAll",
			Handler:    _Query_NocCertificatesAll_Handler,
		},
		{
			MethodName: "NocCertificatesBySubject",
			Handler:    _Query_NocCertificatesBySubject_Handler,
		},
		{
			MethodName: "NocCertificates",
			Handler:    _Query_NocCertificates_Handler,
		},
		{
			MethodName: "NocCertificatesByVidAndSkid",
			Handler:    _Query_NocCertificatesByVidAndSkid_Handler,
		},
		{
			MethodName: "NocRootCertificates",
			Handler:    _Query_NocRootCertificates_Handler,
		},
		{
			MethodName: "NocRootCertificatesAll",
			Handler:    _Query_NocRootCertificatesAll_Handler,
		},
		{
			MethodName: "NocIcaCertificates",
			Handler:    _Query_NocIcaCertificates_Handler,
		},
		{
			MethodName: "NocIcaCertificatesAll",
			Handler:    _Query_NocIcaCertificatesAll_Handler,
		},
		{
			MethodName: "RevokedNocRootCertificates",
			Handler:    _Query_RevokedNocRootCertificates_Handler,
		},
		{
			MethodName: "RevokedNocRootCertificatesAll",
			Handler:    _Query_RevokedNocRootCertificatesAll_Handler,
		},
		{
			MethodName: "RevokedNocIcaCertificates",
			Handler:    _Query_RevokedNocIcaCertificates_Handler,
		},
		{
			MethodName: "RevokedNocIcaCertificatesAll",
			Handler:    _Query_RevokedNocIcaCertificatesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zigbeealliance/distributedcomplianceledger/pki/query.proto",
}

func (m *QueryAllCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Certificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApprovedCertificates) > 0 {
		for iNdEx := len(m.ApprovedCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovedCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProposedCertificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedCertificate) > 0 {
		for iNdEx := len(m.ProposedCertificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposedCertificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChildCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChildCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChildCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthorityKeyId) > 0 {
		i -= len(m.AuthorityKeyId)
		copy(dAtA[i:], m.AuthorityKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AuthorityKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChildCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChildCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChildCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChildCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedCertificateRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedCertificateRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedCertificateRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProposedCertificateRevocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedCertificateRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedCertificateRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedCertificateRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedCertificateRevocation) > 0 {
		for iNdEx := len(m.ProposedCertificateRevocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposedCertificateRevocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevokedCertificates) > 0 {
		for iNdEx := len(m.RevokedCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevokedCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovedCertificatesBySubject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RejectedCertificate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RejectedCertificate) > 0 {
		for iNdEx := len(m.RejectedCertificate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RejectedCertificate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPkiRevocationDistributionPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPkiRevocationDistributionPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPkiRevocationDistributionPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerSubjectKeyID) > 0 {
		i -= len(m.IssuerSubjectKeyID)
		copy(dAtA[i:], m.IssuerSubjectKeyID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerSubjectKeyID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if m.Vid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPkiRevocationDistributionPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPkiRevocationDistributionPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPkiRevocationDistributionPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PkiRevocationDistributionPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPkiRevocationDistributionPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPkiRevocationDistributionPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPkiRevocationDistributionPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPkiRevocationDistributionPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPkiRevocationDistributionPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPkiRevocationDistributionPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PkiRevocationDistributionPoint) > 0 {
		for iNdEx := len(m.PkiRevocationDistributionPoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PkiRevocationDistributionPoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerSubjectKeyID) > 0 {
		i -= len(m.IssuerSubjectKeyID)
		copy(dAtA[i:], m.IssuerSubjectKeyID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerSubjectKeyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PkiRevocationDistributionPointsByIssuerSubjectKeyID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNocRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NocRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNocRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNocRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNocRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNocRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNocRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNocRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NocRootCertificates) > 0 {
		for iNdEx := len(m.NocRootCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NocRootCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocIcaCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocIcaCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocIcaCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocIcaCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocIcaCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocIcaCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NocIcaCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNocIcaCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNocIcaCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNocIcaCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNocIcaCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNocIcaCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNocIcaCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NocIcaCertificates) > 0 {
		for iNdEx := len(m.NocIcaCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NocIcaCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedNocRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedNocRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedNocRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedNocRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedNocRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedNocRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedNocRootCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedNocRootCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedNocRootCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedNocRootCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedNocRootCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedNocRootCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedNocRootCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevokedNocRootCertificates) > 0 {
		for iNdEx := len(m.RevokedNocRootCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevokedNocRootCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedNocIcaCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedNocIcaCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedNocIcaCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedNocIcaCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedNocIcaCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedNocIcaCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedNocIcaCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevokedNocIcaCertificates) > 0 {
		for iNdEx := len(m.RevokedNocIcaCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevokedNocIcaCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Vid != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesByVidAndSkidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesByVidAndSkidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesByVidAndSkidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NocCertificatesByVidAndSkid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNocCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNocCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNocCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNocCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNocCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNocCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NocCertificates) > 0 {
		for iNdEx := len(m.NocCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NocCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesBySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesBySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesBySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesBySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesBySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesBySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NocCertificatesBySubject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNocCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNocCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNocCertificatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NocCertificates.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Certificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetApprovedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllApprovedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApprovedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovedCertificates) > 0 {
		for _, e := range m.ApprovedCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposedCertificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProposedCertificateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposedCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposedCertificate) > 0 {
		for _, e := range m.ProposedCertificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChildCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AuthorityKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChildCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChildCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProposedCertificateRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedCertificateRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposedCertificateRevocation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProposedCertificateRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposedCertificateRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposedCertificateRevocation) > 0 {
		for _, e := range m.ProposedCertificateRevocation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRevokedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RevokedCertificates) > 0 {
		for _, e := range m.RevokedCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetApprovedRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRevokedRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRevokedRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetApprovedCertificatesBySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedCertificatesBySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovedCertificatesBySubject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRejectedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RejectedCertificate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRejectedCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRejectedCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RejectedCertificate) > 0 {
		for _, e := range m.RejectedCertificate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPkiRevocationDistributionPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovQuery(uint64(m.Vid))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IssuerSubjectKeyID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPkiRevocationDistributionPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PkiRevocationDistributionPoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPkiRevocationDistributionPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPkiRevocationDistributionPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PkiRevocationDistributionPoint) > 0 {
		for _, e := range m.PkiRevocationDistributionPoint {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerSubjectKeyID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PkiRevocationDistributionPointsByIssuerSubjectKeyID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNocRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovQuery(uint64(m.Vid))
	}
	return n
}

func (m *QueryGetNocRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NocRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNocRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNocRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NocRootCertificates) > 0 {
		for _, e := range m.NocRootCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocIcaCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovQuery(uint64(m.Vid))
	}
	return n
}

func (m *QueryGetNocIcaCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NocIcaCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNocIcaCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNocIcaCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NocIcaCertificates) > 0 {
		for _, e := range m.NocIcaCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedNocRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedNocRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedNocRootCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRevokedNocRootCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokedNocRootCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RevokedNocRootCertificates) > 0 {
		for _, e := range m.RevokedNocRootCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedNocIcaCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedNocIcaCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedNocIcaCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRevokedNocIcaCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokedNocIcaCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RevokedNocIcaCertificates) > 0 {
		for _, e := range m.RevokedNocIcaCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocCertificatesByVidAndSkidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovQuery(uint64(m.Vid))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocCertificatesByVidAndSkidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NocCertificatesByVidAndSkid.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNocCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNocCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NocCertificates) > 0 {
		for _, e := range m.NocCertificates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocCertificatesBySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocCertificatesBySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NocCertificatesBySubject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNocCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNocCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NocCertificates.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, AllCertificates{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Certificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovedCertificates = append(m.ApprovedCertificates, ApprovedCertificates{})
			if err := m.ApprovedCertificates[len(m.ApprovedCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposedCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedCertificate = append(m.ProposedCertificate, ProposedCertificate{})
			if err := m.ProposedCertificate[len(m.ProposedCertificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChildCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChildCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChildCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorityKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChildCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChildCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChildCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChildCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedCertificateRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedCertificateRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificateRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposedCertificateRevocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedCertificateRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedCertificateRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedCertificateRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedCertificateRevocation = append(m.ProposedCertificateRevocation, ProposedCertificateRevocation{})
			if err := m.ProposedCertificateRevocation[len(m.ProposedCertificateRevocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedCertificates = append(m.RevokedCertificates, RevokedCertificates{})
			if err := m.RevokedCertificates[len(m.RevokedCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesBySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedCertificatesBySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedCertificatesBySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedCertificatesBySubject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovedCertificatesBySubject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RejectedCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectedCertificate = append(m.RejectedCertificate, RejectedCertificate{})
			if err := m.RejectedCertificate[len(m.RejectedCertificate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPkiRevocationDistributionPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerSubjectKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerSubjectKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPkiRevocationDistributionPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiRevocationDistributionPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PkiRevocationDistributionPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPkiRevocationDistributionPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPkiRevocationDistributionPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPkiRevocationDistributionPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPkiRevocationDistributionPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPkiRevocationDistributionPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPkiRevocationDistributionPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiRevocationDistributionPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkiRevocationDistributionPoint = append(m.PkiRevocationDistributionPoint, PkiRevocationDistributionPoint{})
			if err := m.PkiRevocationDistributionPoint[len(m.PkiRevocationDistributionPoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerSubjectKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerSubjectKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPkiRevocationDistributionPointsByIssuerSubjectKeyIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkiRevocationDistributionPointsByIssuerSubjectKeyID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PkiRevocationDistributionPointsByIssuerSubjectKeyID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NocRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNocRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNocRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNocRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNocRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNocRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNocRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NocRootCertificates = append(m.NocRootCertificates, NocRootCertificates{})
			if err := m.NocRootCertificates[len(m.NocRootCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocIcaCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocIcaCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocIcaCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocIcaCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocIcaCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocIcaCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocIcaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NocIcaCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNocIcaCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNocIcaCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNocIcaCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNocIcaCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNocIcaCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNocIcaCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocIcaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NocIcaCertificates = append(m.NocIcaCertificates, NocIcaCertificates{})
			if err := m.NocIcaCertificates[len(m.NocIcaCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedNocRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedNocRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedNocRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedNocRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedNocRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedNocRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedNocRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedNocRootCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedNocRootCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedNocRootCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedNocRootCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedNocRootCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedNocRootCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedNocRootCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedNocRootCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedNocRootCertificates = append(m.RevokedNocRootCertificates, RevokedNocRootCertificates{})
			if err := m.RevokedNocRootCertificates[len(m.RevokedNocRootCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedNocIcaCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedNocIcaCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedNocIcaCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedNocIcaCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedNocIcaCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedNocIcaCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedNocIcaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedNocIcaCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedNocIcaCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedNocIcaCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedNocIcaCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedNocIcaCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedNocIcaCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedNocIcaCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedNocIcaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedNocIcaCertificates = append(m.RevokedNocIcaCertificates, RevokedNocIcaCertificates{})
			if err := m.RevokedNocIcaCertificates[len(m.RevokedNocIcaCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesByVidAndSkidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesByVidAndSkidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesByVidAndSkidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesByVidAndSkidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesByVidAndSkidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesByVidAndSkidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocCertificatesByVidAndSkid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NocCertificatesByVidAndSkid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNocCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNocCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNocCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNocCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNocCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNocCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NocCertificates = append(m.NocCertificates, NocCertificates{})
			if err := m.NocCertificates[len(m.NocCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesBySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesBySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesBySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesBySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesBySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesBySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocCertificatesBySubject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NocCertificatesBySubject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNocCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNocCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNocCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NocCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NocCertificates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
