// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/types/unique_certificate.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UniqueCertificate struct {
	Issuer       string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	Present      bool   `protobuf:"varint,3,opt,name=present,proto3" json:"present,omitempty"`
}

func (m *UniqueCertificate) Reset()         { *m = UniqueCertificate{} }
func (m *UniqueCertificate) String() string { return proto.CompactTextString(m) }
func (*UniqueCertificate) ProtoMessage()    {}
func (*UniqueCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8d0a359373833f4, []int{0}
}
func (m *UniqueCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueCertificate.Merge(m, src)
}
func (m *UniqueCertificate) XXX_Size() int {
	return m.Size()
}
func (m *UniqueCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueCertificate proto.InternalMessageInfo

func (m *UniqueCertificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *UniqueCertificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *UniqueCertificate) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func init() {
	proto.RegisterType((*UniqueCertificate)(nil), "pki.types.UniqueCertificate")
}

func init() {
	proto.RegisterFile("pki/types/unique_certificate.proto", fileDescriptor_e8d0a359373833f4)
}

var fileDescriptor_e8d0a359373833f4 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x46, 0x63, 0x90, 0x0a, 0xb5, 0x58, 0xc8, 0x80, 0x32, 0x59, 0x55, 0xa6, 0x2e, 0x89, 0x07,
	0xde, 0x00, 0x98, 0x19, 0x2a, 0xb1, 0x30, 0x80, 0x62, 0xe7, 0x12, 0xae, 0x9a, 0xc4, 0xe6, 0xfa,
	0x5a, 0x02, 0x9e, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x32, 0x7f, 0xea, 0xf8,
	0x9d, 0xef, 0x2c, 0x47, 0x96, 0x7e, 0x8b, 0x9a, 0x5f, 0x3c, 0x04, 0x1d, 0x47, 0x7c, 0x8a, 0x70,
	0x6f, 0x81, 0x18, 0x1f, 0xd0, 0x36, 0x0c, 0xb5, 0x27, 0xc7, 0x2e, 0x5f, 0xfa, 0x2d, 0xd6, 0xc9,
	0x29, 0x51, 0x9e, 0xde, 0x24, 0xed, 0xf2, 0xdf, 0xca, 0xcf, 0xe4, 0x02, 0x43, 0x88, 0x40, 0x85,
	0x58, 0x89, 0xf5, 0x72, 0xf3, 0xb3, 0xf2, 0x52, 0x9e, 0x04, 0x20, 0x6c, 0xfa, 0xeb, 0x38, 0x18,
	0xa0, 0xe2, 0x20, 0xbd, 0x7b, 0x2c, 0x2f, 0xe4, 0x91, 0x27, 0x08, 0x30, 0x72, 0x71, 0xb8, 0x12,
	0xeb, 0xe3, 0xcd, 0xef, 0xbc, 0xb8, 0x7b, 0x9f, 0x94, 0xd8, 0x4d, 0x4a, 0x7c, 0x4e, 0x4a, 0xbc,
	0xcd, 0x2a, 0xdb, 0xcd, 0x2a, 0xfb, 0x98, 0x55, 0x76, 0x7b, 0xd5, 0x21, 0x3f, 0x46, 0x53, 0x5b,
	0x37, 0xe8, 0x57, 0xec, 0x0c, 0x40, 0xd5, 0xf4, 0x3d, 0x36, 0xa3, 0x05, 0xdd, 0x62, 0x60, 0x42,
	0x13, 0x19, 0xda, 0xca, 0xba, 0xc1, 0x7f, 0xe3, 0xaa, 0x87, 0xb6, 0x03, 0xd2, 0xcf, 0xfa, 0x2f,
	0xd7, 0x2c, 0x52, 0xdc, 0xf9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x58, 0x12, 0xd8, 0x02,
	0x01, 0x00, 0x00,
}

func (m *UniqueCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Present {
		i--
		if m.Present {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.SerialNumber) > 0 {
		i -= len(m.SerialNumber)
		copy(dAtA[i:], m.SerialNumber)
		i = encodeVarintUniqueCertificate(dAtA, i, uint64(len(m.SerialNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintUniqueCertificate(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUniqueCertificate(dAtA []byte, offset int, v uint64) int {
	offset -= sovUniqueCertificate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UniqueCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovUniqueCertificate(uint64(l))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovUniqueCertificate(uint64(l))
	}
	if m.Present {
		n += 2
	}
	return n
}

func sovUniqueCertificate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUniqueCertificate(x uint64) (n int) {
	return sovUniqueCertificate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UniqueCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUniqueCertificate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniqueCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniqueCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniqueCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniqueCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUniqueCertificate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUniqueCertificate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Present", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUniqueCertificate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Present = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUniqueCertificate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUniqueCertificate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUniqueCertificate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUniqueCertificate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniqueCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUniqueCertificate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUniqueCertificate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUniqueCertificate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUniqueCertificate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUniqueCertificate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUniqueCertificate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUniqueCertificate = fmt.Errorf("proto: unexpected end of group")
)
