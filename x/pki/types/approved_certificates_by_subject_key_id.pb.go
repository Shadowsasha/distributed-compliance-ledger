// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pki/approved_certificates_by_subject_key_id.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApprovedCertificatesBySubjectKeyId struct {
	SubjectKeyId string         `protobuf:"bytes,1,opt,name=subjectKeyId,proto3" json:"subjectKeyId,omitempty"`
	Certs        []*Certificate `protobuf:"bytes,2,rep,name=certs,proto3" json:"certs,omitempty"`
}

func (m *ApprovedCertificatesBySubjectKeyId) Reset()         { *m = ApprovedCertificatesBySubjectKeyId{} }
func (m *ApprovedCertificatesBySubjectKeyId) String() string { return proto.CompactTextString(m) }
func (*ApprovedCertificatesBySubjectKeyId) ProtoMessage()    {}
func (*ApprovedCertificatesBySubjectKeyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c174758e89e6673, []int{0}
}
func (m *ApprovedCertificatesBySubjectKeyId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovedCertificatesBySubjectKeyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovedCertificatesBySubjectKeyId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovedCertificatesBySubjectKeyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovedCertificatesBySubjectKeyId.Merge(m, src)
}
func (m *ApprovedCertificatesBySubjectKeyId) XXX_Size() int {
	return m.Size()
}
func (m *ApprovedCertificatesBySubjectKeyId) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovedCertificatesBySubjectKeyId.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovedCertificatesBySubjectKeyId proto.InternalMessageInfo

func (m *ApprovedCertificatesBySubjectKeyId) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *ApprovedCertificatesBySubjectKeyId) GetCerts() []*Certificate {
	if m != nil {
		return m.Certs
	}
	return nil
}

func init() {
	proto.RegisterType((*ApprovedCertificatesBySubjectKeyId)(nil), "zigbeealliance.distributedcomplianceledger.pki.ApprovedCertificatesBySubjectKeyId")
}

func init() {
	proto.RegisterFile("pki/approved_certificates_by_subject_key_id.proto", fileDescriptor_3c174758e89e6673)
}

var fileDescriptor_3c174758e89e6673 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd0, 0x31, 0x4b, 0xc4, 0x30,
	0x18, 0xc6, 0xf1, 0x46, 0x51, 0xb0, 0x3a, 0x15, 0x84, 0xc3, 0x21, 0x1c, 0x9d, 0x6e, 0x69, 0x8a,
	0x3a, 0x3a, 0x79, 0xba, 0x88, 0x93, 0xe7, 0xe6, 0x60, 0x69, 0x92, 0xd7, 0xfa, 0xda, 0x9e, 0x0d,
	0x49, 0x2a, 0xc6, 0x4f, 0xe1, 0xee, 0x17, 0x72, 0xbc, 0xd1, 0x51, 0xda, 0x2f, 0x22, 0x35, 0x8a,
	0x71, 0xbc, 0x31, 0xef, 0xf0, 0xff, 0x85, 0x27, 0x3e, 0x54, 0x35, 0xe6, 0xa5, 0x52, 0xba, 0x7d,
	0x02, 0x59, 0x08, 0xd0, 0x16, 0xef, 0x50, 0x94, 0x16, 0x4c, 0xc1, 0x5d, 0x61, 0x3a, 0xfe, 0x00,
	0xc2, 0x16, 0x35, 0xb8, 0x02, 0x25, 0x53, 0xba, 0xb5, 0x6d, 0xc2, 0x5e, 0xb0, 0xe2, 0x00, 0x65,
	0xd3, 0x60, 0xf9, 0x28, 0x80, 0x49, 0x34, 0x56, 0x23, 0xef, 0x2c, 0x48, 0xd1, 0x2e, 0x95, 0xbf,
	0x36, 0x20, 0x2b, 0xd0, 0x4c, 0xd5, 0x78, 0xb0, 0x3f, 0x12, 0x41, 0xd9, 0x67, 0xd2, 0x37, 0x12,
	0xa7, 0xa7, 0x3f, 0xf0, 0x59, 0xe0, 0xce, 0xdd, 0xb5, 0x57, 0x2f, 0xc1, 0x5d, 0xc8, 0x24, 0x8d,
	0xf7, 0x4c, 0xf0, 0x9e, 0x90, 0x29, 0x99, 0xed, 0x2c, 0xfe, 0xdd, 0x92, 0xab, 0x78, 0x6b, 0xec,
	0x9b, 0xc9, 0xc6, 0x74, 0x73, 0xb6, 0x7b, 0x74, 0xb2, 0xe6, 0x0f, 0x59, 0xc0, 0x2f, 0x7c, 0x69,
	0x7e, 0xfb, 0xde, 0x53, 0xb2, 0xea, 0x29, 0xf9, 0xec, 0x29, 0x79, 0x1d, 0x68, 0xb4, 0x1a, 0x68,
	0xf4, 0x31, 0xd0, 0xe8, 0xe6, 0xbc, 0x42, 0x7b, 0xdf, 0x71, 0x26, 0xda, 0x65, 0xee, 0x9d, 0xec,
	0x17, 0xca, 0x03, 0x28, 0xfb, 0x93, 0x32, 0x4f, 0xe5, 0xcf, 0xf9, 0xb8, 0x84, 0x75, 0x0a, 0x0c,
	0xdf, 0xfe, 0x1e, 0xe1, 0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x29, 0xe4, 0x03, 0x2a, 0x80, 0x01,
	0x00, 0x00,
}

func (m *ApprovedCertificatesBySubjectKeyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovedCertificatesBySubjectKeyId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovedCertificatesBySubjectKeyId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Certs) > 0 {
		for iNdEx := len(m.Certs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApprovedCertificatesBySubjectKeyId(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubjectKeyId) > 0 {
		i -= len(m.SubjectKeyId)
		copy(dAtA[i:], m.SubjectKeyId)
		i = encodeVarintApprovedCertificatesBySubjectKeyId(dAtA, i, uint64(len(m.SubjectKeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApprovedCertificatesBySubjectKeyId(dAtA []byte, offset int, v uint64) int {
	offset -= sovApprovedCertificatesBySubjectKeyId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApprovedCertificatesBySubjectKeyId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectKeyId)
	if l > 0 {
		n += 1 + l + sovApprovedCertificatesBySubjectKeyId(uint64(l))
	}
	if len(m.Certs) > 0 {
		for _, e := range m.Certs {
			l = e.Size()
			n += 1 + l + sovApprovedCertificatesBySubjectKeyId(uint64(l))
		}
	}
	return n
}

func sovApprovedCertificatesBySubjectKeyId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApprovedCertificatesBySubjectKeyId(x uint64) (n int) {
	return sovApprovedCertificatesBySubjectKeyId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApprovedCertificatesBySubjectKeyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApprovedCertificatesBySubjectKeyId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovedCertificatesBySubjectKeyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovedCertificatesBySubjectKeyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovedCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovedCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, &Certificate{})
			if err := m.Certs[len(m.Certs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApprovedCertificatesBySubjectKeyId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApprovedCertificatesBySubjectKeyId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApprovedCertificatesBySubjectKeyId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovedCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovedCertificatesBySubjectKeyId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApprovedCertificatesBySubjectKeyId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApprovedCertificatesBySubjectKeyId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApprovedCertificatesBySubjectKeyId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApprovedCertificatesBySubjectKeyId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApprovedCertificatesBySubjectKeyId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApprovedCertificatesBySubjectKeyId = fmt.Errorf("proto: unexpected end of group")
)
