// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/common/uint16_range.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Uint16Range struct {
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty" validate:"gte=0,lte=65535"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty" validate:"gte=0,lte=65535"`
}

func (m *Uint16Range) Reset()         { *m = Uint16Range{} }
func (m *Uint16Range) String() string { return proto.CompactTextString(m) }
func (*Uint16Range) ProtoMessage()    {}
func (*Uint16Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_42b7b0236903d486, []int{0}
}
func (m *Uint16Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint16Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint16Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uint16Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint16Range.Merge(m, src)
}
func (m *Uint16Range) XXX_Size() int {
	return m.Size()
}
func (m *Uint16Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint16Range.DiscardUnknown(m)
}

var xxx_messageInfo_Uint16Range proto.InternalMessageInfo

func (m *Uint16Range) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Uint16Range) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterType((*Uint16Range)(nil), "zigbeealliance.distributedcomplianceledger.common.Uint16Range")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/common/uint16_range.proto", fileDescriptor_42b7b0236903d486)
}

var fileDescriptor_42b7b0236903d486 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0xa9, 0xca, 0x4c, 0x4f,
	0x4a, 0x4d, 0x4d, 0xcc, 0xc9, 0xc9, 0x4c, 0xcc, 0x4b, 0x4e, 0xd5, 0x4f, 0xc9, 0x2c, 0x2e, 0x29,
	0xca, 0x4c, 0x2a, 0x2d, 0x49, 0x4d, 0x49, 0xce, 0xcf, 0x2d, 0x80, 0x88, 0xe6, 0xa4, 0xa6, 0xa4,
	0xa7, 0x16, 0xe9, 0x27, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0xe9, 0x97, 0x66, 0xe6, 0x95, 0x18, 0x9a,
	0xc5, 0x17, 0x25, 0xe6, 0xa5, 0xa7, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x19, 0xa2, 0x9a,
	0xa2, 0x87, 0xc7, 0x14, 0x3d, 0x88, 0x29, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0xdd, 0xfa,
	0x20, 0x16, 0xc4, 0x20, 0xa5, 0x42, 0x2e, 0xee, 0x50, 0xb0, 0xf1, 0x41, 0x20, 0xd3, 0x85, 0x0c,
	0xb8, 0x98, 0x73, 0x33, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x9d, 0xe4, 0x3e, 0xdd, 0x93,
	0x97, 0x2a, 0x4b, 0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0x49, 0xb5, 0x52, 0x4a, 0x2f, 0x49, 0xb5, 0x35,
	0xd0, 0xc9, 0x29, 0x49, 0xb5, 0x35, 0x33, 0x35, 0x35, 0x36, 0x55, 0x0a, 0x02, 0x29, 0x05, 0xeb,
	0x48, 0xac, 0x90, 0x60, 0x22, 0x52, 0x47, 0x62, 0x85, 0x53, 0xe2, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0x44, 0xb9, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0x81, 0x5c, 0xac, 0x0f,
	0xf1, 0xa0, 0x2e, 0xb6, 0x70, 0xd2, 0x45, 0x78, 0x51, 0x17, 0x1a, 0x52, 0x15, 0xb0, 0xb0, 0x2a,
	0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xeb,
	0x4a, 0x43, 0x0e, 0x6d, 0x01, 0x00, 0x00,
}

func (m *Uint16Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint16Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uint16Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		i = encodeVarintUint16Range(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.Min != 0 {
		i = encodeVarintUint16Range(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUint16Range(dAtA []byte, offset int, v uint64) int {
	offset -= sovUint16Range(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Uint16Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovUint16Range(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovUint16Range(uint64(m.Max))
	}
	return n
}

func sovUint16Range(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUint16Range(x uint64) (n int) {
	return sovUint16Range(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Uint16Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUint16Range
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint16Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint16Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUint16Range
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUint16Range
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUint16Range(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUint16Range
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUint16Range(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUint16Range
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUint16Range
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUint16Range
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUint16Range
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUint16Range
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUint16Range
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUint16Range        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUint16Range          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUint16Range = fmt.Errorf("proto: unexpected end of group")
)
