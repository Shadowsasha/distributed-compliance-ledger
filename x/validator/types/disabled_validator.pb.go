// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/validator/disabled_validator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DisabledValidator struct {
	Address             string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Creator             string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Approvals           []*Grant `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
	DisabledByNodeAdmin bool     `protobuf:"varint,4,opt,name=disabledByNodeAdmin,proto3" json:"disabledByNodeAdmin,omitempty"`
	Rejects             []*Grant `protobuf:"bytes,5,rep,name=rejects,proto3" json:"rejects,omitempty"`
	SchemaVersion       uint32   `protobuf:"varint,6,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
}

func (m *DisabledValidator) Reset()         { *m = DisabledValidator{} }
func (m *DisabledValidator) String() string { return proto.CompactTextString(m) }
func (*DisabledValidator) ProtoMessage()    {}
func (*DisabledValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad0ec23eb7309c10, []int{0}
}
func (m *DisabledValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisabledValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisabledValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisabledValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisabledValidator.Merge(m, src)
}
func (m *DisabledValidator) XXX_Size() int {
	return m.Size()
}
func (m *DisabledValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_DisabledValidator.DiscardUnknown(m)
}

var xxx_messageInfo_DisabledValidator proto.InternalMessageInfo

func (m *DisabledValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DisabledValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DisabledValidator) GetApprovals() []*Grant {
	if m != nil {
		return m.Approvals
	}
	return nil
}

func (m *DisabledValidator) GetDisabledByNodeAdmin() bool {
	if m != nil {
		return m.DisabledByNodeAdmin
	}
	return false
}

func (m *DisabledValidator) GetRejects() []*Grant {
	if m != nil {
		return m.Rejects
	}
	return nil
}

func (m *DisabledValidator) GetSchemaVersion() uint32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*DisabledValidator)(nil), "zigbeealliance.distributedcomplianceledger.validator.DisabledValidator")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/validator/disabled_validator.proto", fileDescriptor_ad0ec23eb7309c10)
}

var fileDescriptor_ad0ec23eb7309c10 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0x31, 0x4b, 0xf3, 0x40,
	0x1c, 0xc6, 0x9b, 0xb7, 0xef, 0xdb, 0xbe, 0x8d, 0x74, 0x30, 0x3a, 0x9c, 0x1d, 0x42, 0x10, 0x87,
	0x2c, 0x49, 0xa4, 0xba, 0xb9, 0xd8, 0x22, 0x08, 0x82, 0x0e, 0x11, 0x0b, 0xba, 0x94, 0xcb, 0xdd,
	0x9f, 0xf4, 0x24, 0xc9, 0x85, 0xbb, 0x6b, 0xb1, 0xee, 0xee, 0x7e, 0x18, 0x3f, 0x84, 0x63, 0x71,
	0x72, 0x94, 0xf6, 0x8b, 0x48, 0x9a, 0xa4, 0xb5, 0x50, 0x14, 0xea, 0x78, 0xff, 0xff, 0xf3, 0xfc,
	0xee, 0xb9, 0x7b, 0xf4, 0xcb, 0x47, 0x16, 0x06, 0x00, 0x38, 0x8a, 0x18, 0x4e, 0x08, 0x78, 0x94,
	0x49, 0x25, 0x58, 0x30, 0x54, 0x40, 0x09, 0x8f, 0xd3, 0x7c, 0x1a, 0x01, 0x0d, 0x41, 0x78, 0x23,
	0x1c, 0x31, 0x8a, 0x15, 0x17, 0x99, 0x0a, 0x07, 0x11, 0xd0, 0xfe, 0x62, 0xe4, 0xa6, 0x82, 0x2b,
	0x6e, 0x1c, 0xaf, 0xe2, 0xdc, 0x6f, 0x70, 0xee, 0xc2, 0xdb, 0xda, 0x23, 0x5c, 0xc6, 0x5c, 0xf6,
	0xe7, 0x0c, 0x2f, 0x3f, 0xe4, 0xc0, 0xd6, 0xe9, 0x46, 0xf9, 0x42, 0x81, 0x13, 0x95, 0x13, 0xf6,
	0x9f, 0xaa, 0xfa, 0xf6, 0x59, 0x91, 0xb7, 0x57, 0x2a, 0x8c, 0xb6, 0x5e, 0xc7, 0x94, 0x0a, 0x90,
	0x12, 0x69, 0x96, 0x66, 0x37, 0xba, 0xe8, 0xed, 0xc5, 0xd9, 0x2d, 0xae, 0xee, 0xe4, 0x9b, 0x6b,
	0x25, 0x58, 0x12, 0xfa, 0xa5, 0x30, 0xf3, 0x10, 0x01, 0x99, 0x1d, 0xfd, 0xf9, 0xc9, 0x53, 0x08,
	0x8d, 0x5b, 0xbd, 0x81, 0xd3, 0x54, 0xf0, 0x11, 0x8e, 0x24, 0xaa, 0x5a, 0x55, 0x7b, 0xab, 0x7d,
	0xe2, 0x6e, 0xf2, 0x49, 0xee, 0x79, 0xf6, 0x26, 0x7f, 0x49, 0x33, 0x0e, 0xf5, 0x9d, 0xb2, 0x87,
	0xee, 0xf8, 0x8a, 0x53, 0xe8, 0xd0, 0x98, 0x25, 0xe8, 0xaf, 0xa5, 0xd9, 0xff, 0xfd, 0x75, 0x2b,
	0xe3, 0x46, 0xaf, 0x0b, 0xb8, 0x07, 0xa2, 0x24, 0xfa, 0xf7, 0xfb, 0x28, 0x25, 0xcb, 0x38, 0xd0,
	0x9b, 0x92, 0x0c, 0x20, 0xc6, 0x3d, 0x10, 0x92, 0xf1, 0x04, 0xd5, 0x2c, 0xcd, 0x6e, 0xfa, 0xab,
	0xc3, 0x2e, 0x7d, 0x9d, 0x9a, 0xda, 0x64, 0x6a, 0x6a, 0x1f, 0x53, 0x53, 0x7b, 0x9e, 0x99, 0x95,
	0xc9, 0xcc, 0xac, 0xbc, 0xcf, 0xcc, 0xca, 0xdd, 0x45, 0xc8, 0xd4, 0x60, 0x18, 0xb8, 0x84, 0xc7,
	0x5e, 0x9e, 0xc7, 0x59, 0xd7, 0xb7, 0xb3, 0x4c, 0xe4, 0x14, 0x8d, 0x3f, 0x7c, 0xe9, 0x5c, 0x8d,
	0x53, 0x90, 0x41, 0x6d, 0x5e, 0xfa, 0xd1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x0c, 0x64,
	0x34, 0xd8, 0x02, 0x00, 0x00,
}

func (m *DisabledValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisabledValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisabledValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchemaVersion != 0 {
		i = encodeVarintDisabledValidator(dAtA, i, uint64(m.SchemaVersion))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Rejects) > 0 {
		for iNdEx := len(m.Rejects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rejects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDisabledValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.DisabledByNodeAdmin {
		i--
		if m.DisabledByNodeAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Approvals) > 0 {
		for iNdEx := len(m.Approvals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approvals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDisabledValidator(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDisabledValidator(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDisabledValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDisabledValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovDisabledValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DisabledValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDisabledValidator(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDisabledValidator(uint64(l))
	}
	if len(m.Approvals) > 0 {
		for _, e := range m.Approvals {
			l = e.Size()
			n += 1 + l + sovDisabledValidator(uint64(l))
		}
	}
	if m.DisabledByNodeAdmin {
		n += 2
	}
	if len(m.Rejects) > 0 {
		for _, e := range m.Rejects {
			l = e.Size()
			n += 1 + l + sovDisabledValidator(uint64(l))
		}
	}
	if m.SchemaVersion != 0 {
		n += 1 + sovDisabledValidator(uint64(m.SchemaVersion))
	}
	return n
}

func sovDisabledValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDisabledValidator(x uint64) (n int) {
	return sovDisabledValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DisabledValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisabledValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisabledValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisabledValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approvals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approvals = append(m.Approvals, &Grant{})
			if err := m.Approvals[len(m.Approvals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledByNodeAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisabledByNodeAdmin = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rejects = append(m.Rejects, &Grant{})
			if err := m.Rejects[len(m.Rejects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisabledValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisabledValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDisabledValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDisabledValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisabledValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDisabledValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDisabledValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDisabledValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDisabledValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDisabledValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDisabledValidator = fmt.Errorf("proto: unexpected end of group")
)
