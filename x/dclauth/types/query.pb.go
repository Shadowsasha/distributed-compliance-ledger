// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zigbeealliance/distributedcomplianceledger/dclauth/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAccountRequest) Reset()         { *m = QueryGetAccountRequest{} }
func (m *QueryGetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountRequest) ProtoMessage()    {}
func (*QueryGetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{0}
}
func (m *QueryGetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountRequest.Merge(m, src)
}
func (m *QueryGetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountRequest proto.InternalMessageInfo

func (m *QueryGetAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetAccountResponse struct {
	Account Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (m *QueryGetAccountResponse) Reset()         { *m = QueryGetAccountResponse{} }
func (m *QueryGetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountResponse) ProtoMessage()    {}
func (*QueryGetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{1}
}
func (m *QueryGetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountResponse.Merge(m, src)
}
func (m *QueryGetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountResponse proto.InternalMessageInfo

func (m *QueryGetAccountResponse) GetAccount() Account {
	if m != nil {
		return m.Account
	}
	return Account{}
}

type QueryAllAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountRequest) Reset()         { *m = QueryAllAccountRequest{} }
func (m *QueryAllAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountRequest) ProtoMessage()    {}
func (*QueryAllAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{2}
}
func (m *QueryAllAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountRequest.Merge(m, src)
}
func (m *QueryAllAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountRequest proto.InternalMessageInfo

func (m *QueryAllAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountResponse struct {
	Account    []Account           `protobuf:"bytes,1,rep,name=account,proto3" json:"account"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountResponse) Reset()         { *m = QueryAllAccountResponse{} }
func (m *QueryAllAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountResponse) ProtoMessage()    {}
func (*QueryAllAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{3}
}
func (m *QueryAllAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountResponse.Merge(m, src)
}
func (m *QueryAllAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountResponse proto.InternalMessageInfo

func (m *QueryAllAccountResponse) GetAccount() []Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAllAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPendingAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetPendingAccountRequest) Reset()         { *m = QueryGetPendingAccountRequest{} }
func (m *QueryGetPendingAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAccountRequest) ProtoMessage()    {}
func (*QueryGetPendingAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{4}
}
func (m *QueryGetPendingAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAccountRequest.Merge(m, src)
}
func (m *QueryGetPendingAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAccountRequest proto.InternalMessageInfo

func (m *QueryGetPendingAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetPendingAccountResponse struct {
	PendingAccount PendingAccount `protobuf:"bytes,1,opt,name=pendingAccount,proto3" json:"pendingAccount"`
}

func (m *QueryGetPendingAccountResponse) Reset()         { *m = QueryGetPendingAccountResponse{} }
func (m *QueryGetPendingAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAccountResponse) ProtoMessage()    {}
func (*QueryGetPendingAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{5}
}
func (m *QueryGetPendingAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAccountResponse.Merge(m, src)
}
func (m *QueryGetPendingAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAccountResponse proto.InternalMessageInfo

func (m *QueryGetPendingAccountResponse) GetPendingAccount() PendingAccount {
	if m != nil {
		return m.PendingAccount
	}
	return PendingAccount{}
}

type QueryAllPendingAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingAccountRequest) Reset()         { *m = QueryAllPendingAccountRequest{} }
func (m *QueryAllPendingAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingAccountRequest) ProtoMessage()    {}
func (*QueryAllPendingAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{6}
}
func (m *QueryAllPendingAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingAccountRequest.Merge(m, src)
}
func (m *QueryAllPendingAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingAccountRequest proto.InternalMessageInfo

func (m *QueryAllPendingAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingAccountResponse struct {
	PendingAccount []PendingAccount    `protobuf:"bytes,1,rep,name=pendingAccount,proto3" json:"pendingAccount"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingAccountResponse) Reset()         { *m = QueryAllPendingAccountResponse{} }
func (m *QueryAllPendingAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingAccountResponse) ProtoMessage()    {}
func (*QueryAllPendingAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{7}
}
func (m *QueryAllPendingAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingAccountResponse.Merge(m, src)
}
func (m *QueryAllPendingAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingAccountResponse proto.InternalMessageInfo

func (m *QueryAllPendingAccountResponse) GetPendingAccount() []PendingAccount {
	if m != nil {
		return m.PendingAccount
	}
	return nil
}

func (m *QueryAllPendingAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPendingAccountRevocationRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetPendingAccountRevocationRequest) Reset() {
	*m = QueryGetPendingAccountRevocationRequest{}
}
func (m *QueryGetPendingAccountRevocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAccountRevocationRequest) ProtoMessage()    {}
func (*QueryGetPendingAccountRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{8}
}
func (m *QueryGetPendingAccountRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAccountRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAccountRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAccountRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAccountRevocationRequest.Merge(m, src)
}
func (m *QueryGetPendingAccountRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAccountRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAccountRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAccountRevocationRequest proto.InternalMessageInfo

func (m *QueryGetPendingAccountRevocationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetPendingAccountRevocationResponse struct {
	PendingAccountRevocation PendingAccountRevocation `protobuf:"bytes,1,opt,name=pendingAccountRevocation,proto3" json:"pendingAccountRevocation"`
}

func (m *QueryGetPendingAccountRevocationResponse) Reset() {
	*m = QueryGetPendingAccountRevocationResponse{}
}
func (m *QueryGetPendingAccountRevocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAccountRevocationResponse) ProtoMessage()    {}
func (*QueryGetPendingAccountRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{9}
}
func (m *QueryGetPendingAccountRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAccountRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAccountRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAccountRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAccountRevocationResponse.Merge(m, src)
}
func (m *QueryGetPendingAccountRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAccountRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAccountRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAccountRevocationResponse proto.InternalMessageInfo

func (m *QueryGetPendingAccountRevocationResponse) GetPendingAccountRevocation() PendingAccountRevocation {
	if m != nil {
		return m.PendingAccountRevocation
	}
	return PendingAccountRevocation{}
}

type QueryAllPendingAccountRevocationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingAccountRevocationRequest) Reset() {
	*m = QueryAllPendingAccountRevocationRequest{}
}
func (m *QueryAllPendingAccountRevocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingAccountRevocationRequest) ProtoMessage()    {}
func (*QueryAllPendingAccountRevocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{10}
}
func (m *QueryAllPendingAccountRevocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingAccountRevocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingAccountRevocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingAccountRevocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingAccountRevocationRequest.Merge(m, src)
}
func (m *QueryAllPendingAccountRevocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingAccountRevocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingAccountRevocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingAccountRevocationRequest proto.InternalMessageInfo

func (m *QueryAllPendingAccountRevocationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingAccountRevocationResponse struct {
	PendingAccountRevocation []PendingAccountRevocation `protobuf:"bytes,1,rep,name=pendingAccountRevocation,proto3" json:"pendingAccountRevocation"`
	Pagination               *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingAccountRevocationResponse) Reset() {
	*m = QueryAllPendingAccountRevocationResponse{}
}
func (m *QueryAllPendingAccountRevocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingAccountRevocationResponse) ProtoMessage()    {}
func (*QueryAllPendingAccountRevocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{11}
}
func (m *QueryAllPendingAccountRevocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingAccountRevocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingAccountRevocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingAccountRevocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingAccountRevocationResponse.Merge(m, src)
}
func (m *QueryAllPendingAccountRevocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingAccountRevocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingAccountRevocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingAccountRevocationResponse proto.InternalMessageInfo

func (m *QueryAllPendingAccountRevocationResponse) GetPendingAccountRevocation() []PendingAccountRevocation {
	if m != nil {
		return m.PendingAccountRevocation
	}
	return nil
}

func (m *QueryAllPendingAccountRevocationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountStatRequest struct {
}

func (m *QueryGetAccountStatRequest) Reset()         { *m = QueryGetAccountStatRequest{} }
func (m *QueryGetAccountStatRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountStatRequest) ProtoMessage()    {}
func (*QueryGetAccountStatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{12}
}
func (m *QueryGetAccountStatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountStatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountStatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountStatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountStatRequest.Merge(m, src)
}
func (m *QueryGetAccountStatRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountStatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountStatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountStatRequest proto.InternalMessageInfo

type QueryGetAccountStatResponse struct {
	AccountStat AccountStat `protobuf:"bytes,1,opt,name=AccountStat,proto3" json:"AccountStat"`
}

func (m *QueryGetAccountStatResponse) Reset()         { *m = QueryGetAccountStatResponse{} }
func (m *QueryGetAccountStatResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountStatResponse) ProtoMessage()    {}
func (*QueryGetAccountStatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{13}
}
func (m *QueryGetAccountStatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountStatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountStatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountStatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountStatResponse.Merge(m, src)
}
func (m *QueryGetAccountStatResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountStatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountStatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountStatResponse proto.InternalMessageInfo

func (m *QueryGetAccountStatResponse) GetAccountStat() AccountStat {
	if m != nil {
		return m.AccountStat
	}
	return AccountStat{}
}

type QueryGetRevokedAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetRevokedAccountRequest) Reset()         { *m = QueryGetRevokedAccountRequest{} }
func (m *QueryGetRevokedAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedAccountRequest) ProtoMessage()    {}
func (*QueryGetRevokedAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{14}
}
func (m *QueryGetRevokedAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedAccountRequest.Merge(m, src)
}
func (m *QueryGetRevokedAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedAccountRequest proto.InternalMessageInfo

func (m *QueryGetRevokedAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetRevokedAccountResponse struct {
	RevokedAccount RevokedAccount `protobuf:"bytes,1,opt,name=revokedAccount,proto3" json:"revokedAccount"`
}

func (m *QueryGetRevokedAccountResponse) Reset()         { *m = QueryGetRevokedAccountResponse{} }
func (m *QueryGetRevokedAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRevokedAccountResponse) ProtoMessage()    {}
func (*QueryGetRevokedAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{15}
}
func (m *QueryGetRevokedAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRevokedAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRevokedAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRevokedAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRevokedAccountResponse.Merge(m, src)
}
func (m *QueryGetRevokedAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRevokedAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRevokedAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRevokedAccountResponse proto.InternalMessageInfo

func (m *QueryGetRevokedAccountResponse) GetRevokedAccount() RevokedAccount {
	if m != nil {
		return m.RevokedAccount
	}
	return RevokedAccount{}
}

type QueryAllRevokedAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedAccountRequest) Reset()         { *m = QueryAllRevokedAccountRequest{} }
func (m *QueryAllRevokedAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedAccountRequest) ProtoMessage()    {}
func (*QueryAllRevokedAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{16}
}
func (m *QueryAllRevokedAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedAccountRequest.Merge(m, src)
}
func (m *QueryAllRevokedAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedAccountRequest proto.InternalMessageInfo

func (m *QueryAllRevokedAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRevokedAccountResponse struct {
	RevokedAccount []RevokedAccount    `protobuf:"bytes,1,rep,name=revokedAccount,proto3" json:"revokedAccount"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRevokedAccountResponse) Reset()         { *m = QueryAllRevokedAccountResponse{} }
func (m *QueryAllRevokedAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRevokedAccountResponse) ProtoMessage()    {}
func (*QueryAllRevokedAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{17}
}
func (m *QueryAllRevokedAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRevokedAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRevokedAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRevokedAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRevokedAccountResponse.Merge(m, src)
}
func (m *QueryAllRevokedAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRevokedAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRevokedAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRevokedAccountResponse proto.InternalMessageInfo

func (m *QueryAllRevokedAccountResponse) GetRevokedAccount() []RevokedAccount {
	if m != nil {
		return m.RevokedAccount
	}
	return nil
}

func (m *QueryAllRevokedAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRejectedAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetRejectedAccountRequest) Reset()         { *m = QueryGetRejectedAccountRequest{} }
func (m *QueryGetRejectedAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedAccountRequest) ProtoMessage()    {}
func (*QueryGetRejectedAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{18}
}
func (m *QueryGetRejectedAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedAccountRequest.Merge(m, src)
}
func (m *QueryGetRejectedAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedAccountRequest proto.InternalMessageInfo

func (m *QueryGetRejectedAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetRejectedAccountResponse struct {
	RejectedAccount RejectedAccount `protobuf:"bytes,1,opt,name=rejectedAccount,proto3" json:"rejectedAccount"`
}

func (m *QueryGetRejectedAccountResponse) Reset()         { *m = QueryGetRejectedAccountResponse{} }
func (m *QueryGetRejectedAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedAccountResponse) ProtoMessage()    {}
func (*QueryGetRejectedAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{19}
}
func (m *QueryGetRejectedAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedAccountResponse.Merge(m, src)
}
func (m *QueryGetRejectedAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedAccountResponse proto.InternalMessageInfo

func (m *QueryGetRejectedAccountResponse) GetRejectedAccount() RejectedAccount {
	if m != nil {
		return m.RejectedAccount
	}
	return RejectedAccount{}
}

type QueryAllRejectedAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedAccountRequest) Reset()         { *m = QueryAllRejectedAccountRequest{} }
func (m *QueryAllRejectedAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedAccountRequest) ProtoMessage()    {}
func (*QueryAllRejectedAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{20}
}
func (m *QueryAllRejectedAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedAccountRequest.Merge(m, src)
}
func (m *QueryAllRejectedAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedAccountRequest proto.InternalMessageInfo

func (m *QueryAllRejectedAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRejectedAccountResponse struct {
	RejectedAccount []RejectedAccount   `protobuf:"bytes,1,rep,name=rejectedAccount,proto3" json:"rejectedAccount"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRejectedAccountResponse) Reset()         { *m = QueryAllRejectedAccountResponse{} }
func (m *QueryAllRejectedAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRejectedAccountResponse) ProtoMessage()    {}
func (*QueryAllRejectedAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b6c889ea675319a, []int{21}
}
func (m *QueryAllRejectedAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRejectedAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRejectedAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRejectedAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRejectedAccountResponse.Merge(m, src)
}
func (m *QueryAllRejectedAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRejectedAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRejectedAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRejectedAccountResponse proto.InternalMessageInfo

func (m *QueryAllRejectedAccountResponse) GetRejectedAccount() []RejectedAccount {
	if m != nil {
		return m.RejectedAccount
	}
	return nil
}

func (m *QueryAllRejectedAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetAccountRequest")
	proto.RegisterType((*QueryGetAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetAccountResponse")
	proto.RegisterType((*QueryAllAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllAccountRequest")
	proto.RegisterType((*QueryAllAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllAccountResponse")
	proto.RegisterType((*QueryGetPendingAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetPendingAccountRequest")
	proto.RegisterType((*QueryGetPendingAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetPendingAccountResponse")
	proto.RegisterType((*QueryAllPendingAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllPendingAccountRequest")
	proto.RegisterType((*QueryAllPendingAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllPendingAccountResponse")
	proto.RegisterType((*QueryGetPendingAccountRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetPendingAccountRevocationRequest")
	proto.RegisterType((*QueryGetPendingAccountRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetPendingAccountRevocationResponse")
	proto.RegisterType((*QueryAllPendingAccountRevocationRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllPendingAccountRevocationRequest")
	proto.RegisterType((*QueryAllPendingAccountRevocationResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllPendingAccountRevocationResponse")
	proto.RegisterType((*QueryGetAccountStatRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetAccountStatRequest")
	proto.RegisterType((*QueryGetAccountStatResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetAccountStatResponse")
	proto.RegisterType((*QueryGetRevokedAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetRevokedAccountRequest")
	proto.RegisterType((*QueryGetRevokedAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetRevokedAccountResponse")
	proto.RegisterType((*QueryAllRevokedAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllRevokedAccountRequest")
	proto.RegisterType((*QueryAllRevokedAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllRevokedAccountResponse")
	proto.RegisterType((*QueryGetRejectedAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetRejectedAccountRequest")
	proto.RegisterType((*QueryGetRejectedAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryGetRejectedAccountResponse")
	proto.RegisterType((*QueryAllRejectedAccountRequest)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllRejectedAccountRequest")
	proto.RegisterType((*QueryAllRejectedAccountResponse)(nil), "zigbeealliance.distributedcomplianceledger.dclauth.QueryAllRejectedAccountResponse")
}

func init() {
	proto.RegisterFile("zigbeealliance/distributedcomplianceledger/dclauth/query.proto", fileDescriptor_4b6c889ea675319a)
}

var fileDescriptor_4b6c889ea675319a = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0xbb, 0x40, 0xc4, 0x54, 0x4a, 0xd5, 0x21, 0xa2, 0x5b, 0x27, 0xdd, 0x20, 0x53,
	0x92, 0x08, 0xb1, 0x36, 0x5d, 0x2e, 0xfc, 0x90, 0x80, 0x0d, 0x82, 0x16, 0xa8, 0xa0, 0xd9, 0xbd,
	0x11, 0x50, 0xf0, 0xda, 0x23, 0xc7, 0xe0, 0x78, 0x1c, 0xdb, 0x1b, 0x51, 0x10, 0x17, 0x84, 0x10,
	0x27, 0x40, 0x20, 0xf1, 0x97, 0x70, 0xe3, 0x80, 0xb8, 0xe5, 0x46, 0x05, 0x17, 0x24, 0xa4, 0x16,
	0x25, 0x80, 0x04, 0x7f, 0x05, 0xb2, 0xe7, 0x99, 0xf5, 0x78, 0xc7, 0xdb, 0x64, 0x3d, 0xcb, 0x2d,
	0xf1, 0x78, 0xbe, 0x33, 0x9f, 0xef, 0x7b, 0xf3, 0xfc, 0x76, 0xf0, 0xf3, 0x1f, 0x7a, 0xee, 0x90,
	0x52, 0xcb, 0xf7, 0x3d, 0x2b, 0xb0, 0xa9, 0xe9, 0x78, 0x71, 0x12, 0x79, 0xc3, 0x51, 0x42, 0x1d,
	0x9b, 0xed, 0x87, 0xfc, 0xa9, 0x4f, 0x1d, 0x97, 0x46, 0xa6, 0x63, 0xfb, 0xd6, 0x28, 0xd9, 0x33,
	0x0f, 0x46, 0x34, 0xba, 0x65, 0x84, 0x11, 0x4b, 0x18, 0xe9, 0x8a, 0xf3, 0x8d, 0x29, 0xf3, 0x0d,
	0x98, 0xaf, 0xad, 0xba, 0x8c, 0xb9, 0x3e, 0x35, 0xad, 0xd0, 0x33, 0xad, 0x20, 0x60, 0x89, 0x95,
	0x78, 0x2c, 0x88, 0xb9, 0xa2, 0xf6, 0xb8, 0xcd, 0xe2, 0x7d, 0x16, 0x9b, 0x43, 0x2b, 0xa6, 0x7c,
	0x29, 0xf3, 0xf0, 0xea, 0x90, 0x26, 0xd6, 0x55, 0x33, 0xb4, 0x5c, 0x2f, 0xc8, 0x5e, 0x86, 0x77,
	0x5f, 0x9c, 0x61, 0xf7, 0x96, 0x6d, 0xb3, 0x51, 0x90, 0x80, 0xc2, 0xf5, 0x19, 0x14, 0x42, 0x1a,
	0x38, 0x5e, 0xe0, 0xee, 0x8a, 0x4a, 0x83, 0xfa, 0x4a, 0xbb, 0x11, 0x3d, 0x64, 0x76, 0x11, 0xf0,
	0xe5, 0xd9, 0x01, 0x77, 0xe3, 0xc4, 0xaa, 0x43, 0x99, 0xee, 0xe5, 0x7d, 0xea, 0x94, 0x28, 0x5f,
	0x9d, 0x49, 0xe9, 0x3d, 0x6a, 0x27, 0x13, 0x52, 0xcb, 0x2e, 0x73, 0x59, 0xf6, 0xa7, 0x99, 0xfe,
	0x05, 0x4f, 0x2f, 0xf1, 0xf0, 0xef, 0xf2, 0x01, 0xfe, 0x0f, 0x1f, 0xd2, 0x6f, 0xe0, 0x87, 0xb7,
	0xd3, 0x7c, 0xb8, 0x46, 0x93, 0x1e, 0x57, 0xea, 0xd3, 0x83, 0x11, 0x8d, 0x13, 0xd2, 0xc5, 0x8b,
	0x96, 0xe3, 0x44, 0x34, 0x8e, 0x5b, 0xe8, 0x11, 0xb4, 0xf9, 0xe0, 0x56, 0xeb, 0xe7, 0xef, 0x3a,
	0xcb, 0x30, 0xb9, 0xc7, 0x47, 0x06, 0x49, 0xe4, 0x05, 0x6e, 0x3f, 0x7f, 0x51, 0x3f, 0xc4, 0x17,
	0x27, 0xd4, 0xe2, 0x90, 0x05, 0x31, 0x25, 0x3b, 0x78, 0x11, 0xb6, 0x9a, 0xc9, 0x9d, 0xeb, 0x3e,
	0x67, 0x9c, 0x3d, 0xcd, 0x0d, 0x50, 0xdd, 0xba, 0xef, 0xe8, 0xce, 0xda, 0x42, 0x3f, 0x57, 0xd4,
	0xdf, 0x05, 0x8a, 0x9e, 0xef, 0x97, 0x28, 0x5e, 0xc1, 0x78, 0x9c, 0xe1, 0xb0, 0xf2, 0xba, 0x01,
	0x14, 0xe9, 0x71, 0x30, 0xf8, 0xc9, 0x83, 0xe3, 0x60, 0xdc, 0xb4, 0x5c, 0x0a, 0x73, 0xfb, 0x85,
	0x99, 0xfa, 0x0f, 0x08, 0xd0, 0x8a, 0x4b, 0xc8, 0xd0, 0x9a, 0x6a, 0xd1, 0xc8, 0x35, 0x01, 0xa0,
	0x91, 0x01, 0x6c, 0xdc, 0x13, 0x80, 0xef, 0x4c, 0x20, 0x18, 0xe0, 0xcb, 0x79, 0x6c, 0x6e, 0xf2,
	0x23, 0xa2, 0x20, 0xe0, 0x5f, 0x23, 0xdc, 0xae, 0x52, 0x05, 0x77, 0x42, 0xbc, 0x14, 0x0a, 0x23,
	0x10, 0x85, 0xad, 0x59, 0x4c, 0x12, 0xd7, 0x00, 0xaf, 0x4a, 0xfa, 0xba, 0x0b, 0xa4, 0x3d, 0xdf,
	0x97, 0x93, 0xaa, 0x4a, 0x8a, 0xdf, 0x72, 0x7a, 0xc9, 0x4a, 0x53, 0xe8, 0x9b, 0xf3, 0xa4, 0x57,
	0x97, 0x30, 0xef, 0xe0, 0x8d, 0xaa, 0xd0, 0xe6, 0x15, 0xb5, 0x4e, 0xea, 0x7c, 0x8f, 0xf0, 0xe6,
	0xbd, 0xf5, 0xc1, 0xc6, 0x2f, 0x10, 0x6e, 0x85, 0x15, 0x2f, 0x41, 0x00, 0x6f, 0xd4, 0x77, 0x74,
	0xac, 0x09, 0xde, 0x56, 0xae, 0xa9, 0x1f, 0x80, 0x39, 0x92, 0xc8, 0x97, 0xcd, 0x51, 0x95, 0x6d,
	0x9f, 0x36, 0xc0, 0xb0, 0xa9, 0x6b, 0x9e, 0xce, 0xb0, 0xe6, 0xff, 0x6d, 0x98, 0xba, 0xb4, 0x5c,
	0xc5, 0x5a, 0xe9, 0x1b, 0x33, 0x48, 0xac, 0xfc, 0x68, 0xeb, 0x9f, 0x21, 0xbc, 0x22, 0x1d, 0x06,
	0x5f, 0x5c, 0x7c, 0xae, 0xf0, 0x18, 0xa2, 0xf1, 0x42, 0x8d, 0x7a, 0x9d, 0xca, 0x00, 0x7c, 0x51,
	0x59, 0x7f, 0x66, 0x5c, 0x6e, 0xfb, 0xfc, 0xab, 0x5f, 0x2a, 0x42, 0xad, 0xd2, 0x99, 0x91, 0x17,
	0xd5, 0xf2, 0xdc, 0x71, 0x59, 0x89, 0x84, 0x91, 0x3a, 0x45, 0x55, 0x5c, 0x23, 0x2f, 0x2b, 0xa2,
	0x7e, 0xb1, 0xa8, 0xca, 0x79, 0xe6, 0x51, 0x54, 0xcf, 0x40, 0xdf, 0x9c, 0x27, 0xbd, 0xba, 0xec,
	0x7d, 0xb6, 0x18, 0x5a, 0xde, 0xc2, 0x9d, 0x3a, 0x2f, 0xbe, 0x45, 0x78, 0xad, 0x72, 0x32, 0x58,
	0x13, 0xe3, 0xf3, 0x91, 0x38, 0x04, 0xa1, 0x78, 0x69, 0x36, 0x6f, 0x04, 0x29, 0x30, 0xa7, 0xbc,
	0x82, 0xbe, 0x57, 0x8c, 0x98, 0x14, 0x4a, 0x55, 0x72, 0xdc, 0xcd, 0x2d, 0x90, 0x2d, 0x35, 0xcd,
	0x82, 0xe6, 0x7c, 0x2d, 0x50, 0x96, 0x20, 0xdd, 0x7f, 0x1e, 0xc2, 0xf7, 0x67, 0x84, 0xe4, 0x08,
	0xe1, 0xc5, 0x5c, 0xfe, 0xb5, 0x59, 0xb6, 0x2e, 0x6f, 0xec, 0xb5, 0xd7, 0x95, 0x68, 0xf1, 0xad,
	0xeb, 0x57, 0x3e, 0xf9, 0xe5, 0x8f, 0x6f, 0x1a, 0x6d, 0xb2, 0x9a, 0xfe, 0x32, 0x31, 0x8b, 0xbf,
	0x95, 0x62, 0xf3, 0x23, 0x48, 0xdc, 0x8f, 0xc9, 0x8f, 0x08, 0x63, 0x98, 0xd9, 0xf3, 0xfd, 0x1a,
	0x34, 0x13, 0x0d, 0x7e, 0x0d, 0x9a, 0xc9, 0x4e, 0x5e, 0xd7, 0x32, 0x9a, 0x65, 0x42, 0x26, 0x69,
	0xc8, 0x5f, 0x08, 0x2f, 0x89, 0x5f, 0x3f, 0xb2, 0x5d, 0xc7, 0x49, 0x69, 0x6b, 0xaa, 0xf5, 0x55,
	0x4a, 0x02, 0x55, 0x27, 0xa3, 0xda, 0x20, 0x8f, 0x8d, 0xa9, 0xc2, 0x88, 0x85, 0x2c, 0xa6, 0x4e,
	0x47, 0x12, 0xac, 0xbb, 0x08, 0x5f, 0x10, 0x95, 0xd2, 0x98, 0x6d, 0xd7, 0xf1, 0x59, 0x35, 0x6b,
	0x65, 0xbf, 0xad, 0x3f, 0x9a, 0xb1, 0x5e, 0x26, 0x2b, 0x53, 0x58, 0xc9, 0x97, 0x0d, 0xdc, 0xaa,
	0x6a, 0x64, 0xc8, 0x8e, 0xca, 0x08, 0x94, 0x7a, 0x41, 0xed, 0xed, 0xf9, 0x88, 0x03, 0xfc, 0xd3,
	0x19, 0x7c, 0x97, 0x3c, 0x29, 0x81, 0x1f, 0x5f, 0x83, 0xc8, 0x62, 0xfe, 0x79, 0x03, 0xaf, 0x54,
	0xc9, 0xa7, 0xd1, 0xdf, 0x51, 0x19, 0x2a, 0x75, 0xa6, 0x9c, 0xa2, 0x13, 0xd6, 0x8d, 0xcc, 0x94,
	0x4d, 0xb2, 0x7e, 0x3a, 0x53, 0xc8, 0x4f, 0x48, 0x68, 0x11, 0xc9, 0x1b, 0x0a, 0xca, 0x65, 0xa1,
	0x43, 0xd5, 0xde, 0x54, 0xa6, 0x07, 0x80, 0x6b, 0x19, 0xe0, 0x25, 0x72, 0x51, 0x52, 0x82, 0xe3,
	0x94, 0xe0, 0x4f, 0x84, 0x97, 0xc4, 0x2e, 0xa7, 0x5e, 0xe5, 0x92, 0xf6, 0x7f, 0xf5, 0x2a, 0x97,
	0xbc, 0xd1, 0xd3, 0x9f, 0xc8, 0xd0, 0xd6, 0xc9, 0x95, 0x31, 0x1a, 0x34, 0x66, 0xb2, 0x24, 0xbe,
	0x83, 0xf0, 0x05, 0x51, 0xa8, 0x76, 0xe1, 0x52, 0x8d, 0x5a, 0xd9, 0xd3, 0xea, 0x7a, 0x86, 0xba,
	0x4a, 0xb4, 0x6a, 0x54, 0xf2, 0x37, 0xc2, 0xe7, 0x4b, 0xfd, 0x08, 0xa9, 0x69, 0xbb, 0xac, 0x5b,
	0xd3, 0x06, 0x4a, 0x35, 0xab, 0xbf, 0x42, 0x79, 0x13, 0x25, 0x0b, 0xe6, 0x31, 0xc2, 0xa4, 0x24,
	0x95, 0x46, 0xb3, 0xa6, 0xf5, 0x8a, 0x71, 0xab, 0xbb, 0x50, 0xd9, 0x87, 0x68, 0x02, 0x77, 0x6b,
	0x78, 0x74, 0xdc, 0x46, 0xb7, 0x8f, 0xdb, 0xe8, 0xf7, 0xe3, 0x36, 0xfa, 0xea, 0xa4, 0xbd, 0x70,
	0xfb, 0xa4, 0xbd, 0xf0, 0xeb, 0x49, 0x7b, 0xe1, 0xad, 0xeb, 0xae, 0x97, 0xec, 0x8d, 0x86, 0x86,
	0xcd, 0xf6, 0x4d, 0xbe, 0xbb, 0x8e, 0xec, 0x7e, 0xb8, 0x33, 0xde, 0x5f, 0x07, 0x6e, 0x88, 0x3f,
	0xf8, 0xef, 0x8e, 0x38, 0xb9, 0x15, 0xd2, 0x78, 0xf8, 0x40, 0x76, 0xd1, 0xfb, 0xd4, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xfd, 0x01, 0xad, 0x60, 0x96, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a account by index.
	Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	// Queries a list of account items.
	AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
	// Queries a pendingAccount by index.
	PendingAccount(ctx context.Context, in *QueryGetPendingAccountRequest, opts ...grpc.CallOption) (*QueryGetPendingAccountResponse, error)
	// Queries a list of pendingAccount items.
	PendingAccountAll(ctx context.Context, in *QueryAllPendingAccountRequest, opts ...grpc.CallOption) (*QueryAllPendingAccountResponse, error)
	// Queries a pendingAccountRevocation by index.
	PendingAccountRevocation(ctx context.Context, in *QueryGetPendingAccountRevocationRequest, opts ...grpc.CallOption) (*QueryGetPendingAccountRevocationResponse, error)
	// Queries a list of pendingAccountRevocation items.
	PendingAccountRevocationAll(ctx context.Context, in *QueryAllPendingAccountRevocationRequest, opts ...grpc.CallOption) (*QueryAllPendingAccountRevocationResponse, error)
	// Queries a accountStat by index.
	AccountStat(ctx context.Context, in *QueryGetAccountStatRequest, opts ...grpc.CallOption) (*QueryGetAccountStatResponse, error)
	// Queries a RevokedAccount by index.
	RevokedAccount(ctx context.Context, in *QueryGetRevokedAccountRequest, opts ...grpc.CallOption) (*QueryGetRevokedAccountResponse, error)
	// Queries a list of RevokedAccount items.
	RevokedAccountAll(ctx context.Context, in *QueryAllRevokedAccountRequest, opts ...grpc.CallOption) (*QueryAllRevokedAccountResponse, error)
	// Queries a RejectedAccount by index.
	RejectedAccount(ctx context.Context, in *QueryGetRejectedAccountRequest, opts ...grpc.CallOption) (*QueryGetRejectedAccountResponse, error)
	// Queries a list of RejectedAccount items.
	RejectedAccountAll(ctx context.Context, in *QueryAllRejectedAccountRequest, opts ...grpc.CallOption) (*QueryAllRejectedAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/AccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingAccount(ctx context.Context, in *QueryGetPendingAccountRequest, opts ...grpc.CallOption) (*QueryGetPendingAccountResponse, error) {
	out := new(QueryGetPendingAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingAccountAll(ctx context.Context, in *QueryAllPendingAccountRequest, opts ...grpc.CallOption) (*QueryAllPendingAccountResponse, error) {
	out := new(QueryAllPendingAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingAccountRevocation(ctx context.Context, in *QueryGetPendingAccountRevocationRequest, opts ...grpc.CallOption) (*QueryGetPendingAccountRevocationResponse, error) {
	out := new(QueryGetPendingAccountRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountRevocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingAccountRevocationAll(ctx context.Context, in *QueryAllPendingAccountRevocationRequest, opts ...grpc.CallOption) (*QueryAllPendingAccountRevocationResponse, error) {
	out := new(QueryAllPendingAccountRevocationResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountRevocationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountStat(ctx context.Context, in *QueryGetAccountStatRequest, opts ...grpc.CallOption) (*QueryGetAccountStatResponse, error) {
	out := new(QueryGetAccountStatResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/AccountStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedAccount(ctx context.Context, in *QueryGetRevokedAccountRequest, opts ...grpc.CallOption) (*QueryGetRevokedAccountResponse, error) {
	out := new(QueryGetRevokedAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RevokedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevokedAccountAll(ctx context.Context, in *QueryAllRevokedAccountRequest, opts ...grpc.CallOption) (*QueryAllRevokedAccountResponse, error) {
	out := new(QueryAllRevokedAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RevokedAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedAccount(ctx context.Context, in *QueryGetRejectedAccountRequest, opts ...grpc.CallOption) (*QueryGetRejectedAccountResponse, error) {
	out := new(QueryGetRejectedAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RejectedAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RejectedAccountAll(ctx context.Context, in *QueryAllRejectedAccountRequest, opts ...grpc.CallOption) (*QueryAllRejectedAccountResponse, error) {
	out := new(QueryAllRejectedAccountResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RejectedAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a account by index.
	Account(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	// Queries a list of account items.
	AccountAll(context.Context, *QueryAllAccountRequest) (*QueryAllAccountResponse, error)
	// Queries a pendingAccount by index.
	PendingAccount(context.Context, *QueryGetPendingAccountRequest) (*QueryGetPendingAccountResponse, error)
	// Queries a list of pendingAccount items.
	PendingAccountAll(context.Context, *QueryAllPendingAccountRequest) (*QueryAllPendingAccountResponse, error)
	// Queries a pendingAccountRevocation by index.
	PendingAccountRevocation(context.Context, *QueryGetPendingAccountRevocationRequest) (*QueryGetPendingAccountRevocationResponse, error)
	// Queries a list of pendingAccountRevocation items.
	PendingAccountRevocationAll(context.Context, *QueryAllPendingAccountRevocationRequest) (*QueryAllPendingAccountRevocationResponse, error)
	// Queries a accountStat by index.
	AccountStat(context.Context, *QueryGetAccountStatRequest) (*QueryGetAccountStatResponse, error)
	// Queries a RevokedAccount by index.
	RevokedAccount(context.Context, *QueryGetRevokedAccountRequest) (*QueryGetRevokedAccountResponse, error)
	// Queries a list of RevokedAccount items.
	RevokedAccountAll(context.Context, *QueryAllRevokedAccountRequest) (*QueryAllRevokedAccountResponse, error)
	// Queries a RejectedAccount by index.
	RejectedAccount(context.Context, *QueryGetRejectedAccountRequest) (*QueryGetRejectedAccountResponse, error)
	// Queries a list of RejectedAccount items.
	RejectedAccountAll(context.Context, *QueryAllRejectedAccountRequest) (*QueryAllRejectedAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Account(ctx context.Context, req *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryServer) AccountAll(ctx context.Context, req *QueryAllAccountRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAll not implemented")
}
func (*UnimplementedQueryServer) PendingAccount(ctx context.Context, req *QueryGetPendingAccountRequest) (*QueryGetPendingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingAccount not implemented")
}
func (*UnimplementedQueryServer) PendingAccountAll(ctx context.Context, req *QueryAllPendingAccountRequest) (*QueryAllPendingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingAccountAll not implemented")
}
func (*UnimplementedQueryServer) PendingAccountRevocation(ctx context.Context, req *QueryGetPendingAccountRevocationRequest) (*QueryGetPendingAccountRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingAccountRevocation not implemented")
}
func (*UnimplementedQueryServer) PendingAccountRevocationAll(ctx context.Context, req *QueryAllPendingAccountRevocationRequest) (*QueryAllPendingAccountRevocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingAccountRevocationAll not implemented")
}
func (*UnimplementedQueryServer) AccountStat(ctx context.Context, req *QueryGetAccountStatRequest) (*QueryGetAccountStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountStat not implemented")
}
func (*UnimplementedQueryServer) RevokedAccount(ctx context.Context, req *QueryGetRevokedAccountRequest) (*QueryGetRevokedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedAccount not implemented")
}
func (*UnimplementedQueryServer) RevokedAccountAll(ctx context.Context, req *QueryAllRevokedAccountRequest) (*QueryAllRevokedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokedAccountAll not implemented")
}
func (*UnimplementedQueryServer) RejectedAccount(ctx context.Context, req *QueryGetRejectedAccountRequest) (*QueryGetRejectedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedAccount not implemented")
}
func (*UnimplementedQueryServer) RejectedAccountAll(ctx context.Context, req *QueryAllRejectedAccountRequest) (*QueryAllRejectedAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectedAccountAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/AccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAll(ctx, req.(*QueryAllAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingAccount(ctx, req.(*QueryGetPendingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingAccountAll(ctx, req.(*QueryAllPendingAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingAccountRevocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingAccountRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingAccountRevocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountRevocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingAccountRevocation(ctx, req.(*QueryGetPendingAccountRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingAccountRevocationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingAccountRevocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingAccountRevocationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/PendingAccountRevocationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingAccountRevocationAll(ctx, req.(*QueryAllPendingAccountRevocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/AccountStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountStat(ctx, req.(*QueryGetAccountStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRevokedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RevokedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedAccount(ctx, req.(*QueryGetRevokedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevokedAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRevokedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevokedAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RevokedAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevokedAccountAll(ctx, req.(*QueryAllRevokedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRejectedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RejectedAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedAccount(ctx, req.(*QueryGetRejectedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RejectedAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRejectedAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RejectedAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.dclauth.Query/RejectedAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RejectedAccountAll(ctx, req.(*QueryAllRejectedAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zigbeealliance.distributedcomplianceledger.dclauth.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "AccountAll",
			Handler:    _Query_AccountAll_Handler,
		},
		{
			MethodName: "PendingAccount",
			Handler:    _Query_PendingAccount_Handler,
		},
		{
			MethodName: "PendingAccountAll",
			Handler:    _Query_PendingAccountAll_Handler,
		},
		{
			MethodName: "PendingAccountRevocation",
			Handler:    _Query_PendingAccountRevocation_Handler,
		},
		{
			MethodName: "PendingAccountRevocationAll",
			Handler:    _Query_PendingAccountRevocationAll_Handler,
		},
		{
			MethodName: "AccountStat",
			Handler:    _Query_AccountStat_Handler,
		},
		{
			MethodName: "RevokedAccount",
			Handler:    _Query_RevokedAccount_Handler,
		},
		{
			MethodName: "RevokedAccountAll",
			Handler:    _Query_RevokedAccountAll_Handler,
		},
		{
			MethodName: "RejectedAccount",
			Handler:    _Query_RejectedAccount_Handler,
		},
		{
			MethodName: "RejectedAccountAll",
			Handler:    _Query_RejectedAccountAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zigbeealliance/distributedcomplianceledger/dclauth/query.proto",
}

func (m *QueryGetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		for iNdEx := len(m.Account) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Account[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingAccount) > 0 {
		for iNdEx := len(m.PendingAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAccountRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAccountRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAccountRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAccountRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAccountRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAccountRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingAccountRevocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingAccountRevocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingAccountRevocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingAccountRevocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingAccountRevocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingAccountRevocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingAccountRevocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingAccountRevocation) > 0 {
		for iNdEx := len(m.PendingAccountRevocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingAccountRevocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountStatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountStatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountStatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountStatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountStatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountStatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccountStat.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRevokedAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRevokedAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRevokedAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevokedAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRevokedAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRevokedAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRevokedAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RevokedAccount) > 0 {
		for iNdEx := len(m.RevokedAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RevokedAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RejectedAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRejectedAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRejectedAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRejectedAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RejectedAccount) > 0 {
		for iNdEx := len(m.RejectedAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RejectedAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Account) > 0 {
		for _, e := range m.Account {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingAccount) > 0 {
		for _, e := range m.PendingAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAccountRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAccountRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingAccountRevocation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingAccountRevocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingAccountRevocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingAccountRevocation) > 0 {
		for _, e := range m.PendingAccountRevocation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountStatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAccountStatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccountStat.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRevokedAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRevokedAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RevokedAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRevokedAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRevokedAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RevokedAccount) > 0 {
		for _, e := range m.RevokedAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RejectedAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRejectedAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRejectedAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RejectedAccount) > 0 {
		for _, e := range m.RejectedAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account, Account{})
			if err := m.Account[len(m.Account)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingAccount = append(m.PendingAccount, PendingAccount{})
			if err := m.PendingAccount[len(m.PendingAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAccountRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAccountRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAccountRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAccountRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAccountRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAccountRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAccountRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingAccountRevocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingAccountRevocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingAccountRevocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingAccountRevocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingAccountRevocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingAccountRevocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingAccountRevocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAccountRevocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingAccountRevocation = append(m.PendingAccountRevocation, PendingAccountRevocation{})
			if err := m.PendingAccountRevocation[len(m.PendingAccountRevocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountStatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountStatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountStatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountStatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountStatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountStatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRevokedAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRevokedAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRevokedAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevokedAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRevokedAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRevokedAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRevokedAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedAccount = append(m.RevokedAccount, RevokedAccount{})
			if err := m.RevokedAccount[len(m.RevokedAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RejectedAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRejectedAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRejectedAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRejectedAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectedAccount = append(m.RejectedAccount, RejectedAccount{})
			if err := m.RejectedAccount[len(m.RejectedAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
