// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compliance/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCertifyModel struct {
	Signer                             string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" validate:"required"`
	Vid                                int32  `protobuf:"varint,2,opt,name=vid,proto3" json:"vid,omitempty" validate:"gte=1,lte=65535"`
	Pid                                int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty" validate:"gte=1,lte=65535"`
	SoftwareVersion                    uint32 `protobuf:"varint,4,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	SoftwareVersionString              string `protobuf:"bytes,5,opt,name=softwareVersionString,proto3" json:"softwareVersionString,omitempty" validate:"required,max=64"`
	CDVersionNumber                    uint32 `protobuf:"varint,6,opt,name=cDVersionNumber,proto3" json:"cDVersionNumber,omitempty" validate:"gte=0,lte=65535"`
	CertificationDate                  string `protobuf:"bytes,7,opt,name=certificationDate,proto3" json:"certificationDate,omitempty" validate:"required"`
	CertificationType                  string `protobuf:"bytes,8,opt,name=certificationType,proto3" json:"certificationType,omitempty" validate:"required,max=100"`
	Reason                             string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty" validate:"max=102400"`
	ProgramTypeVersion                 string `protobuf:"bytes,10,opt,name=programTypeVersion,proto3" json:"programTypeVersion,omitempty" validate:"max=64"`
	CDCertificateId                    string `protobuf:"bytes,11,opt,name=cDCertificateId,proto3" json:"cDCertificateId,omitempty" validate:"required,max=64"`
	FamilyId                           string `protobuf:"bytes,12,opt,name=familyId,proto3" json:"familyId,omitempty" validate:"max=64"`
	SupportedClusters                  string `protobuf:"bytes,13,opt,name=supportedClusters,proto3" json:"supportedClusters,omitempty" validate:"max=64"`
	CompliantPlatformUsed              string `protobuf:"bytes,14,opt,name=compliantPlatformUsed,proto3" json:"compliantPlatformUsed,omitempty" validate:"max=64"`
	CompliantPlatformVersion           string `protobuf:"bytes,15,opt,name=compliantPlatformVersion,proto3" json:"compliantPlatformVersion,omitempty" validate:"max=64"`
	OSVersion                          string `protobuf:"bytes,16,opt,name=OSVersion,proto3" json:"OSVersion,omitempty" validate:"max=64"`
	CertificationRoute                 string `protobuf:"bytes,17,opt,name=certificationRoute,proto3" json:"certificationRoute,omitempty" validate:"max=64"`
	ProgramType                        string `protobuf:"bytes,18,opt,name=programType,proto3" json:"programType,omitempty" validate:"max=64"`
	Transport                          string `protobuf:"bytes,19,opt,name=transport,proto3" json:"transport,omitempty" validate:"max=64"`
	ParentChild                        string `protobuf:"bytes,20,opt,name=parentChild,proto3" json:"parentChild,omitempty" validate:"max=64"`
	CertificationIdOfSoftwareComponent string `protobuf:"bytes,21,opt,name=certificationIdOfSoftwareComponent,proto3" json:"certificationIdOfSoftwareComponent,omitempty" validate:"max=64"`
}

func (m *MsgCertifyModel) Reset()         { *m = MsgCertifyModel{} }
func (m *MsgCertifyModel) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyModel) ProtoMessage()    {}
func (*MsgCertifyModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{0}
}
func (m *MsgCertifyModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyModel.Merge(m, src)
}
func (m *MsgCertifyModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyModel proto.InternalMessageInfo

func (m *MsgCertifyModel) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCertifyModel) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *MsgCertifyModel) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgCertifyModel) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *MsgCertifyModel) GetSoftwareVersionString() string {
	if m != nil {
		return m.SoftwareVersionString
	}
	return ""
}

func (m *MsgCertifyModel) GetCDVersionNumber() uint32 {
	if m != nil {
		return m.CDVersionNumber
	}
	return 0
}

func (m *MsgCertifyModel) GetCertificationDate() string {
	if m != nil {
		return m.CertificationDate
	}
	return ""
}

func (m *MsgCertifyModel) GetCertificationType() string {
	if m != nil {
		return m.CertificationType
	}
	return ""
}

func (m *MsgCertifyModel) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgCertifyModel) GetProgramTypeVersion() string {
	if m != nil {
		return m.ProgramTypeVersion
	}
	return ""
}

func (m *MsgCertifyModel) GetCDCertificateId() string {
	if m != nil {
		return m.CDCertificateId
	}
	return ""
}

func (m *MsgCertifyModel) GetFamilyId() string {
	if m != nil {
		return m.FamilyId
	}
	return ""
}

func (m *MsgCertifyModel) GetSupportedClusters() string {
	if m != nil {
		return m.SupportedClusters
	}
	return ""
}

func (m *MsgCertifyModel) GetCompliantPlatformUsed() string {
	if m != nil {
		return m.CompliantPlatformUsed
	}
	return ""
}

func (m *MsgCertifyModel) GetCompliantPlatformVersion() string {
	if m != nil {
		return m.CompliantPlatformVersion
	}
	return ""
}

func (m *MsgCertifyModel) GetOSVersion() string {
	if m != nil {
		return m.OSVersion
	}
	return ""
}

func (m *MsgCertifyModel) GetCertificationRoute() string {
	if m != nil {
		return m.CertificationRoute
	}
	return ""
}

func (m *MsgCertifyModel) GetProgramType() string {
	if m != nil {
		return m.ProgramType
	}
	return ""
}

func (m *MsgCertifyModel) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *MsgCertifyModel) GetParentChild() string {
	if m != nil {
		return m.ParentChild
	}
	return ""
}

func (m *MsgCertifyModel) GetCertificationIdOfSoftwareComponent() string {
	if m != nil {
		return m.CertificationIdOfSoftwareComponent
	}
	return ""
}

type MsgCertifyModelResponse struct {
}

func (m *MsgCertifyModelResponse) Reset()         { *m = MsgCertifyModelResponse{} }
func (m *MsgCertifyModelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCertifyModelResponse) ProtoMessage()    {}
func (*MsgCertifyModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{1}
}
func (m *MsgCertifyModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCertifyModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCertifyModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCertifyModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCertifyModelResponse.Merge(m, src)
}
func (m *MsgCertifyModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCertifyModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCertifyModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCertifyModelResponse proto.InternalMessageInfo

type MsgRevokeModel struct {
	Signer                string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" validate:"required"`
	Vid                   int32  `protobuf:"varint,2,opt,name=vid,proto3" json:"vid,omitempty" validate:"gte=1,lte=65535"`
	Pid                   int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty" validate:"gte=1,lte=65535"`
	SoftwareVersion       uint32 `protobuf:"varint,4,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	SoftwareVersionString string `protobuf:"bytes,5,opt,name=softwareVersionString,proto3" json:"softwareVersionString,omitempty" validate:"required,max=64"`
	CDVersionNumber       uint32 `protobuf:"varint,6,opt,name=cDVersionNumber,proto3" json:"cDVersionNumber,omitempty" validate:"gte=0,lte=65535"`
	RevocationDate        string `protobuf:"bytes,7,opt,name=revocationDate,proto3" json:"revocationDate,omitempty" validate:"required"`
	CertificationType     string `protobuf:"bytes,8,opt,name=certificationType,proto3" json:"certificationType,omitempty" validate:"required,max=100"`
	Reason                string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty" validate:"max=102400"`
}

func (m *MsgRevokeModel) Reset()         { *m = MsgRevokeModel{} }
func (m *MsgRevokeModel) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeModel) ProtoMessage()    {}
func (*MsgRevokeModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{2}
}
func (m *MsgRevokeModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeModel.Merge(m, src)
}
func (m *MsgRevokeModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeModel proto.InternalMessageInfo

func (m *MsgRevokeModel) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRevokeModel) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *MsgRevokeModel) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgRevokeModel) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *MsgRevokeModel) GetSoftwareVersionString() string {
	if m != nil {
		return m.SoftwareVersionString
	}
	return ""
}

func (m *MsgRevokeModel) GetCDVersionNumber() uint32 {
	if m != nil {
		return m.CDVersionNumber
	}
	return 0
}

func (m *MsgRevokeModel) GetRevocationDate() string {
	if m != nil {
		return m.RevocationDate
	}
	return ""
}

func (m *MsgRevokeModel) GetCertificationType() string {
	if m != nil {
		return m.CertificationType
	}
	return ""
}

func (m *MsgRevokeModel) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MsgRevokeModelResponse struct {
}

func (m *MsgRevokeModelResponse) Reset()         { *m = MsgRevokeModelResponse{} }
func (m *MsgRevokeModelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeModelResponse) ProtoMessage()    {}
func (*MsgRevokeModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{3}
}
func (m *MsgRevokeModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeModelResponse.Merge(m, src)
}
func (m *MsgRevokeModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeModelResponse proto.InternalMessageInfo

type MsgProvisionModel struct {
	Signer                             string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty" validate:"required"`
	Vid                                int32  `protobuf:"varint,2,opt,name=vid,proto3" json:"vid,omitempty" validate:"gte=1,lte=65535"`
	Pid                                int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty" validate:"gte=1,lte=65535"`
	SoftwareVersion                    uint32 `protobuf:"varint,4,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	SoftwareVersionString              string `protobuf:"bytes,5,opt,name=softwareVersionString,proto3" json:"softwareVersionString,omitempty" validate:"required,max=64"`
	CDVersionNumber                    uint32 `protobuf:"varint,6,opt,name=cDVersionNumber,proto3" json:"cDVersionNumber,omitempty" validate:"gte=0,lte=65535"`
	ProvisionalDate                    string `protobuf:"bytes,7,opt,name=provisionalDate,proto3" json:"provisionalDate,omitempty" validate:"required"`
	CertificationType                  string `protobuf:"bytes,8,opt,name=certificationType,proto3" json:"certificationType,omitempty" validate:"required,max=100"`
	Reason                             string `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty" validate:"max=102400"`
	ProgramTypeVersion                 string `protobuf:"bytes,10,opt,name=programTypeVersion,proto3" json:"programTypeVersion,omitempty" validate:"max=64"`
	CDCertificateId                    string `protobuf:"bytes,11,opt,name=cDCertificateId,proto3" json:"cDCertificateId,omitempty" validate:"required,max=64"`
	FamilyId                           string `protobuf:"bytes,12,opt,name=familyId,proto3" json:"familyId,omitempty" validate:"max=64"`
	SupportedClusters                  string `protobuf:"bytes,13,opt,name=supportedClusters,proto3" json:"supportedClusters,omitempty" validate:"max=64"`
	CompliantPlatformUsed              string `protobuf:"bytes,14,opt,name=compliantPlatformUsed,proto3" json:"compliantPlatformUsed,omitempty" validate:"max=64"`
	CompliantPlatformVersion           string `protobuf:"bytes,15,opt,name=compliantPlatformVersion,proto3" json:"compliantPlatformVersion,omitempty" validate:"max=64"`
	OSVersion                          string `protobuf:"bytes,16,opt,name=OSVersion,proto3" json:"OSVersion,omitempty" validate:"max=64"`
	CertificationRoute                 string `protobuf:"bytes,17,opt,name=certificationRoute,proto3" json:"certificationRoute,omitempty" validate:"max=64"`
	ProgramType                        string `protobuf:"bytes,18,opt,name=programType,proto3" json:"programType,omitempty" validate:"max=64"`
	Transport                          string `protobuf:"bytes,19,opt,name=transport,proto3" json:"transport,omitempty" validate:"max=64"`
	ParentChild                        string `protobuf:"bytes,20,opt,name=parentChild,proto3" json:"parentChild,omitempty" validate:"max=64"`
	CertificationIdOfSoftwareComponent string `protobuf:"bytes,21,opt,name=certificationIdOfSoftwareComponent,proto3" json:"certificationIdOfSoftwareComponent,omitempty" validate:"max=64"`
}

func (m *MsgProvisionModel) Reset()         { *m = MsgProvisionModel{} }
func (m *MsgProvisionModel) String() string { return proto.CompactTextString(m) }
func (*MsgProvisionModel) ProtoMessage()    {}
func (*MsgProvisionModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{4}
}
func (m *MsgProvisionModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvisionModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvisionModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvisionModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvisionModel.Merge(m, src)
}
func (m *MsgProvisionModel) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvisionModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvisionModel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvisionModel proto.InternalMessageInfo

func (m *MsgProvisionModel) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgProvisionModel) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *MsgProvisionModel) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *MsgProvisionModel) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *MsgProvisionModel) GetSoftwareVersionString() string {
	if m != nil {
		return m.SoftwareVersionString
	}
	return ""
}

func (m *MsgProvisionModel) GetCDVersionNumber() uint32 {
	if m != nil {
		return m.CDVersionNumber
	}
	return 0
}

func (m *MsgProvisionModel) GetProvisionalDate() string {
	if m != nil {
		return m.ProvisionalDate
	}
	return ""
}

func (m *MsgProvisionModel) GetCertificationType() string {
	if m != nil {
		return m.CertificationType
	}
	return ""
}

func (m *MsgProvisionModel) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MsgProvisionModel) GetProgramTypeVersion() string {
	if m != nil {
		return m.ProgramTypeVersion
	}
	return ""
}

func (m *MsgProvisionModel) GetCDCertificateId() string {
	if m != nil {
		return m.CDCertificateId
	}
	return ""
}

func (m *MsgProvisionModel) GetFamilyId() string {
	if m != nil {
		return m.FamilyId
	}
	return ""
}

func (m *MsgProvisionModel) GetSupportedClusters() string {
	if m != nil {
		return m.SupportedClusters
	}
	return ""
}

func (m *MsgProvisionModel) GetCompliantPlatformUsed() string {
	if m != nil {
		return m.CompliantPlatformUsed
	}
	return ""
}

func (m *MsgProvisionModel) GetCompliantPlatformVersion() string {
	if m != nil {
		return m.CompliantPlatformVersion
	}
	return ""
}

func (m *MsgProvisionModel) GetOSVersion() string {
	if m != nil {
		return m.OSVersion
	}
	return ""
}

func (m *MsgProvisionModel) GetCertificationRoute() string {
	if m != nil {
		return m.CertificationRoute
	}
	return ""
}

func (m *MsgProvisionModel) GetProgramType() string {
	if m != nil {
		return m.ProgramType
	}
	return ""
}

func (m *MsgProvisionModel) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *MsgProvisionModel) GetParentChild() string {
	if m != nil {
		return m.ParentChild
	}
	return ""
}

func (m *MsgProvisionModel) GetCertificationIdOfSoftwareComponent() string {
	if m != nil {
		return m.CertificationIdOfSoftwareComponent
	}
	return ""
}

type MsgProvisionModelResponse struct {
}

func (m *MsgProvisionModelResponse) Reset()         { *m = MsgProvisionModelResponse{} }
func (m *MsgProvisionModelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProvisionModelResponse) ProtoMessage()    {}
func (*MsgProvisionModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db4a0d801b7ae7cc, []int{5}
}
func (m *MsgProvisionModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvisionModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvisionModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvisionModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvisionModelResponse.Merge(m, src)
}
func (m *MsgProvisionModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvisionModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvisionModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvisionModelResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCertifyModel)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgCertifyModel")
	proto.RegisterType((*MsgCertifyModelResponse)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgCertifyModelResponse")
	proto.RegisterType((*MsgRevokeModel)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgRevokeModel")
	proto.RegisterType((*MsgRevokeModelResponse)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgRevokeModelResponse")
	proto.RegisterType((*MsgProvisionModel)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgProvisionModel")
	proto.RegisterType((*MsgProvisionModelResponse)(nil), "zigbeealliance.distributedcomplianceledger.compliance.MsgProvisionModelResponse")
}

func init() { proto.RegisterFile("compliance/tx.proto", fileDescriptor_db4a0d801b7ae7cc) }

var fileDescriptor_db4a0d801b7ae7cc = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x6b, 0xc7, 0x8d, 0x57, 0x89, 0x55, 0xad, 0xad, 0x66, 0xad, 0x00, 0x92, 0xc1, 0x93,
	0x0e, 0xd1, 0x5f, 0x1c, 0xa5, 0x40, 0x01, 0xa3, 0x88, 0x15, 0xb7, 0x31, 0x02, 0x25, 0x2e, 0x9d,
	0xf6, 0xd0, 0x4b, 0x41, 0x69, 0x47, 0xcc, 0xa2, 0x24, 0x97, 0xdd, 0x5d, 0xa9, 0x56, 0x8f, 0x6d,
	0x1f, 0xa0, 0xef, 0x50, 0xa0, 0xa7, 0x1e, 0xfb, 0x10, 0x45, 0x4f, 0x41, 0x4f, 0x3d, 0x09, 0x85,
	0xfd, 0x06, 0x7a, 0x82, 0x82, 0xa4, 0xa8, 0x1f, 0x4a, 0x26, 0x04, 0xc3, 0x80, 0x11, 0x40, 0x37,
	0x7b, 0x38, 0xdf, 0xcf, 0xee, 0x8c, 0xc7, 0x43, 0xa2, 0x9d, 0x36, 0x77, 0x3c, 0x9b, 0x99, 0x6e,
	0x1b, 0x2a, 0xea, 0xbc, 0xec, 0x09, 0xae, 0x38, 0xae, 0xff, 0xc8, 0xac, 0x16, 0x80, 0x69, 0x87,
	0x0f, 0xca, 0x94, 0x49, 0x25, 0x58, 0xab, 0xab, 0x80, 0x4e, 0xd2, 0x6d, 0xa0, 0x16, 0x88, 0xf2,
	0x24, 0x90, 0xdb, 0x6b, 0x73, 0xe9, 0x70, 0xf9, 0x6d, 0x40, 0x52, 0x09, 0x7f, 0x09, 0x19, 0x73,
	0xbb, 0x16, 0xb7, 0x78, 0x18, 0xf7, 0x7f, 0x0a, 0xa3, 0xfa, 0x2f, 0x29, 0x94, 0x6e, 0x4a, 0xab,
	0x01, 0x42, 0xb1, 0x4e, 0xbf, 0xc9, 0x29, 0xd8, 0xf8, 0x0b, 0xb4, 0x29, 0x99, 0xe5, 0x82, 0x20,
	0xda, 0xbe, 0x56, 0xdc, 0x3a, 0xaa, 0x0c, 0x07, 0x85, 0x9d, 0x9e, 0x69, 0x33, 0x6a, 0x2a, 0xf8,
	0x54, 0x17, 0xf0, 0x7d, 0x97, 0x09, 0xa0, 0xfa, 0x3f, 0x7f, 0x96, 0x76, 0x47, 0x12, 0xcf, 0x28,
	0x15, 0x20, 0xe5, 0x99, 0x12, 0xcc, 0xb5, 0x8c, 0x11, 0x1c, 0x57, 0xd1, 0x7a, 0x8f, 0x51, 0xf2,
	0xc1, 0xbe, 0x56, 0xbc, 0x73, 0x94, 0x1f, 0x0e, 0x0a, 0xb9, 0x09, 0x8b, 0xa5, 0xe0, 0xb0, 0xf6,
	0xc8, 0x56, 0x70, 0xf8, 0xb4, 0x5e, 0x3f, 0xa8, 0xeb, 0x86, 0x9f, 0xea, 0x23, 0x3c, 0x46, 0xc9,
	0xfa, 0x72, 0x08, 0x8f, 0x51, 0x5c, 0x44, 0x69, 0xc9, 0x3b, 0xea, 0x07, 0x53, 0xc0, 0xd7, 0x20,
	0x24, 0xe3, 0x2e, 0xd9, 0xd8, 0xd7, 0x8a, 0xf7, 0x8d, 0x78, 0x18, 0xbf, 0x41, 0xd9, 0x58, 0x28,
	0xb4, 0x4b, 0xee, 0x04, 0xa7, 0x8c, 0xa9, 0x45, 0xa7, 0x7c, 0xe4, 0x98, 0xe7, 0x87, 0x4f, 0x9f,
	0xe8, 0xc6, 0x62, 0x30, 0x7e, 0x81, 0xd2, 0xed, 0xe7, 0xa3, 0xd0, 0xab, 0xae, 0xd3, 0x02, 0x41,
	0x36, 0x7d, 0xfd, 0x45, 0xee, 0xab, 0xd3, 0xee, 0xe3, 0x30, 0x7c, 0x8c, 0x32, 0xed, 0xa0, 0x0c,
	0xac, 0x6d, 0x2a, 0xc6, 0xdd, 0xe7, 0xa6, 0x02, 0xf2, 0x61, 0xe0, 0xed, 0xc1, 0x15, 0x15, 0x30,
	0xe6, 0x11, 0xb8, 0x19, 0xa3, 0x79, 0xd3, 0xf7, 0x80, 0xdc, 0x0d, 0x68, 0x0a, 0xc3, 0x41, 0xe1,
	0xe1, 0x15, 0x47, 0xac, 0x55, 0xab, 0x71, 0x3a, 0x1f, 0x89, 0x6b, 0x68, 0x53, 0x80, 0x29, 0xb9,
	0x4b, 0xb6, 0x02, 0x8e, 0xbd, 0xe1, 0xa0, 0x90, 0x9d, 0x70, 0x84, 0xd0, 0xc7, 0x4f, 0x7c, 0xf4,
	0x28, 0x11, 0x1f, 0x23, 0xec, 0x09, 0x6e, 0x09, 0xd3, 0xf1, 0x19, 0xa2, 0xaa, 0xa0, 0x00, 0x9e,
	0x1d, 0x0e, 0x0a, 0x99, 0x59, 0xb8, 0x7f, 0xb9, 0x0b, 0x00, 0xe1, 0xcd, 0x36, 0xc6, 0x86, 0xe0,
	0x84, 0x92, 0xd4, 0x52, 0x95, 0x8a, 0xc3, 0x70, 0x0d, 0xdd, 0xed, 0x98, 0x0e, 0xb3, 0xfb, 0x27,
	0x94, 0xdc, 0x4b, 0xb2, 0x31, 0x4e, 0xc3, 0x0d, 0x94, 0x91, 0x5d, 0xcf, 0xe3, 0x42, 0x01, 0x6d,
	0xd8, 0x5d, 0xa9, 0x40, 0x48, 0x72, 0x3f, 0x09, 0x3b, 0x9f, 0x8f, 0x5f, 0xa2, 0x6c, 0xf4, 0xb7,
	0xa9, 0x4e, 0x6d, 0x53, 0x75, 0xb8, 0x70, 0xbe, 0x92, 0x40, 0xc9, 0x76, 0x12, 0xd1, 0x62, 0x0c,
	0xfe, 0x12, 0x91, 0xb9, 0x07, 0xd1, 0xdd, 0xa6, 0x93, 0xf8, 0xae, 0x84, 0xe1, 0x03, 0xb4, 0xf5,
	0xfa, 0x2c, 0xe2, 0xf8, 0x28, 0x89, 0x63, 0x92, 0xe7, 0x57, 0x77, 0xa6, 0x4b, 0x0c, 0xde, 0x55,
	0x40, 0x32, 0x89, 0xd5, 0x9d, 0x07, 0xe0, 0x4f, 0x50, 0x6a, 0xaa, 0xe6, 0x04, 0x27, 0xe1, 0xa7,
	0x33, 0x7d, 0xd3, 0x4a, 0x98, 0xae, 0xf4, 0xef, 0x9a, 0xec, 0x24, 0x9a, 0x1e, 0xe7, 0x05, 0x6a,
	0xa6, 0x00, 0x57, 0x35, 0xde, 0x32, 0x9b, 0x92, 0xdd, 0x64, 0xb5, 0x49, 0x26, 0x06, 0xa4, 0xcf,
	0x98, 0x3f, 0xa1, 0xaf, 0x3b, 0x67, 0xa3, 0x41, 0xd0, 0xe0, 0x8e, 0xc7, 0x5d, 0x70, 0x15, 0xc9,
	0x26, 0xf1, 0x2d, 0x41, 0xa0, 0xef, 0xa1, 0x07, 0xb1, 0x29, 0x6c, 0x80, 0xf4, 0xb8, 0x2b, 0x41,
	0xff, 0x7b, 0x03, 0x6d, 0x37, 0xa5, 0x65, 0x40, 0x8f, 0x7f, 0x07, 0xab, 0x01, 0x7d, 0x8b, 0x03,
	0xfa, 0x33, 0xb4, 0x2d, 0xa0, 0xc7, 0x97, 0x9f, 0xce, 0xb1, 0xf4, 0xdb, 0x1f, 0xcd, 0x3a, 0x41,
	0x1f, 0xcf, 0xf6, 0xd2, 0xb8, 0xcd, 0x7e, 0x4a, 0xa1, 0x4c, 0x53, 0x5a, 0xa7, 0x82, 0xf7, 0x98,
	0x7f, 0xe6, 0x55, 0xa7, 0xdd, 0x62, 0xa7, 0x3d, 0x43, 0x69, 0x2f, 0x2a, 0x84, 0x69, 0x2f, 0xd3,
	0x6a, 0xf1, 0xfc, 0xd5, 0x1a, 0xb0, 0x5a, 0x03, 0x56, 0x6b, 0xc0, 0xfb, 0xb6, 0x06, 0x3c, 0x44,
	0x7b, 0x73, 0x33, 0x38, 0x9a, 0xd0, 0x8f, 0x7f, 0xde, 0x40, 0xeb, 0x4d, 0x69, 0xe1, 0xdf, 0x35,
	0x74, 0x6f, 0xe6, 0x7d, 0xed, 0xf3, 0xf2, 0xb5, 0x5e, 0x16, 0xcb, 0xb1, 0x8d, 0x23, 0xf7, 0xea,
	0x66, 0x78, 0x22, 0xc3, 0xf8, 0x37, 0x0d, 0xa5, 0xa6, 0xd7, 0x96, 0xe3, 0xeb, 0xf3, 0x4f, 0xd1,
	0xe4, 0x9a, 0x37, 0x42, 0x33, 0x76, 0xf9, 0x87, 0x86, 0xb6, 0x63, 0xff, 0xf5, 0x5e, 0x5c, 0x5f,
	0x61, 0x96, 0x29, 0x77, 0x7a, 0x53, 0x4c, 0x91, 0xdd, 0x23, 0xf8, 0xeb, 0x22, 0xaf, 0xbd, 0xbb,
	0xc8, 0x6b, 0xff, 0x5d, 0xe4, 0xb5, 0x5f, 0x2f, 0xf3, 0x6b, 0xef, 0x2e, 0xf3, 0x6b, 0xff, 0x5e,
	0xe6, 0xd7, 0xbe, 0x79, 0x69, 0x31, 0xf5, 0xb6, 0xdb, 0xf2, 0x69, 0x2a, 0xa1, 0x6a, 0x29, 0x92,
	0xad, 0x4c, 0xc9, 0x96, 0x26, 0x32, 0xa5, 0x50, 0xb8, 0x72, 0x5e, 0x99, 0xfe, 0x04, 0xd1, 0xf7,
	0x40, 0xb6, 0x36, 0x83, 0xcf, 0x03, 0x07, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x9a, 0x0d,
	0x97, 0x9d, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CertifyModel(ctx context.Context, in *MsgCertifyModel, opts ...grpc.CallOption) (*MsgCertifyModelResponse, error)
	RevokeModel(ctx context.Context, in *MsgRevokeModel, opts ...grpc.CallOption) (*MsgRevokeModelResponse, error)
	ProvisionModel(ctx context.Context, in *MsgProvisionModel, opts ...grpc.CallOption) (*MsgProvisionModelResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CertifyModel(ctx context.Context, in *MsgCertifyModel, opts ...grpc.CallOption) (*MsgCertifyModelResponse, error) {
	out := new(MsgCertifyModelResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.compliance.Msg/CertifyModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeModel(ctx context.Context, in *MsgRevokeModel, opts ...grpc.CallOption) (*MsgRevokeModelResponse, error) {
	out := new(MsgRevokeModelResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.compliance.Msg/RevokeModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProvisionModel(ctx context.Context, in *MsgProvisionModel, opts ...grpc.CallOption) (*MsgProvisionModelResponse, error) {
	out := new(MsgProvisionModelResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.compliance.Msg/ProvisionModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CertifyModel(context.Context, *MsgCertifyModel) (*MsgCertifyModelResponse, error)
	RevokeModel(context.Context, *MsgRevokeModel) (*MsgRevokeModelResponse, error)
	ProvisionModel(context.Context, *MsgProvisionModel) (*MsgProvisionModelResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CertifyModel(ctx context.Context, req *MsgCertifyModel) (*MsgCertifyModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertifyModel not implemented")
}
func (*UnimplementedMsgServer) RevokeModel(ctx context.Context, req *MsgRevokeModel) (*MsgRevokeModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeModel not implemented")
}
func (*UnimplementedMsgServer) ProvisionModel(ctx context.Context, req *MsgProvisionModel) (*MsgProvisionModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionModel not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CertifyModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCertifyModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CertifyModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.compliance.Msg/CertifyModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CertifyModel(ctx, req.(*MsgCertifyModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.compliance.Msg/RevokeModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeModel(ctx, req.(*MsgRevokeModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProvisionModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvisionModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProvisionModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.compliance.Msg/ProvisionModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProvisionModel(ctx, req.(*MsgProvisionModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zigbeealliance.distributedcomplianceledger.compliance.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CertifyModel",
			Handler:    _Msg_CertifyModel_Handler,
		},
		{
			MethodName: "RevokeModel",
			Handler:    _Msg_RevokeModel_Handler,
		},
		{
			MethodName: "ProvisionModel",
			Handler:    _Msg_ProvisionModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compliance/tx.proto",
}

func (m *MsgCertifyModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertificationIdOfSoftwareComponent) > 0 {
		i -= len(m.CertificationIdOfSoftwareComponent)
		copy(dAtA[i:], m.CertificationIdOfSoftwareComponent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationIdOfSoftwareComponent)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ParentChild) > 0 {
		i -= len(m.ParentChild)
		copy(dAtA[i:], m.ParentChild)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParentChild)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ProgramType) > 0 {
		i -= len(m.ProgramType)
		copy(dAtA[i:], m.ProgramType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.CertificationRoute) > 0 {
		i -= len(m.CertificationRoute)
		copy(dAtA[i:], m.CertificationRoute)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationRoute)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.OSVersion) > 0 {
		i -= len(m.OSVersion)
		copy(dAtA[i:], m.OSVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OSVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CompliantPlatformVersion) > 0 {
		i -= len(m.CompliantPlatformVersion)
		copy(dAtA[i:], m.CompliantPlatformVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompliantPlatformVersion)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CompliantPlatformUsed) > 0 {
		i -= len(m.CompliantPlatformUsed)
		copy(dAtA[i:], m.CompliantPlatformUsed)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompliantPlatformUsed)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SupportedClusters) > 0 {
		i -= len(m.SupportedClusters)
		copy(dAtA[i:], m.SupportedClusters)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SupportedClusters)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FamilyId) > 0 {
		i -= len(m.FamilyId)
		copy(dAtA[i:], m.FamilyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FamilyId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CDCertificateId) > 0 {
		i -= len(m.CDCertificateId)
		copy(dAtA[i:], m.CDCertificateId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CDCertificateId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ProgramTypeVersion) > 0 {
		i -= len(m.ProgramTypeVersion)
		copy(dAtA[i:], m.ProgramTypeVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramTypeVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CertificationType) > 0 {
		i -= len(m.CertificationType)
		copy(dAtA[i:], m.CertificationType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CertificationDate) > 0 {
		i -= len(m.CertificationDate)
		copy(dAtA[i:], m.CertificationDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationDate)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CDVersionNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CDVersionNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SoftwareVersionString) > 0 {
		i -= len(m.SoftwareVersionString)
		copy(dAtA[i:], m.SoftwareVersionString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SoftwareVersionString)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if m.Vid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCertifyModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCertifyModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCertifyModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CertificationType) > 0 {
		i -= len(m.CertificationType)
		copy(dAtA[i:], m.CertificationType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RevocationDate) > 0 {
		i -= len(m.RevocationDate)
		copy(dAtA[i:], m.RevocationDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RevocationDate)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CDVersionNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CDVersionNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SoftwareVersionString) > 0 {
		i -= len(m.SoftwareVersionString)
		copy(dAtA[i:], m.SoftwareVersionString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SoftwareVersionString)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if m.Vid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProvisionModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvisionModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvisionModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertificationIdOfSoftwareComponent) > 0 {
		i -= len(m.CertificationIdOfSoftwareComponent)
		copy(dAtA[i:], m.CertificationIdOfSoftwareComponent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationIdOfSoftwareComponent)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ParentChild) > 0 {
		i -= len(m.ParentChild)
		copy(dAtA[i:], m.ParentChild)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParentChild)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ProgramType) > 0 {
		i -= len(m.ProgramType)
		copy(dAtA[i:], m.ProgramType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.CertificationRoute) > 0 {
		i -= len(m.CertificationRoute)
		copy(dAtA[i:], m.CertificationRoute)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationRoute)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.OSVersion) > 0 {
		i -= len(m.OSVersion)
		copy(dAtA[i:], m.OSVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OSVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.CompliantPlatformVersion) > 0 {
		i -= len(m.CompliantPlatformVersion)
		copy(dAtA[i:], m.CompliantPlatformVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompliantPlatformVersion)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CompliantPlatformUsed) > 0 {
		i -= len(m.CompliantPlatformUsed)
		copy(dAtA[i:], m.CompliantPlatformUsed)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompliantPlatformUsed)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SupportedClusters) > 0 {
		i -= len(m.SupportedClusters)
		copy(dAtA[i:], m.SupportedClusters)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SupportedClusters)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FamilyId) > 0 {
		i -= len(m.FamilyId)
		copy(dAtA[i:], m.FamilyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FamilyId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CDCertificateId) > 0 {
		i -= len(m.CDCertificateId)
		copy(dAtA[i:], m.CDCertificateId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CDCertificateId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ProgramTypeVersion) > 0 {
		i -= len(m.ProgramTypeVersion)
		copy(dAtA[i:], m.ProgramTypeVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramTypeVersion)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CertificationType) > 0 {
		i -= len(m.CertificationType)
		copy(dAtA[i:], m.CertificationType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CertificationType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProvisionalDate) > 0 {
		i -= len(m.ProvisionalDate)
		copy(dAtA[i:], m.ProvisionalDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProvisionalDate)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CDVersionNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CDVersionNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SoftwareVersionString) > 0 {
		i -= len(m.SoftwareVersionString)
		copy(dAtA[i:], m.SoftwareVersionString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SoftwareVersionString)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Pid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x18
	}
	if m.Vid != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProvisionModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvisionModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvisionModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCertifyModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vid != 0 {
		n += 1 + sovTx(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovTx(uint64(m.SoftwareVersion))
	}
	l = len(m.SoftwareVersionString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CDVersionNumber != 0 {
		n += 1 + sovTx(uint64(m.CDVersionNumber))
	}
	l = len(m.CertificationDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProgramTypeVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CDCertificateId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FamilyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SupportedClusters)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CompliantPlatformUsed)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CompliantPlatformVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OSVersion)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationRoute)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.ProgramType)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Transport)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.ParentChild)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationIdOfSoftwareComponent)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCertifyModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vid != 0 {
		n += 1 + sovTx(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovTx(uint64(m.SoftwareVersion))
	}
	l = len(m.SoftwareVersionString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CDVersionNumber != 0 {
		n += 1 + sovTx(uint64(m.CDVersionNumber))
	}
	l = len(m.RevocationDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProvisionModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vid != 0 {
		n += 1 + sovTx(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovTx(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovTx(uint64(m.SoftwareVersion))
	}
	l = len(m.SoftwareVersionString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CDVersionNumber != 0 {
		n += 1 + sovTx(uint64(m.CDVersionNumber))
	}
	l = len(m.ProvisionalDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProgramTypeVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CDCertificateId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FamilyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SupportedClusters)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CompliantPlatformUsed)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CompliantPlatformVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OSVersion)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationRoute)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.ProgramType)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Transport)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.ParentChild)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CertificationIdOfSoftwareComponent)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProvisionModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCertifyModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDVersionNumber", wireType)
			}
			m.CDVersionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CDVersionNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramTypeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramTypeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDCertificateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CDCertificateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FamilyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedClusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedClusters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompliantPlatformUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompliantPlatformUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompliantPlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompliantPlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OSVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationRoute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationRoute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentChild", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentChild = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationIdOfSoftwareComponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationIdOfSoftwareComponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCertifyModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCertifyModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCertifyModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDVersionNumber", wireType)
			}
			m.CDVersionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CDVersionNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvisionModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvisionModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvisionModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersionString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDVersionNumber", wireType)
			}
			m.CDVersionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CDVersionNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionalDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionalDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramTypeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramTypeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CDCertificateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CDCertificateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FamilyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedClusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedClusters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompliantPlatformUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompliantPlatformUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompliantPlatformVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompliantPlatformVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OSVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationRoute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationRoute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentChild", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentChild = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationIdOfSoftwareComponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationIdOfSoftwareComponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvisionModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvisionModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvisionModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
